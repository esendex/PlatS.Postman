{
	"info": {
		"_postman_id": "fcaa9f4c-a4e7-44e5-9edb-f08aa8ea234d",
		"name": "ContactsApiBulk",
		"description": "[https://github.com/esendex/PlatS.Docs/wiki/Contacts-Bulk-Operations](https://github.com/esendex/PlatS.Docs/wiki/Contacts-Bulk-Operations)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "CheckOperationStatus",
			"item": [
				{
					"name": "GetContactIds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "499e3ee8-3a5a-4dbe-b957-6e27a3aac03b",
								"exec": [
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"var listOfContactsMsisdn = [\"+40749211222\", \"+40749211233\", \"+40749211244\", \"+40749211255\"];\r",
									"var listOfContactIds = [];\r",
									"\r",
									"\r",
									"for (var i = 1; i<listOfContactsMsisdn.length+1; i++)\r",
									"{\r",
									"    var searchMsisdn = listOfContactsMsisdn[i-1].slice(1, listOfContactsMsisdn[i-1].length); // remove \"+\"\r",
									"    console.log(\"for:\" +searchMsisdn);\r",
									"    //{{hostname}}/v1/accounts/{{accountId}}/contacts?search={{searchMsisdn}}\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts?search=\"+searchMsisdn,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"content-type\": \"application/json\",\r",
									"            \"accept\": \"application/json\",\r",
									"            \"X-Client-Product\": \"asdb\",\r",
									"            \"X-Client-User\": \"someuser\",\r",
									"            \"X-Subscription-Key\":subscriptionKey\r",
									"        },\r",
									"        body: {}\r",
									"    }, function (err, res) {\r",
									"        if (res.json().results.length != 0)\r",
									"        {\r",
									"        var crtContactID = res.json().results[0].id;\r",
									"        console.log(\"retrived contactID for: \" + crtContactID);\r",
									"        listOfContactIds.push(crtContactID.toUpperCase());\r",
									"        pm.collectionVariables.set(\"listOfContactIds\", listOfContactIds);\r",
									"        pm.collectionVariables.set(res.json().results[0].address.msisdn, crtContactID);\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"        var randomContactID = \"76472cec-8d0c-11ed-a1eb-0242ac120002\";\r",
									"        console.log(\"adding random contactID \" + randomContactID);\r",
									"        listOfContactIds.push(randomContactID.toUpperCase());\r",
									"        pm.collectionVariables.set(\"listOfContactIds\", listOfContactIds);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "0edf8b29-4da5-4d4c-8ac3-ea9b71c7154d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "postman-echo.com/get"
					},
					"response": []
				},
				{
					"name": "BulkDeleteContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20a6d6f7-9eb9-4b38-9ac5-22d671d6bc75",
								"exec": [
									"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationId\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationId\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9b6f692-09a3-404c-84d0-9016b06b7379",
								"exec": [
									"var listOfContactsMsisdn = [\"+40749211222\", \"+40749211233\", \"+40749211244\", \"+40749211255\"];\r",
									"\r",
									"\r",
									"var finalList = pm.collectionVariables.get(\"listOfContactIds\");\r",
									"console.log(\"finalList: \" + finalList);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId1\",pm.collectionVariables.get(listOfContactsMsisdn[0]));\r",
									"pm.collectionVariables.set(\"msisdn1\",listOfContactsMsisdn[0]);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId2\",pm.collectionVariables.get(listOfContactsMsisdn[1]));\r",
									"pm.collectionVariables.set(\"msisdn2\",listOfContactsMsisdn[1]);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId3\",pm.collectionVariables.get(listOfContactsMsisdn[2]));\r",
									"pm.collectionVariables.set(\"msisdn3\",listOfContactsMsisdn[2]);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId4\",pm.collectionVariables.get(listOfContactsMsisdn[3]));\r",
									"pm.collectionVariables.set(\"msisdn4\",listOfContactsMsisdn[3]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "44c7f2ad-8004-4906-bde0-21e958f5a073",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ContactIds\": [\r\n        \"{{contactId1}}\",\r\n        \"{{contactId2}}\",\r\n        \"{{contactId3}}\",\r\n        \"{{contactId4}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkDeleteContacts_Todo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Todo\";\r",
									"var expectedOperationType = \"BulkDelete\";\r",
									"var expectedTotalItemsReceived = 4;\r",
									"var expectedValidItemsCount = 0;\r",
									"var expectedValidProcessedItemsCount = 0;\r",
									"var expectedAlreadyExistingItemsCount = 0;\r",
									"var expectedInvalidItemsCount = 0;\r",
									"var expectedDuplicateItemsCount = 0;\r",
									"var expectedPercentageCompleted = 0; \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
									"    //console.log(\"Current Operation status2: \" + currentStatus);\r",
									"\r",
									"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
									"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
									"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
									"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
									"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
									"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
									"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
									"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
									"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"OperationType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CreateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastUpdateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"TotalItemsReceived\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidProcessedItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"AlreadyExistingItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"InvalidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"DuplicateItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"PercentageCompleted\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationStatus\",\r",
									"    \"OperationType\",\r",
									"    \"CreateTime\",\r",
									"    \"LastUpdateTime\",\r",
									"    \"TotalItemsReceived\",\r",
									"    \"ValidItemsCount\",\r",
									"    \"ValidProcessedItemsCount\",\r",
									"    \"AlreadyExistingItemsCount\",\r",
									"    \"InvalidItemsCount\",\r",
									"    \"DuplicateItemsCount\",\r",
									"    \"PercentageCompleted\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"tries\",0);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "1a9768da-1529-4c01-88a4-889ee6015fbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_UntilStatusIs_InProgress_Loop",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"InProgress\";\r",
									"\r",
									"var crtTimeStep = 150;\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\",200);\r",
									"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
									"\r",
									"\r",
									"var crtOperationStatus = responseJson.OperationStatus;\r",
									"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
									"\r",
									"var crtTries = pm.collectionVariables.get(\"tries\");\r",
									"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
									"\r",
									"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
									"{\r",
									"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
									"     setTimeout(function() {}, crtTimeStep);\r",
									"     postman.setNextRequest(pm.info.requestName);\r",
									"     if (crtOperationStatus == \"Done\"){\r",
									"        console.log(\"crtOperationStatus got too fast to Done from Todo => skipping InProgress test...\");\r",
									"        postman.setNextRequest(\"GetOperationStatus_BulkDeleteContacts_Done\");\r",
									"        break breakme;\r",
									"     }\r",
									" } else {\r",
									"    pm.collectionVariables.unset(\"tries\");\r",
									"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
									"    postman.setNextRequest(\"GetOperationStatus_BulkDeleteContacts_InProgress\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "61f6aa21-be84-47d9-93e7-54e16bf5c8f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkDeleteContacts_InProgress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"InProgress\";\r",
									"var expectedOperationType = \"BulkDelete\";\r",
									"var expectedTotalItemsReceived = 4;\r",
									"var expectedValidItemsCount = 0;\r",
									"var expectedValidProcessedItemsCount = 0;\r",
									"var expectedAlreadyExistingItemsCount = 0;\r",
									"var expectedInvalidItemsCount = 0;\r",
									"var expectedDuplicateItemsCount = 0;\r",
									"var expectedPercentageCompleted = 0; //TODO later\r",
									"\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
									"    //console.log(\"Current Operation status2: \" + currentStatus);\r",
									"\r",
									"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
									"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
									"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
									"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
									"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
									"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
									"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
									"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
									"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"OperationType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CreateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastUpdateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"TotalItemsReceived\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidProcessedItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"AlreadyExistingItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"InvalidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"DuplicateItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"PercentageCompleted\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationStatus\",\r",
									"    \"OperationType\",\r",
									"    \"CreateTime\",\r",
									"    \"LastUpdateTime\",\r",
									"    \"TotalItemsReceived\",\r",
									"    \"ValidItemsCount\",\r",
									"    \"ValidProcessedItemsCount\",\r",
									"    \"AlreadyExistingItemsCount\",\r",
									"    \"InvalidItemsCount\",\r",
									"    \"DuplicateItemsCount\",\r",
									"    \"PercentageCompleted\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"tries\",0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "08b85fd4-10e8-4336-bad2-bbfb65cf90f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_UntilStatusIs_Done_Loop",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"\r",
									"var crtTimeStep = 100;\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\",200);\r",
									"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
									"\r",
									"\r",
									"var crtOperationStatus = responseJson.OperationStatus;\r",
									"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
									"\r",
									"var crtTries = pm.collectionVariables.get(\"tries\");\r",
									"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
									"\r",
									"if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
									"{\r",
									"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
									"     setTimeout(function() {}, crtTimeStep);\r",
									"     postman.setNextRequest(pm.info.requestName);\r",
									" } else {\r",
									"    pm.collectionVariables.unset(\"tries\");\r",
									"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
									"    postman.setNextRequest(\"GetOperationStatus_BulkDeleteContacts_Done\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "6b59ad9b-219d-4bcd-88b4-549cbd5521a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkDeleteContacts_Done",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"var expectedOperationType = \"BulkDelete\";\r",
									"var expectedTotalItemsReceived = 4;\r",
									"var expectedValidItemsCount = 0;\r",
									"var expectedValidProcessedItemsCount = 4;\r",
									"var expectedAlreadyExistingItemsCount = 0;\r",
									"var expectedInvalidItemsCount = 0;\r",
									"var expectedDuplicateItemsCount = 0;\r",
									"var expectedPercentageCompleted = 0; //TODO later\r",
									"\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
									"    //console.log(\"Current Operation status2: \" + currentStatus);\r",
									"\r",
									"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
									"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
									"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
									"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
									"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
									"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
									"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
									"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
									"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"OperationType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CreateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastUpdateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"TotalItemsReceived\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidProcessedItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"AlreadyExistingItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"InvalidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"DuplicateItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"PercentageCompleted\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationStatus\",\r",
									"    \"OperationType\",\r",
									"    \"CreateTime\",\r",
									"    \"LastUpdateTime\",\r",
									"    \"TotalItemsReceived\",\r",
									"    \"ValidItemsCount\",\r",
									"    \"ValidProcessedItemsCount\",\r",
									"    \"AlreadyExistingItemsCount\",\r",
									"    \"InvalidItemsCount\",\r",
									"    \"DuplicateItemsCount\",\r",
									"    \"PercentageCompleted\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "4a89b363-a8ed-4fde-b617-8f4cc70094be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				}
			],
			"_postman_id": "9b19de9a-df7c-4b63-9908-527ad0282037",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "018a1bf2-0520-400c-a4ed-548c5d46caa3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6360d4e4-832f-45eb-b8d5-48890c1e27b0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "BasicCRUD_SMOKE",
			"item": [
				{
					"name": "BulkDeleteContacts2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20a6d6f7-9eb9-4b38-9ac5-22d671d6bc75",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationId\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationId\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
									"pm.collectionVariables.set(\"tries\", 0);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9b6f692-09a3-404c-84d0-9016b06b7379",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "0275482b-e97a-4d3c-8ef6-7e45161623de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ContactIds\": [\r\n        \"{{contactId1}}\",\r\n        \"{{contactId2}}\",\r\n        \"{{contactId3}}\",\r\n        \"{{contactId4}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkDeleteContacts_Done2_Loop_UntilDone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"\r",
									"var crtTimeStep = 1000;\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
									"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
									"\r",
									"\r",
									"var crtOperationStatus = responseJson.OperationStatus;\r",
									"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
									"\r",
									"var crtTries = pm.collectionVariables.get(\"tries\");\r",
									"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
									"\r",
									"if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
									"{\r",
									"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
									"     setTimeout(function() {}, crtTimeStep);\r",
									"     postman.setNextRequest(pm.info.requestName);\r",
									" } else {\r",
									"    pm.collectionVariables.unset(\"tries\");\r",
									"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
									"    postman.setNextRequest(\"GetOperationStatus_BulkDeleteContacts_Done2\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "88aee34d-4d4b-4012-9151-072088de7dff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkDeleteContacts_Done2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"var expectedOperationType = \"BulkDelete\";\r",
									"var expectedTotalItemsReceived = 4;\r",
									"var expectedValidItemsCount = 0;\r",
									"var expectedValidProcessedItemsCount = 4;\r",
									"var expectedAlreadyExistingItemsCount = 0;\r",
									"var expectedInvalidItemsCount = 0;\r",
									"var expectedDuplicateItemsCount = 0;\r",
									"var expectedPercentageCompleted = 0; //TODO later\r",
									"\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
									"    //console.log(\"Current Operation status2: \" + currentStatus);\r",
									"\r",
									"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
									"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
									"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
									"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
									"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
									"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
									"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
									"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
									"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"OperationType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CreateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastUpdateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"TotalItemsReceived\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidProcessedItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"AlreadyExistingItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"InvalidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"DuplicateItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"PercentageCompleted\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationStatus\",\r",
									"    \"OperationType\",\r",
									"    \"CreateTime\",\r",
									"    \"LastUpdateTime\",\r",
									"    \"TotalItemsReceived\",\r",
									"    \"ValidItemsCount\",\r",
									"    \"ValidProcessedItemsCount\",\r",
									"    \"AlreadyExistingItemsCount\",\r",
									"    \"InvalidItemsCount\",\r",
									"    \"DuplicateItemsCount\",\r",
									"    \"PercentageCompleted\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "258602e5-ae33-42cd-83c8-355249c5671e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "BulkDeleteGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20a6d6f7-9eb9-4b38-9ac5-22d671d6bc75",
								"exec": [
									"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"rowsAffected\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"rowsAffected\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check delete was successful', function () {\r",
									"    pm.expect(responseJson.rowsAffected).to.be.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9b6f692-09a3-404c-84d0-9016b06b7379",
								"exec": [
									"pm.collectionVariables.set(\"groupIdWithContacts\",\"EE615BBB-66F4-49C1-9218-46FA482D2014\");\r",
									"pm.collectionVariables.set(\"groupIdWithContactsName\",\"GroupWithContacts\");\r",
									"\r",
									"pm.collectionVariables.set(\"groupIdWithoutContacts\",\"7E176B03-43D6-4266-8BAC-A7129C7286DD\");\r",
									"pm.collectionVariables.set(\"groupIdWithoutContactsName\",\"GroupWithoutContacts\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "b5c6ccec-b40c-4230-932f-66e923188952",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"groups\": [\r\n        \"{{groupIdWithContacts}}\",\r\n        \"{{groupIdWithoutContacts}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group"
					},
					"response": []
				},
				{
					"name": "CreateGroupWithContactsForBulk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e564b38-aada-415c-8423-9108b402dccc",
								"exec": [
									"console.log(\"Running prerequests for Create request\");\r",
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.collectionVariables.get(\"groupIdWithContacts\"),\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"X-Client-Product\": \"someProduct\",\r",
									"        \"X-Client-User\": \"user\",\r",
									"        \"X-Subscription-Key\":subscriptionKey\r",
									"    },\r",
									"    body: {}\r",
									"}, function (err, res) {\r",
									"    pm.expect(res).to.have.property('code', 204);\r",
									"    console.log(\"Deleted group with groupId: \" + pm.collectionVariables.get(\"groupIdWithContacts\"));\r",
									"});\r",
									"console.log(\"Ending prerequests for Create request\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "823d3ac5-faef-4778-b278-c7888921624f",
								"exec": [
									"var expectedgroupId = pm.variables.replaceIn('{{groupIdWithContacts}}');\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
									"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"groupId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"etag\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"groupId\",\r",
									"    \"etag\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"pm.collectionVariables.set(\"etag\", responseJson.etag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "ae063879-01cd-47bc-b9ba-1c7a9bd20dca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"groupName\":  \"{{groupIdWithContactsName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}"
					},
					"response": []
				},
				{
					"name": "CreateGroupWithoutContactsForBulk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e564b38-aada-415c-8423-9108b402dccc",
								"exec": [
									"console.log(\"Running prerequests for Create request\");\r",
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.collectionVariables.get(\"groupIdWithoutContacts\"),\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"X-Client-Product\": \"someProduct\",\r",
									"        \"X-Client-User\": \"user\",\r",
									"        \"X-Subscription-Key\":subscriptionKey\r",
									"    },\r",
									"    body: {}\r",
									"}, function (err, res) {\r",
									"    pm.expect(res).to.have.property('code', 204);\r",
									"    console.log(\"Deleted group with groupId: \" + pm.collectionVariables.get(\"groupIdWithoutContacts\"));\r",
									"});\r",
									"console.log(\"Ending prerequests for Create request\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "823d3ac5-faef-4778-b278-c7888921624f",
								"exec": [
									"var expectedgroupId = pm.variables.replaceIn('{{groupIdWithoutContacts}}');\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
									"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"groupId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"etag\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"groupId\",\r",
									"    \"etag\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"pm.collectionVariables.set(\"etag\", responseJson.etag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "945923b0-6d05-4c6c-8276-ddea3ae81ebc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"groupName\":  \"{{groupIdWithoutContactsName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithoutContacts}}"
					},
					"response": []
				},
				{
					"name": "BulkInsert_2Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43e537b5-70b1-442f-a018-440b1588b148",
								"exec": [
									"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationId\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationId\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
									"pm.collectionVariables.set(\"tries\",0); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "8ecf1b3b-b166-4b5c-afa7-5e033a40f0d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"address\": {\r\n                \"msisdn\": \"{{msisdn1}}\"\r\n            },\r\n            \"properties\":{\r\n                \"thisPropWillBeUpdated\": \"ToBeUpdated\"\r\n            }\r\n        },\r\n        {\r\n            \"address\":{\r\n                \"msisdn\": \"{{msisdn2}}\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkInsert_2Contacts_Loop_UntilDone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"\r",
									"var crtTimeStep = 1000;\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
									"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
									"\r",
									"\r",
									"var crtOperationStatus = responseJson.OperationStatus;\r",
									"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
									"\r",
									"var crtTries = pm.collectionVariables.get(\"tries\");\r",
									"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
									"\r",
									"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
									"{\r",
									"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
									"     setTimeout(function() {}, crtTimeStep);\r",
									"     postman.setNextRequest(pm.info.requestName);\r",
									" } else {\r",
									"    pm.collectionVariables.unset(\"tries\");\r",
									"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
									"    postman.setNextRequest(\"GetOperationStatus_BulkInsert_2Contacts\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "e772ba8d-407a-40ef-ae31-146d7c21acd8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkInsert_2Contacts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"var expectedOperationType = \"BulkInsert\";\r",
									"var expectedTotalItemsReceived = 2;\r",
									"var expectedValidItemsCount = 2;\r",
									"var expectedValidProcessedItemsCount = 2;\r",
									"var expectedAlreadyExistingItemsCount = 0;\r",
									"var expectedInvalidItemsCount = 0;\r",
									"var expectedDuplicateItemsCount = 0;\r",
									"var expectedPercentageCompleted = 100;\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
									"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
									"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
									"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
									"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
									"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
									"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
									"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
									"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
									"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"OperationType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CreateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastUpdateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"TotalItemsReceived\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidProcessedItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"AlreadyExistingItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"InvalidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"DuplicateItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"PercentageCompleted\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationStatus\",\r",
									"    \"OperationType\",\r",
									"    \"CreateTime\",\r",
									"    \"LastUpdateTime\",\r",
									"    \"TotalItemsReceived\",\r",
									"    \"ValidItemsCount\",\r",
									"    \"ValidProcessedItemsCount\",\r",
									"    \"AlreadyExistingItemsCount\",\r",
									"    \"InvalidItemsCount\",\r",
									"    \"DuplicateItemsCount\",\r",
									"    \"PercentageCompleted\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "ef4bc538-cd45-46ae-86f5-af350795e833",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "BulkInsert2AndUpdate1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83fd0d7a-2ca7-4ec6-adb9-8cf6cfd35161",
								"exec": [
									"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationId\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationId\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
									"pm.collectionVariables.set(\"tries\",0); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "e65ce0d6-98b9-4865-b3b6-df5baa4d900e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"Address\": {\r\n                \"Msisdn\": \"{{msisdn1}}\"\r\n            },\r\n            \"properties\":{\r\n                \"thisPropWillBeUpdated\": \"ThisWasUpdated\"\r\n            }\r\n        },\r\n        {\r\n            \"Address\": {\r\n                \"Msisdn\": \"{{msisdn3}}\"\r\n            }\r\n        },\r\n        {\r\n            \"Address\": {\r\n                \"Msisdn\": \"{{msisdn4}}\"\r\n            }, \r\n            \"properties\":{\r\n                            \"__displayName\": \"Ion Zapada🤮\"\r\n                        }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkInsert2AndUpdate1_Loop_UntilDone",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"\r",
									"var crtTimeStep = 1000;\r",
									"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
									"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
									"\r",
									"\r",
									"var crtOperationStatus = responseJson.OperationStatus;\r",
									"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
									"\r",
									"var crtTries = pm.collectionVariables.get(\"tries\");\r",
									"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
									"\r",
									"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
									"{\r",
									"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
									"     setTimeout(function() {}, crtTimeStep);\r",
									"     postman.setNextRequest(pm.info.requestName);\r",
									" } else {\r",
									"    pm.collectionVariables.unset(\"tries\");\r",
									"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
									"    postman.setNextRequest(\"GetOperationStatus_BulkInsert2AndUpdate1\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "263d8198-5b0a-45c5-ab47-db1a75510f02",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "GetOperationStatus_BulkInsert2AndUpdate1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedOperationStatus = \"Done\";\r",
									"var expectedOperationType = \"BulkInsertOrUpdate\";\r",
									"var expectedTotalItemsReceived = 3;\r",
									"var expectedValidItemsCount = 3;\r",
									"var expectedValidProcessedItemsCount = 3;\r",
									"var expectedAlreadyExistingItemsCount = 1;\r",
									"var expectedInvalidItemsCount = 0;\r",
									"var expectedDuplicateItemsCount = 0;\r",
									"var expectedPercentageCompleted = 100;\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
									"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
									"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
									"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
									"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
									"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
									"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
									"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
									"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
									"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"OperationStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"OperationType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CreateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastUpdateTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"TotalItemsReceived\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ValidProcessedItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"AlreadyExistingItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"InvalidItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"DuplicateItemsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"PercentageCompleted\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"OperationStatus\",\r",
									"    \"OperationType\",\r",
									"    \"CreateTime\",\r",
									"    \"LastUpdateTime\",\r",
									"    \"TotalItemsReceived\",\r",
									"    \"ValidItemsCount\",\r",
									"    \"ValidProcessedItemsCount\",\r",
									"    \"AlreadyExistingItemsCount\",\r",
									"    \"InvalidItemsCount\",\r",
									"    \"DuplicateItemsCount\",\r",
									"    \"PercentageCompleted\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "ba251c48-bc2b-42b1-96b8-e122590a2155",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
					},
					"response": []
				},
				{
					"name": "UpdateContactIdsAfterRecreatingThem",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "499e3ee8-3a5a-4dbe-b957-6e27a3aac03b",
								"exec": [
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"var listOfContactsMsisdn = [\"+40749211222\", \"+40749211233\", \"+40749211244\", \"+40749211255\"];\r",
									"var listOfContactIds = [];\r",
									"\r",
									"\r",
									"for (var i = 1; i<listOfContactsMsisdn.length+1; i++)\r",
									"{\r",
									"    var searchMsisdn = listOfContactsMsisdn[i-1].slice(1, listOfContactsMsisdn[i-1].length); // remove \"+\"\r",
									"    console.log(\"for:\" +searchMsisdn);\r",
									"    //{{hostname}}/v1/accounts/{{accountId}}/contacts?search={{searchMsisdn}}\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts?search=\"+searchMsisdn,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"content-type\": \"application/json\",\r",
									"            \"accept\": \"application/json\",\r",
									"            \"X-Client-Product\": \"asdb\",\r",
									"            \"X-Client-User\": \"someuser\",\r",
									"            \"X-Subscription-Key\":subscriptionKey\r",
									"        },\r",
									"        body: {}\r",
									"    }, function (err, res) {\r",
									"        if (res.json().results.length != 0)\r",
									"        {\r",
									"        var crtContactID = res.json().results[0].id;\r",
									"        console.log(\"retrived contactID for: \" + crtContactID);\r",
									"        listOfContactIds.push(crtContactID.toUpperCase());\r",
									"        pm.collectionVariables.set(\"listOfContactIds\", listOfContactIds);\r",
									"        pm.collectionVariables.set(res.json().results[0].address.msisdn, crtContactID);\r",
									"        }\r",
									"        else\r",
									"        {\r",
									"        var randomContactID = \"76472cec-8d0c-11ed-a1eb-0242ac120002\";\r",
									"        console.log(\"adding random contactID \" + randomContactID);\r",
									"        listOfContactIds.push(randomContactID.toUpperCase());\r",
									"        pm.collectionVariables.set(\"listOfContactIds\", listOfContactIds);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "59da223b-a2fd-4438-b016-9b02645a6589",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "postman-echo.com/get"
					},
					"response": []
				},
				{
					"name": "GetPatched_UpdatedContact1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90930e9e-599b-4b34-8b41-e7ce4275abae",
								"exec": [
									"var responseJson  = pm.response.json();\r",
									"var expectedUpdatedProperty = \"ThisWasUpdated\";\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the contact1\", function () {\r",
									"    pm.expect(responseJson.properties.thisPropWillBeUpdated).to.eql(expectedUpdatedProperty);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e621f06-e4df-43e4-92bf-d92a6a1fe3b6",
								"exec": [
									"var listOfContactsMsisdn = [\"+40749211222\", \"+40749211233\", \"+40749211244\", \"+40749211255\"];\r",
									"\r",
									"\r",
									"var finalList = pm.collectionVariables.get(\"listOfContactIds\");\r",
									"console.log(\"finalList: \" + finalList);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId1\",pm.collectionVariables.get(listOfContactsMsisdn[0]));\r",
									"pm.collectionVariables.set(\"msisdn1\",listOfContactsMsisdn[0]);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId2\",pm.collectionVariables.get(listOfContactsMsisdn[1]));\r",
									"pm.collectionVariables.set(\"msisdn2\",listOfContactsMsisdn[1]);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId3\",pm.collectionVariables.get(listOfContactsMsisdn[2]));\r",
									"pm.collectionVariables.set(\"msisdn3\",listOfContactsMsisdn[2]);\r",
									"\r",
									"pm.collectionVariables.set(\"contactId4\",pm.collectionVariables.get(listOfContactsMsisdn[3]));\r",
									"pm.collectionVariables.set(\"msisdn4\",listOfContactsMsisdn[3]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "fd67c639-271f-47ca-8a24-90cec33d1e7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "default"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "default"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId1}}"
					},
					"response": []
				},
				{
					"name": "BulkAddGroupContact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "224e1824-4c26-4ba9-aef2-9060674f7839",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca4bf6a4-c5c7-48df-a0c7-93dedaa69e1c",
								"exec": [
									"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
									"var responseJson  = pm.response.json();\r",
									"var expectedTotalReceivedItems = 3;\r",
									"var expectedRowsAffectedCount = 3;\r",
									"var expectedMergedRowsCount = 0;\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"TotalReceivedItems\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"RowsAffectedCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"MergedRowsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"TotalReceivedItems\",\r",
									"    \"RowsAffectedCount\",\r",
									"    \"MergedRowsCount\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check expected data', function () {\r",
									"    pm.expect(responseJson.TotalReceivedItems).to.be.eql(expectedTotalReceivedItems);\r",
									"    pm.expect(responseJson.RowsAffectedCount).to.be.eql(expectedRowsAffectedCount);\r",
									"    pm.expect(responseJson.MergedRowsCount).to.be.eql(expectedMergedRowsCount);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "43d11e5a-0c81-405f-8d3b-0d1ad019fb59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\":[\r\n        \"{{contactId1}}\",\r\n        \"{{contactId2}}\",\r\n        \"{{contactId3}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupIdWithContacts}}/contacts"
					},
					"response": []
				},
				{
					"name": "GetAllGroupContacts_BulkAddGroupContact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87d00785-594f-4ede-bf9b-44bb597614d5",
								"exec": [
									"\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 3\", function () {\r",
									"    pm.expect(responseJson.results.length).to.eql(3);\r",
									"\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"results\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"eTag\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"accountId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"address\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"msisdn\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"msisdn\"\r",
									"              ]\r",
									"            },\r",
									"            \"metadata\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"user\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"lastUpdatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"product\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"user\",\r",
									"                \"lastUpdatedAt\",\r",
									"                \"product\"\r",
									"              ]\r",
									"            },\r",
									"            \"properties\": {\r",
									"              \"type\": \"object\"\r",
									"            },\r",
									"            \"groupsInformation\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"groupId\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"groupId\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"eTag\",\r",
									"            \"accountId\",\r",
									"            \"address\",\r",
									"            \"metadata\",\r",
									"            \"properties\",\r",
									"            \"groupsInformation\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"eTag\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"accountId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"address\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"msisdn\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"msisdn\"\r",
									"              ]\r",
									"            },\r",
									"            \"metadata\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"user\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"lastUpdatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"product\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"user\",\r",
									"                \"lastUpdatedAt\",\r",
									"                \"product\"\r",
									"              ]\r",
									"            },\r",
									"            \"properties\": {\r",
									"              \"type\": \"object\"\r",
									"            },\r",
									"            \"groupsInformation\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"groupId\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"groupId\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"eTag\",\r",
									"            \"accountId\",\r",
									"            \"address\",\r",
									"            \"metadata\",\r",
									"            \"properties\",\r",
									"            \"groupsInformation\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"eTag\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"accountId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"address\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"msisdn\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"msisdn\"\r",
									"              ]\r",
									"            },\r",
									"            \"metadata\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"user\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"lastUpdatedAt\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"product\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"user\",\r",
									"                \"lastUpdatedAt\",\r",
									"                \"product\"\r",
									"              ]\r",
									"            },\r",
									"            \"properties\": {\r",
									"              \"type\": \"object\"\r",
									"            },\r",
									"            \"groupsInformation\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"groupId\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"groupId\"\r",
									"                  ]\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"eTag\",\r",
									"            \"accountId\",\r",
									"            \"address\",\r",
									"            \"metadata\",\r",
									"            \"properties\",\r",
									"            \"groupsInformation\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"results\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting continuationToken var:\r",
									"//pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1ae923d-5d2e-4038-9368-3a05f19932ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "c0a7ae25-e150-4770-b5f1-ad0b28ae60bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "default"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "default"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/"
					},
					"response": []
				},
				{
					"name": "BulkRemoveGroupContact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "644b55fa-b7a5-40c4-a3c5-23155b68e2ff",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a73ef786-8379-42ce-adac-21421cadf1f2",
								"exec": [
									"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
									"var responseJson  = pm.response.json();\r",
									"var expectedTotalReceivedItems = 3;\r",
									"var expectedRowsAffectedCount = 3;\r",
									"var expectedMergedRowsCount = 0;\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"TotalReceivedItems\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"RowsAffectedCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"MergedRowsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"TotalReceivedItems\",\r",
									"    \"RowsAffectedCount\",\r",
									"    \"MergedRowsCount\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check expected data', function () {\r",
									"    pm.expect(responseJson.TotalReceivedItems).to.be.eql(expectedTotalReceivedItems);\r",
									"    pm.expect(responseJson.RowsAffectedCount).to.be.eql(expectedRowsAffectedCount);\r",
									"    pm.expect(responseJson.MergedRowsCount).to.be.eql(expectedMergedRowsCount);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting etag var:\r",
									"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "6e35784c-9790-4eeb-8cc3-6b6443493fc2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\":[\r\n        \"{{contactId1}}\",\r\n        \"{{contactId2}}\",\r\n        \"{{contactId3}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupIdWithContacts}}/contacts"
					},
					"response": []
				},
				{
					"name": "GetAllGroupContacts_BulkRemoveGroupContact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87d00785-594f-4ede-bf9b-44bb597614d5",
								"exec": [
									"\r",
									"var responseJson  = pm.response.json();\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 0\", function () {\r",
									"    pm.expect(responseJson.results.length).to.eql(0);\r",
									"\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"results\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"results\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
									"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
									"    const expectedStatusCodes = [200, 201, 204];\r",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Setting continuationToken var:\r",
									"//pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1ae923d-5d2e-4038-9368-3a05f19932ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "041c1d6a-d213-4c38-b5d2-097f774db58c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "default"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "default"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/"
					},
					"response": []
				}
			],
			"_postman_id": "e4db7e39-fac0-456b-8932-25b599aa7100",
			"description": "Main functionality of the service - happy paths. Tests can be used as Smoke tests.\n\nStartFragment\n\n- Execute a POST request that creates a resource\n- then execute a GET request to check if it exists\n- then we use a PATCH endpoint to update new data\n- and we again invoke a GET request to validate the new data\n- same for PUT\n- then, we DELETE that resource\n- and we again invoke a GET request to validate that the resource does not exist anymore (inside DELETE request to not fail because of collection test in regards to Status Code - 404 in our case);\n- finally, re-create resource so that we can use it in other tests as an existing testdata.\n    \n\nEndFragment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f3053342-20a9-44e1-801c-3974a07a4732",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "787e5d35-f2a6-4201-8ca6-b7d6e779c244",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ExtendedPositiveTesting_WithOptionalParameters",
			"item": [
				{
					"name": "ValidSpecialCharacters",
					"item": [
						{
							"name": "Get_ContactWithEmoji",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa856eff-78e4-49f6-a998-8cbb1a7d8836",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
											"    pm.expect(responseJson.properties.__displayName).to.eql(\"Ion Zapada🤮\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "1a461af3-4524-42b5-9254-5fca5172a872",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId4}}"
							},
							"response": []
						},
						{
							"name": "BulkUpdateContactWithEmoji",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83fd0d7a-2ca7-4ec6-adb9-8cf6cfd35161",
										"exec": [
											"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationId\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
											"pm.collectionVariables.set(\"tries\",0); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "2e8fe25b-10a5-4c1e-9c1a-2ae9e9a063a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"Address\": {\r\n                \"Msisdn\": \"{{msisdn4}}\"\r\n            }, \r\n            \"properties\":{\r\n                            \"__displayName\": \"🤮Ion Zapada🤮\"\r\n                        }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkUpdateContactWithEmoji_LoopUntilDone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"\r",
											"var crtTimeStep = 1000;\r",
											"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
											"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
											"\r",
											"\r",
											"var crtOperationStatus = responseJson.OperationStatus;\r",
											"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
											"\r",
											"var crtTries = pm.collectionVariables.get(\"tries\");\r",
											"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
											"\r",
											"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
											"{\r",
											"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
											"     setTimeout(function() {}, crtTimeStep);\r",
											"     postman.setNextRequest(pm.info.requestName);\r",
											" } else {\r",
											"    pm.collectionVariables.unset(\"tries\");\r",
											"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
											"    postman.setNextRequest(\"GetOperationStatus_BulkUpdateContactWithEmoji\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6a634766-23f0-4608-a71c-a94f0189cd6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkUpdateContactWithEmoji",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"var expectedOperationType = \"BulkInsertOrUpdate\";\r",
											"var expectedTotalItemsReceived = 1;\r",
											"var expectedValidItemsCount = 1;\r",
											"var expectedValidProcessedItemsCount = 1;\r",
											"var expectedAlreadyExistingItemsCount = 1;\r",
											"var expectedInvalidItemsCount = 0;\r",
											"var expectedDuplicateItemsCount = 0;\r",
											"var expectedPercentageCompleted = 100;\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
											"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
											"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
											"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
											"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
											"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
											"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
											"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
											"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
											"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"OperationType\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"CreateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"LastUpdateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"TotalItemsReceived\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidProcessedItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"AlreadyExistingItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"InvalidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"DuplicateItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"PercentageCompleted\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationStatus\",\r",
											"    \"OperationType\",\r",
											"    \"CreateTime\",\r",
											"    \"LastUpdateTime\",\r",
											"    \"TotalItemsReceived\",\r",
											"    \"ValidItemsCount\",\r",
											"    \"ValidProcessedItemsCount\",\r",
											"    \"AlreadyExistingItemsCount\",\r",
											"    \"InvalidItemsCount\",\r",
											"    \"DuplicateItemsCount\",\r",
											"    \"PercentageCompleted\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "ec2f8771-22d2-47fe-a2d8-487557a1f4b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						},
						{
							"name": "Get_ContactWithEmojiAfterUpdate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa856eff-78e4-49f6-a998-8cbb1a7d8836",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
											"    pm.expect(responseJson.properties.__displayName).to.eql(\"🤮Ion Zapada🤮\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "589267d6-e4bc-417e-b1c4-3844e012a434",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId4}}"
							},
							"response": []
						}
					],
					"_postman_id": "fb945d67-dde3-4f54-8711-674c81a182a2",
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "bb50fdaf-0cee-453d-947f-6b27512bc4f3",
			"description": "Positive tests based on: optional parameters and extra functionality\n\nEndFragment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b516c148-0123-47ad-8bea-71e585d2d9a7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "61ab6131-68e7-4a28-9139-dfa2ca054c5c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "NegativeTesting_WithValidInput",
			"item": [
				{
					"name": "NonExisting",
					"item": [
						{
							"name": "BulkAddGroupContactNonExisting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "224e1824-4c26-4ba9-aef2-9060674f7839",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca4bf6a4-c5c7-48df-a0c7-93dedaa69e1c",
										"exec": [
											"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"var expectedTotalReceivedItems = 1;\r",
											"var expectedRowsAffectedCount = 0;\r",
											"var expectedMergedRowsCount = 0;\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"TotalReceivedItems\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"RowsAffectedCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"MergedRowsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"TotalReceivedItems\",\r",
											"    \"RowsAffectedCount\",\r",
											"    \"MergedRowsCount\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check expected data', function () {\r",
											"    pm.expect(responseJson.TotalReceivedItems).to.be.eql(expectedTotalReceivedItems);\r",
											"    pm.expect(responseJson.RowsAffectedCount).to.be.eql(expectedRowsAffectedCount);\r",
											"    pm.expect(responseJson.MergedRowsCount).to.be.eql(expectedMergedRowsCount);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "26eb6ae2-2a49-4ad8-a7c4-1025461131db",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\":[\r\n        \"57aecf82-4e89-47c0-ad95-cf8120369605\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupIdWithContacts}}/contacts"
							},
							"response": []
						},
						{
							"name": "GetAllGroupContacts_BulkAddGroupContactNonExisting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87d00785-594f-4ede-bf9b-44bb597614d5",
										"exec": [
											"\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 3\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(0);\r",
											"\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\"\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"groupId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"groupId\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\"\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"groupId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"groupId\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        },\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\"\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"groupId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"groupId\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting continuationToken var:\r",
											"//pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1ae923d-5d2e-4038-9368-3a05f19932ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "4689428f-e393-4dcc-827d-ec592321af6c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/"
							},
							"response": []
						},
						{
							"name": "BulkRemoveGroupContactNonExisting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "644b55fa-b7a5-40c4-a3c5-23155b68e2ff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a73ef786-8379-42ce-adac-21421cadf1f2",
										"exec": [
											"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"var expectedTotalReceivedItems = 1;\r",
											"var expectedRowsAffectedCount = 0;\r",
											"var expectedMergedRowsCount = 0;\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"TotalReceivedItems\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"RowsAffectedCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"MergedRowsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"TotalReceivedItems\",\r",
											"    \"RowsAffectedCount\",\r",
											"    \"MergedRowsCount\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check expected data', function () {\r",
											"    pm.expect(responseJson.TotalReceivedItems).to.be.eql(expectedTotalReceivedItems);\r",
											"    pm.expect(responseJson.RowsAffectedCount).to.be.eql(expectedRowsAffectedCount);\r",
											"    pm.expect(responseJson.MergedRowsCount).to.be.eql(expectedMergedRowsCount);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a7423f98-57c4-46c1-8e3f-ce6b6884bc5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\":[\r\n        \"57aecf82-4e89-47c0-ad95-cf8120369605\"\r\n            ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupIdWithContacts}}/contacts"
							},
							"response": []
						},
						{
							"name": "BulkAddGroupContactNonExistingAccountAndContact[TODO]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "224e1824-4c26-4ba9-aef2-9060674f7839",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca4bf6a4-c5c7-48df-a0c7-93dedaa69e1c",
										"exec": [
											"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"var expectedTotalReceivedItems = 1;\r",
											"var expectedRowsAffectedCount = 0;\r",
											"var expectedMergedRowsCount = 0;\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"TotalReceivedItems\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"RowsAffectedCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"MergedRowsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"TotalReceivedItems\",\r",
											"    \"RowsAffectedCount\",\r",
											"    \"MergedRowsCount\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check expected data', function () {\r",
											"    pm.expect(responseJson.TotalReceivedItems).to.be.eql(expectedTotalReceivedItems);\r",
											"    pm.expect(responseJson.RowsAffectedCount).to.be.eql(expectedRowsAffectedCount);\r",
											"    pm.expect(responseJson.MergedRowsCount).to.be.eql(expectedMergedRowsCount);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "82781dbe-6018-45b1-b782-a378525fa0ea",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\":[\r\n        \"57aecf82-4e89-47c0-ad95-cf8120369605\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/1bdf73c0-9dc1-44de-8699-8e26393a0777/bulk/group/{{groupIdWithContacts}}/contacts"
							},
							"response": []
						}
					],
					"_postman_id": "0a8e6211-9cb0-4d61-b2d3-652c904bade3",
					"_postman_isSubFolder": true
				},
				{
					"name": "Duplicate",
					"item": [
						{
							"name": "BulkInsert_2ContactsWithSameMsisdn",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43e537b5-70b1-442f-a018-440b1588b148",
										"exec": [
											"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationId\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
											"pm.collectionVariables.set(\"tries\",0); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "26065f28-6459-447f-b613-b5df55d304ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"address\": {\r\n                \"msisdn\": \"{{msisdn1}}\"\r\n            }\r\n        },\r\n        {\r\n            \"address\":{\r\n                \"msisdn\": \"{{msisdn1}}\"\r\n            }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkInsert_2ContactsWithSameMsisdn_LoopUntilDone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"\r",
											"var crtTimeStep = 1000;\r",
											"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
											"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
											"\r",
											"\r",
											"var crtOperationStatus = responseJson.OperationStatus;\r",
											"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
											"\r",
											"var crtTries = pm.collectionVariables.get(\"tries\");\r",
											"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
											"\r",
											"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
											"{\r",
											"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
											"     setTimeout(function() {}, crtTimeStep);\r",
											"     postman.setNextRequest(pm.info.requestName);\r",
											" } else {\r",
											"    pm.collectionVariables.unset(\"tries\");\r",
											"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
											"    postman.setNextRequest(\"GetOperationStatus_BulkInsert_2ContactsWithSameMsisdn\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "3dd1fdf2-5bba-4e3f-82f3-43db91fc237c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkInsert_2ContactsWithSameMsisdn",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"var expectedOperationType = \"BulkInsert\";\r",
											"var expectedTotalItemsReceived = 2;\r",
											"var expectedValidItemsCount = 0;\r",
											"var expectedValidProcessedItemsCount = 0;\r",
											"var expectedAlreadyExistingItemsCount = 2;\r",
											"var expectedInvalidItemsCount = 0;\r",
											"var expectedDuplicateItemsCount = 1;\r",
											"var expectedPercentageCompleted = 0;\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
											"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
											"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
											"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
											"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
											"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
											"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
											"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
											"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
											"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"OperationType\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"CreateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"LastUpdateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"TotalItemsReceived\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidProcessedItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"AlreadyExistingItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"InvalidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"DuplicateItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"PercentageCompleted\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationStatus\",\r",
											"    \"OperationType\",\r",
											"    \"CreateTime\",\r",
											"    \"LastUpdateTime\",\r",
											"    \"TotalItemsReceived\",\r",
											"    \"ValidItemsCount\",\r",
											"    \"ValidProcessedItemsCount\",\r",
											"    \"AlreadyExistingItemsCount\",\r",
											"    \"InvalidItemsCount\",\r",
											"    \"DuplicateItemsCount\",\r",
											"    \"PercentageCompleted\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "631552e5-7b73-4691-96b7-0ad7080469fa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						}
					],
					"_postman_id": "2a83dad9-4e68-4188-ba8c-60ace391049c",
					"_postman_isSubFolder": true
				},
				{
					"name": "UnAuthorized",
					"item": [
						{
							"name": "Bulk_Unauthorized",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "913bd66b-ef1d-4d64-abe9-3a02384e7001",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aef75444-eacc-4947-a63c-40fbd6d202a2",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
											"    pm.expect(responseJson.message).to.eql(\"Access denied due to missing subscription key. Make sure to include subscription key when making requests to an API.\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "6939dafc-04b4-4575-9b49-61c927fb5eac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"address\": {\r\n                \"msisdn\": \"{{msisdn1}}\"\r\n            }\r\n        },\r\n        {\r\n            \"address\":{\r\n                \"msisdn\": \"{{msisdn1}}\"\r\n            }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
							},
							"response": []
						}
					],
					"_postman_id": "f40fe8b7-7c4f-4303-b1d7-c19554ddaf4f",
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "3af74046-8738-49a8-9acd-6ffbc1d761e5",
			"description": "Example:\n\nvalid user input - example: try to add an already existing item (with same ID)\n\nEndFragment"
		},
		{
			"name": "NegativeTesting_WithInvalidInput",
			"item": [
				{
					"name": "LengthValidation",
					"item": [
						{
							"name": "BulkInsert_1ContactsWithInvalidLength",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43e537b5-70b1-442f-a018-440b1588b148",
										"exec": [
											"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationId\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
											"pm.collectionVariables.set(\"tries\",0); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "a7486bc4-cf61-43b2-87c2-ce9746b80b15",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\": [\r\n                {\r\n                \"address\":{\r\n                    \"msisdn\": \"{{msisdn}}\"\r\n                },\r\n                \"properties\":{\r\n                    \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n                }\r\n            }\r\n    ]\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkInsert_1ContactsWithInvalidLength_LoopUntilDone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"\r",
											"var crtTimeStep = 1000;\r",
											"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
											"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
											"\r",
											"\r",
											"var crtOperationStatus = responseJson.OperationStatus;\r",
											"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
											"\r",
											"var crtTries = pm.collectionVariables.get(\"tries\");\r",
											"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
											"\r",
											"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
											"{\r",
											"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
											"     setTimeout(function() {}, crtTimeStep);\r",
											"     postman.setNextRequest(pm.info.requestName);\r",
											" } else {\r",
											"    pm.collectionVariables.unset(\"tries\");\r",
											"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
											"    postman.setNextRequest(\"GetOperationStatus_BulkInsert_1ContactsWithInvalidLength\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "41dfb7ce-0fed-4aac-909b-2f0edb69290c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkInsert_1ContactsWithInvalidLength",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"var expectedOperationType = \"BulkInsert\";\r",
											"var expectedTotalItemsReceived = 1;\r",
											"var expectedValidItemsCount = 0;\r",
											"var expectedValidProcessedItemsCount = 0;\r",
											"var expectedAlreadyExistingItemsCount = 1;\r",
											"var expectedInvalidItemsCount = 1;\r",
											"var expectedDuplicateItemsCount = 0;\r",
											"var expectedPercentageCompleted = 0;\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
											"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
											"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
											"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
											"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
											"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
											"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
											"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
											"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
											"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"OperationType\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"CreateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"LastUpdateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"TotalItemsReceived\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidProcessedItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"AlreadyExistingItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"InvalidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"DuplicateItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"PercentageCompleted\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationStatus\",\r",
											"    \"OperationType\",\r",
											"    \"CreateTime\",\r",
											"    \"LastUpdateTime\",\r",
											"    \"TotalItemsReceived\",\r",
											"    \"ValidItemsCount\",\r",
											"    \"ValidProcessedItemsCount\",\r",
											"    \"AlreadyExistingItemsCount\",\r",
											"    \"InvalidItemsCount\",\r",
											"    \"DuplicateItemsCount\",\r",
											"    \"PercentageCompleted\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "f2057db7-4619-468d-b42a-f2891deacdf0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						}
					],
					"_postman_id": "98c1a059-6088-4ac7-8a9c-4db407b8e74a",
					"_postman_isSubFolder": true
				},
				{
					"name": "Required",
					"item": [
						{
							"name": "BulkInsert_1ContactsWithoutMsisdn[TODO]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43e537b5-70b1-442f-a018-440b1588b148",
										"exec": [
											"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationId\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationId\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
											"pm.collectionVariables.set(\"tries\",0); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "1421ad2a-87a0-4b84-882d-e86077677eda",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"contacts\": [\r\n                {\r\n                \"address\":{\r\n                }\r\n            }\r\n    ]\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkInsert_1ContactsWithoutMsisdn_LoopUntilDone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"\r",
											"var crtTimeStep = 1000;\r",
											"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
											"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
											"\r",
											"\r",
											"var crtOperationStatus = responseJson.OperationStatus;\r",
											"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
											"\r",
											"var crtTries = pm.collectionVariables.get(\"tries\");\r",
											"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
											"\r",
											"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
											"{\r",
											"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
											"     setTimeout(function() {}, crtTimeStep);\r",
											"     postman.setNextRequest(pm.info.requestName);\r",
											" } else {\r",
											"    pm.collectionVariables.unset(\"tries\");\r",
											"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
											"    postman.setNextRequest(\"GetOperationStatus_BulkInsert_1ContactsWithoutMsisdn[TODO]\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "9fd71686-37d4-4cfe-a9c2-9535567980d5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						},
						{
							"name": "GetOperationStatus_BulkInsert_1ContactsWithoutMsisdn[TODO]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedOperationStatus = \"Done\";\r",
											"var expectedOperationType = \"BulkInsert\";\r",
											"var expectedTotalItemsReceived = 1;\r",
											"var expectedValidItemsCount = 0;\r",
											"var expectedValidProcessedItemsCount = 0;\r",
											"var expectedAlreadyExistingItemsCount = 1;\r",
											"var expectedInvalidItemsCount = 1;\r",
											"var expectedDuplicateItemsCount = 0;\r",
											"var expectedPercentageCompleted = 0;\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
											"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
											"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
											"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
											"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
											"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
											"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
											"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
											"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
											"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"OperationStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"OperationType\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"CreateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"LastUpdateTime\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"TotalItemsReceived\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ValidProcessedItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"AlreadyExistingItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"InvalidItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"DuplicateItemsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"PercentageCompleted\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"OperationStatus\",\r",
											"    \"OperationType\",\r",
											"    \"CreateTime\",\r",
											"    \"LastUpdateTime\",\r",
											"    \"TotalItemsReceived\",\r",
											"    \"ValidItemsCount\",\r",
											"    \"ValidProcessedItemsCount\",\r",
											"    \"AlreadyExistingItemsCount\",\r",
											"    \"InvalidItemsCount\",\r",
											"    \"DuplicateItemsCount\",\r",
											"    \"PercentageCompleted\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
											"    const expectedStatusCodes = [200, 201, 204];\r",
											"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
											"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "0395543c-dffd-4480-a31b-0a54e8f95f68",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
							},
							"response": []
						}
					],
					"_postman_id": "cc5c189e-1e2b-4771-aaaf-b253ce0cfa69",
					"_postman_isSubFolder": true
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "NotValidMsisdn",
							"item": [
								{
									"name": "BulkInsert_1ContactsNotValidMsisdn",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43e537b5-70b1-442f-a018-440b1588b148",
												"exec": [
													"//var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"OperationId\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"OperationId\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest: Checking response status code to be one of 200, 201 or 204\", function () {\r",
													"    const expectedStatusCodes = [200, 201, 204];\r",
													"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
													"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);\r",
													"pm.collectionVariables.set(\"tries\",0); \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "36f6566e-c777-4d05-b32a-6ef1f98f1471",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "asdb",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "someuser",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"address\":{\r\n                \"msisdn\": \"NotValidMsisdn\"\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
									},
									"response": []
								},
								{
									"name": "GetOperationStatus_BulkInsert_1ContactsNotValidMsisdn_LoopUntilDone",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var expectedOperationStatus = \"Done\";\r",
													"\r",
													"var crtTimeStep = 1000;\r",
													"pm.collectionVariables.set(\"maxNumberOfTries\",50);\r",
													"pm.collectionVariables.set(\"timeStep\",crtTimeStep); \r",
													"\r",
													"\r",
													"var crtOperationStatus = responseJson.OperationStatus;\r",
													"console.log(\"crtOperationStatus: \" + crtOperationStatus);\r",
													"\r",
													"var crtTries = pm.collectionVariables.get(\"tries\");\r",
													"var maxTries = pm.collectionVariables.get(\"maxNumberOfTries\");\r",
													"\r",
													"breakme: if ((crtOperationStatus != expectedOperationStatus) && (crtTries < maxTries)) \r",
													"{\r",
													"     pm.collectionVariables.set(\"tries\", crtTries + 1);\r",
													"     setTimeout(function() {}, crtTimeStep);\r",
													"     postman.setNextRequest(pm.info.requestName);\r",
													" } else {\r",
													"    pm.collectionVariables.unset(\"tries\");\r",
													"    console.log(\"waited in total:\"+crtTries*crtTimeStep/1000 + \"s\");\r",
													"    postman.setNextRequest(\"GetOperationStatus_BulkInsert_1ContactsNotValidMsisdn\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "48eb4145-0013-46d9-8e54-a1441db4d8e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "asdb",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "someuser",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
									},
									"response": []
								},
								{
									"name": "GetOperationStatus_BulkInsert_1ContactsNotValidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e892f181-59a5-4610-81f8-cc63ec04df2d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "be9acf55-924b-4696-85b4-48f63f4dc3f4",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var expectedOperationStatus = \"Done\";\r",
													"var expectedOperationType = \"BulkInsert\";\r",
													"var expectedTotalItemsReceived = 1;\r",
													"var expectedValidItemsCount = 0;\r",
													"var expectedValidProcessedItemsCount = 0;\r",
													"var expectedAlreadyExistingItemsCount = 0;\r",
													"var expectedInvalidItemsCount = 1;\r",
													"var expectedDuplicateItemsCount = 0;\r",
													"var expectedPercentageCompleted = 0;\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check Operation status values\", function () {\r",
													"    pm.expect(responseJson.OperationStatus).to.eql(expectedOperationStatus);\r",
													"    pm.expect(responseJson.OperationType).to.eql(expectedOperationType);\r",
													"    pm.expect(responseJson.TotalItemsReceived).to.eql(expectedTotalItemsReceived);\r",
													"    pm.expect(responseJson.ValidItemsCount).to.eql(expectedValidItemsCount);\r",
													"    pm.expect(responseJson.ValidProcessedItemsCount).to.eql(expectedValidProcessedItemsCount);\r",
													"    pm.expect(responseJson.AlreadyExistingItemsCount).to.eql(expectedAlreadyExistingItemsCount);\r",
													"    pm.expect(responseJson.InvalidItemsCount).to.eql(expectedInvalidItemsCount);\r",
													"    pm.expect(responseJson.DuplicateItemsCount).to.eql(expectedDuplicateItemsCount);\r",
													"    pm.expect(responseJson.PercentageCompleted).to.eql(expectedPercentageCompleted);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"OperationStatus\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"OperationType\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"CreateTime\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"LastUpdateTime\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"TotalItemsReceived\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"ValidItemsCount\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"ValidProcessedItemsCount\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"AlreadyExistingItemsCount\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"InvalidItemsCount\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"DuplicateItemsCount\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"PercentageCompleted\": {\r",
													"      \"type\": \"integer\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"OperationStatus\",\r",
													"    \"OperationType\",\r",
													"    \"CreateTime\",\r",
													"    \"LastUpdateTime\",\r",
													"    \"TotalItemsReceived\",\r",
													"    \"ValidItemsCount\",\r",
													"    \"ValidProcessedItemsCount\",\r",
													"    \"AlreadyExistingItemsCount\",\r",
													"    \"InvalidItemsCount\",\r",
													"    \"DuplicateItemsCount\",\r",
													"    \"PercentageCompleted\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {\r",
													"    const expectedStatusCodes = [200, 201, 204];\r",
													"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`\r",
													"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_RequestLevelTest1: Check Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"//pm.collectionVariables.set(\"OperationId\", responseJson.OperationId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "6b812726-3255-4662-89f3-a2f73c9730eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "asdb",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "someuser",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{OperationId}}"
									},
									"response": []
								}
							],
							"_postman_id": "5230d144-69b7-4e31-ac19-70236349f896",
							"_postman_isSubFolder": true
						},
						{
							"name": "NotGUID_And_InvalidJson",
							"item": [
								{
									"name": "BulkAddGroupContactNonGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "224e1824-4c26-4ba9-aef2-9060674f7839",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ca4bf6a4-c5c7-48df-a0c7-93dedaa69e1c",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "77dcd492-b849-407f-93ea-77ba5401a7cb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "asdb",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "someuser",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contacts\":[\r\n        \"NotGUID\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupIdWithContacts}}/contacts"
									},
									"response": []
								},
								{
									"name": "BulkRemoveGroupContactNonGuid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "644b55fa-b7a5-40c4-a3c5-23155b68e2ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a73ef786-8379-42ce-adac-21421cadf1f2",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "974c3c60-b31a-49f9-8e83-e53dd94257cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "asdb",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "someuser",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"contacts\":[\r\n        \"NotGUID\"\r\n            ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupIdWithContacts}}/contacts"
									},
									"response": []
								},
								{
									"name": "BulkDeleteContacts_CheckLowerCaseReturnsInvalidJson",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20a6d6f7-9eb9-4b38-9ac5-22d671d6bc75",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "c29ea3c2-f868-49d9-9a4b-16146e3e7a41",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "asdb",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "someuser",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"ContactIds\": [\r\n        \"4f8ae125-de67-439a-9c1c-31b0f1de5621\",\r\n        \"01c88785-9abf-40a0-b25f-3afce2e16990\",\r\n        \"6b9056b6-f9d8-418d-8852-cf442751373c\",\r\n        \"6f1826826-e71a-4586-b7ef-87bd2dfaab80\"\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
									},
									"response": []
								}
							],
							"_postman_id": "3efb4e8d-e2e3-403c-b206-bbc7852ee843",
							"_postman_isSubFolder": true
						},
						{
							"name": "BulkInsert_InvalidRequestSchema[TODO]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43e537b5-70b1-442f-a018-440b1588b148",
										"exec": [
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
											"var expectedErrorMessage = \"The requested bulk operation failed.\";\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
											"pm.expect(jsonData.errors[0].code).to.eql(\"bulk_operation_failed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"_postman_id": "d398201c-c4d1-44cc-bc81-3fb1ec6eed55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "asdb",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "someuser",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
							},
							"response": []
						}
					],
					"_postman_id": "e8b27305-46e4-4622-867b-6ddf8c7bb40a",
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "7a375413-88c8-471c-befe-a97011a608e2",
			"description": "invalid input (trying to add a property which is null or other invalid input - for example a NULL msisdn\n\nEndFragment"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8d4a001e-dbfd-4bad-a27a-2c47587a58c8",
				"type": "text/javascript",
				"exec": [
					"//Pre-request Collection level",
					"console.log(\"RequestName is: \", pm.info.requestName);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "40b20638-ad7a-447b-a9ef-1971fbcb1b62",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0642c5ed-e15d-426d-8680-3991c0352451",
			"key": "listOfContactIds",
			"value": "",
			"type": "string"
		},
		{
			"id": "84bf15a1-de53-4d76-b357-025cfda540b4",
			"key": "+40749211244",
			"value": "",
			"type": "string"
		},
		{
			"id": "440bddd5-f82a-499e-be70-edbf7df8f82f",
			"key": "+40749211255",
			"value": "",
			"type": "string"
		},
		{
			"id": "f803e563-40c1-4225-bf92-9c07c3bfb17a",
			"key": "+40749211233",
			"value": "",
			"type": "string"
		},
		{
			"id": "469af6ab-1ef5-4781-9a6d-34c341c7cbbb",
			"key": "+40749211222",
			"value": "",
			"type": "string"
		},
		{
			"id": "2d4b5e33-e7a8-417b-b830-02eaeeab9850",
			"key": "contactId1",
			"value": "",
			"type": "string"
		},
		{
			"id": "60bc32aa-7189-40e2-b76b-19998b1e7cea",
			"key": "msisdn1",
			"value": "",
			"type": "string"
		},
		{
			"id": "0c6fc095-b32b-4060-82e7-c4248105a0a8",
			"key": "contactId2",
			"value": "",
			"type": "string"
		},
		{
			"id": "214ce0f0-2aab-4917-8acf-2dd2fcd6f97b",
			"key": "msisdn2",
			"value": "",
			"type": "string"
		},
		{
			"id": "ea5b5b1c-2471-45ba-a6e5-64743bbe1741",
			"key": "contactId3",
			"value": "",
			"type": "string"
		},
		{
			"id": "4cf517b7-38f7-4454-bdf4-d2b2c6a63d0e",
			"key": "msisdn3",
			"value": "",
			"type": "string"
		},
		{
			"id": "6eec426f-6603-4589-b3f3-306b7c9a2a5e",
			"key": "contactId4",
			"value": "",
			"type": "string"
		},
		{
			"id": "7afd7ac6-eef6-4062-9001-1275bada38db",
			"key": "msisdn4",
			"value": "",
			"type": "string"
		},
		{
			"id": "86d9cf58-0e19-4291-9d18-5732b6815d1e",
			"key": "OperationId",
			"value": "",
			"type": "string"
		},
		{
			"id": "4df0291b-e6c0-440e-b53f-8c45d4d1c2fe",
			"key": "maxNumberOfTries",
			"value": "",
			"type": "string"
		},
		{
			"id": "c7a91c0b-06e3-491e-b43f-85e300a84b09",
			"key": "timeStep",
			"value": "",
			"type": "string"
		},
		{
			"id": "20848363-b1f5-4355-9f7d-ece41e2295d0",
			"key": "groupIdWithContacts",
			"value": "",
			"type": "string"
		},
		{
			"id": "9eaa3016-a29e-49d7-b80b-465625242643",
			"key": "groupIdWithContactsName",
			"value": "",
			"type": "string"
		},
		{
			"id": "53f76bf6-0a30-4bea-b145-240c3db1f689",
			"key": "groupIdWithoutContacts",
			"value": "",
			"type": "string"
		},
		{
			"id": "11d81e42-a8b4-42be-918d-838cf40ca959",
			"key": "groupIdWithoutContactsName",
			"value": "",
			"type": "string"
		},
		{
			"id": "3db95a11-ffbe-4ee8-96a5-abf0c2568493",
			"key": "etag",
			"value": "",
			"type": "string"
		}
	]
}