{
	"info": {
		"_postman_id": "cd6e2678-d60b-47ea-8e27-bead32428a83",
		"name": "TestPlanModel_Service",
		"description": "[https://github.com/esendex/RichContent.Docs/wiki/Contacts](https://github.com/esendex/RichContent.Docs/wiki/Contacts)\n\n[https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations](https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "TestPlanModel_Functionality",
			"item": [
				{
					"name": "BasicCRUD_SMOKE",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted contact with contactId: \" + pm.environment.get(\"contactId\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");"
										],
										"type": "text/javascript",
										"id": "f3c7b605-1d7a-4271-a661-8c6d373eef1d"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "645c0491-6383-4e07-aee8-d9e020558891"
									}
								}
							],
							"_postman_id": "99b56369-ae43-4bc7-924d-82624f22cec2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "e8e9bb63-840e-4e55-858d-0c26b1ff2e36",
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"contactId\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"etag\": \"d6f93c54-3ee6-476e-8fe6-09e5f22ed6f8\"\r\n}"
								}
							]
						},
						{
							"name": "Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
											"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
											"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"address\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"msisdn\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"msisdn\"\r",
											"      ]\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    },\r",
											"    \"properties\": {\r",
											"      \"type\": \"object\"\r",
											"    },\r",
											"    \"groupsInformation\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"address\",\r",
											"    \"metadata\",\r",
											"    \"properties\",\r",
											"    \"groupsInformation\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "8cac8ed5-6e8c-42f4-b20d-fe353b72f79b"
									}
								}
							],
							"_postman_id": "48166d8e-937d-444b-8da6-aa3583d3cc77",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "0f91a302-65a9-4dc5-9664-1bd923dab3b5",
									"name": "Get",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"id\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"eTag\": \"fed3c303-a761-4503-a15d-1ca662bff8e1\",\r\n    \"accountId\": \"c90c5734-f195-4d6c-92a5-0a81eecf093d\",\r\n    \"address\": {\r\n        \"msisdn\": \"+40749255366\"\r\n    },\r\n    \"metadata\": {\r\n        \"user\": \"user\",\r\n        \"lastUpdatedAt\": \"2022-12-13T13:15:38Z\",\r\n        \"product\": \"someProduct\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"3570200b-3dcc-427a-9f26-24e0a748cc4f\"\r\n    },\r\n    \"groupsInformation\": []\r\n}"
								}
							]
						},
						{
							"name": "Patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Preconditions - get already used etag:\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"//End Of Preconditions \r",
											"\r",
											"//Generating vars:\r",
											"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
											"console.log(\"generated guid1 \"+guid1);\r",
											"pm.collectionVariables.set(\"guid1\", guid1);\r",
											"\r",
											"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
											"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
											"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
											"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
											""
										],
										"type": "text/javascript",
										"id": "252a75bf-a860-4bab-97e7-ae7ceff38660"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "1acd29d4-ced1-48b2-8de8-3518cefba31f"
									}
								}
							],
							"_postman_id": "86232378-f778-4fec-b416-a2fd5b9cef97",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.collectionVariables.replaceIn('{{generatedMsisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "6be5a8b3-c0ad-4bf8-9449-7de4d292c4d1"
									}
								}
							],
							"_postman_id": "4b321cd4-6a64-4e85-87d0-b8407982cde7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Put",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.variables.replaceIn('{{X-Subscription-Key}}')\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											""
										],
										"type": "text/javascript",
										"id": "2b91adfe-7a1e-4713-89bb-c239c0843480"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "8a2e6929-3a9b-4d50-a3a5-3955e32a55ac"
									}
								}
							],
							"_postman_id": "194f8e25-2dc4-447e-b007-c2e8472af261",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.environment.replaceIn('{{msisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PUT request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "f4258143-8348-4c8d-b608-a7538bd72f20"
									}
								}
							],
							"_postman_id": "8d86bf4c-2df6-4982-abc7-43d9ed24a0ff",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "96e90ace-c322-4e83-9665-cc063777b4ba"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var contactId = pm.environment.get(\"contactId\");\r",
											"var responseJson = null; \r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + contactId,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.environment.get(\"X-Subscription-Key\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    responseJson  = res.json();\r",
											"    pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that DELETE request actually deleted the contact, by GET request\", function () {\r",
											"        pm.expect(responseJson.errors[0].error).to.eql(\"The requested contact could not be found.\");\r",
											"        pm.expect(responseJson.errors[0].code).to.eql(\"contact_not_found\");\r",
											"        });\r",
											"});\r",
											"//Above test is written here and not as a separate GET so that we verify the DELETE functionality but also preserve the upper level test which checks \"susccess error codes\", not 404 - contact_not_found\r",
											"\r",
											"//var responseJson  = pm.response.json();\r",
											"var schema = {}\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "67f93993-8e70-4328-a847-c40481a90fa3"
									}
								}
							],
							"_postman_id": "5f685a76-be27-4572-9cec-0363d7673331",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "ReCreate (useful for chaining)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "6bfe95f2-6687-4661-9fe5-0d6b4cef14cf"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "35cd3a72-82b3-450d-8145-ccc9c7f66040"
									}
								}
							],
							"_postman_id": "8c09d1dc-cd55-418d-b965-bc0da4c217c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						}
					],
					"_postman_id": "57193014-4e32-4ec1-a880-2b1ca3de5cd2",
					"description": "Main functionality of the service - happy paths. Tests can be used as Smoke tests.\n\nStartFragment\n\n- Execute a POST request that creates a resource\n- then execute a GET request to check if it exists\n- then we use a PATCH endpoint to update new data\n- and we again invoke a GET request to validate the new data\n- same for PUT\n- then, we DELETE that resource\n- and we again invoke a GET request to validate that the resource does not exist anymore (inside DELETE request to not fail because of collection test in regards to Status Code - 404 in our case);\n- finally, re-create resource so that we can use it in other tests as an existing testdata.\n    \n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "aeff37e5-c458-4c70-8f98-2c6ef99d4eb9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								],
								"id": "eb86e4c6-1215-4408-96af-688b346aa870"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ExtendedPositiveTesting_WithOptionalParameters",
					"item": [
						{
							"name": "ValidSpecialCharacters",
							"item": [
								{
									"name": "Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "60c083c4-1f9b-43ca-87e3-0b37e3157a08"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "4ef50dd2-da87-412c-bcc4-4de1253e077c"
											}
										}
									],
									"_postman_id": "d73316f4-27ac-4fce-bcb9-8e820bea2d49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "fa856eff-78e4-49f6-a998-8cbb1a7d8836"
											}
										}
									],
									"_postman_id": "9a301e1c-4bbb-4eaa-b469-69deb6cc52e1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e7b7e066-2ecf-4ee9-80f1-676419baa129"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "780deba1-f0f8-46ca-9e4f-aa738049097f"
											}
										}
									],
									"_postman_id": "81388aec-8367-49c1-a39b-055756ed9c0c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields_WithEmoji}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John🤮 Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John🤮 Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "7798531f-4501-454f-988c-df568b1953fc"
											}
										}
									],
									"_postman_id": "cda8027a-9f4f-4eb7-81f2-c943ec761dd4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_FilterByMetadata_Emoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        pm.expect(responseJson.results[i].properties.__displayName).to.contains(\"🤮\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "010671fb-7882-45e1-9cf5-0b4ae1a34e9a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
												],
												"type": "text/javascript",
												"id": "66f9016d-13fb-415e-8432-8317b32f3e48"
											}
										}
									],
									"_postman_id": "c7f5d96d-1f23-4011-8c99-2d49192f150f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=🤮",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "🤮"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_id": "74318281-acaa-4efd-9f39-0521bb4eea90",
							"_postman_isSubFolder": true
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Search",
									"item": [
										{
											"name": "Get_SearchByMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "64e42416-8a07-4fe0-92e5-929221e81048"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript",
														"id": "609e955c-dd3f-4f25-a593-33f5bca6cf6c"
													}
												}
											],
											"_postman_id": "9cd86fcb-e1b7-45e0-8563-70cae10279fa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByMetadata_Emoji",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "1e38c541-bb72-45a9-be27-0588ed41230b"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
														],
														"type": "text/javascript",
														"id": "c59d6a9c-9296-4d1c-a8fb-3d629d0c379a"
													}
												}
											],
											"_postman_id": "26ca568b-efa1-4000-a812-91601d2617fb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByPartialMsisdn",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{searchPartialMsisdn}}'))\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "f8195aaf-e643-436a-bbd0-c6f2d43abb01"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchPartialMsisdn\", \"447\");"
														],
														"type": "text/javascript",
														"id": "befef14f-3408-4799-bdb5-a58a2edfb6a7"
													}
												}
											],
											"_postman_id": "54ad6d0b-adb9-492a-9210-1f54c38475ab",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchPartialMsisdn}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchPartialMsisdn}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_id": "5ba57218-5d48-4dad-9bd5-35531c0cbfc1",
									"_postman_isSubFolder": true
								},
								{
									"name": "Filter",
									"item": [
										{
											"name": "Create_OptionalFields_UniqueItemForFilter",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript",
														"id": "a9ef837f-9555-4335-80db-1b92732d4f6c"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "016ffa03-fb20-4539-b05d-4e4f492ad2c2"
													}
												}
											],
											"_postman_id": "3c656de1-9818-44f1-ac18-a1ae52de1b9f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"uniqueFilter\": \"{{uniqueFilter}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript",
														"id": "1e89369f-4eb5-4eb4-b6e4-7611fc56e0c1"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "a97ba86f-8519-4a9f-9447-9cfffed8eadb"
													}
												}
											],
											"_postman_id": "04ae614e-7aae-4da5-b39a-231f7a67e1c7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined1\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript",
														"id": "81ab08e9-ffd7-478b-9b3f-732a476e7ad4"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "0c7b62c9-5615-4066-a76c-010f9ee79a48"
													}
												}
											],
											"_postman_id": "f6a0b868-b4e7-4d8a-a8d1-9793076159f2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "GetAllContacts_CombinedFilter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Checkcombined filter results\", function () {\r",
															"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
															"    pm.expect(responseJson.results[0].properties.test).to.eql(\"test\");\r",
															"    pm.expect(responseJson.results[0].properties.Department).to.eql(\"Engineering\");\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.greaterThan(0);\r",
															"    pm.expect(responseJson.results.length).to.eql(15);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"continuationToken\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"test\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"test\"\r",
															"              ]\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"continuationToken\",\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting continuationToken var:\r",
															"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
														],
														"type": "text/javascript",
														"id": "98e5ce7b-19a1-4872-a651-2339bc60597d"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "baf7a622-be97-4446-bb06-51c58b546f37"
													}
												}
											],
											"_postman_id": "b1817a3c-7ade-484a-a5a8-ce18a6eaa4c8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?test=test&Department=Engineering",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "test",
															"value": "test"
														},
														{
															"key": "Department",
															"value": "Engineering"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_FilterByOneItemPartial",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.uniqueFilter).to.contain(\"unique\")\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "054c2c29-5a28-47a7-a3f2-4daf9bcd3c3b"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript",
														"id": "1d57eccc-86f7-4365-88ee-1019d9246ab2"
													}
												}
											],
											"_postman_id": "fbe818a8-1209-4559-9f9e-9de7bc5a3f7b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=unique",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "unique"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_Filter_ReturnUnitedResulted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    var arr = [\"combined1\", \"combined2\"];\r",
															"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.combined).to.be.oneOf(arr);\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "252b7e1e-0a2e-48ad-9ce9-721fa52de89c"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript",
														"id": "a97d6cba-11a5-482c-9016-9c94b5130052"
													}
												}
											],
											"_postman_id": "ae1233c0-2279-42ca-9980-07a1cbd4435d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=combined1,combined2",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "combined1,combined2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_WithMsisdn_And_Property",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
															"    pm.expect(responseJson.results[0].address.msisdn).to.contain(\"477\");\r",
															"    pm.expect(responseJson.results[0].properties.__displayName).to.contain(\"John\");\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.gt(0);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"id": "5c6c82b9-e64e-4f1a-b987-4ec2d217adcb"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "3ea5278e-1bcd-424e-a146-ee6745b5f65d"
													}
												}
											],
											"_postman_id": "f4c52caf-7286-4b34-bf0f-286e7c25036a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?address.msisdn=477&__displayName=John",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "address.msisdn",
															"value": "477"
														},
														{
															"key": "__displayName",
															"value": "John"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create_6FilterItems",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "e3453dcb-f56e-482c-a709-6a44fa558652"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "2f12bd83-1113-4cf9-bf9c-60f7444bf4e4"
													}
												}
											],
											"_postman_id": "45ed102e-47b2-44b0-8ca6-8967c91eb569",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"filter1\": \"filter1\",\r\n        \"filter2\": \"filter2\",\r\n        \"filter3\": \"filter3\",\r\n        \"filter4\": \"filter4\",\r\n        \"filter5\": \"filter5\",\r\n        \"filter6\": \"filter6\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_5FilterItemsMax",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check results contain at least 1 item with the 5 filtered items and Check values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength).to.be.greaterThan(0);\r",
															"   \r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.filter1).to.eql('filter1');\r",
															"        pm.expect(responseJson.results[i].properties.filter2).to.eql('filter2');\r",
															"        pm.expect(responseJson.results[i].properties.filter3).to.eql('filter3');\r",
															"        pm.expect(responseJson.results[i].properties.filter4).to.eql('filter4');\r",
															"        pm.expect(responseJson.results[i].properties.filter5).to.eql('filter5');\r",
															"        pm.expect(responseJson.results[i].properties.filter6).to.eql('filter6');\r",
															"    }\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"id": "79560e98-8587-4a9b-91fc-ce5887107c63"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "1daa2dc2-9494-4ad4-aa25-71d15839729a"
													}
												}
											],
											"_postman_id": "f405e87b-5000-4dc0-a2e3-b2d8d121a569",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_id": "9c62c839-a155-4102-82e3-6ec612bfa77f",
									"_postman_isSubFolder": true
								}
							],
							"_postman_id": "abb75f9e-5d87-4802-b3b2-15ef8fc9b3c7",
							"_postman_isSubFolder": true
						},
						{
							"name": "RequestBodyParameters",
							"item": [
								{
									"name": "Create_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "60cf56dd-f731-449a-9556-d352c4526248"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "391b7fb3-e5af-4d67-b29b-7960ab63797b"
											}
										}
									],
									"_postman_id": "58ea8c10-eb5d-474d-8510-9d925244b06b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "6b828774-8e1e-43f5-b1a9-d44da8c1606f"
											}
										}
									],
									"_postman_id": "96f6aa65-4078-4b89-858c-c279219a2c77",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.results[0].address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "3ef95b61-6ae7-4b0c-9584-5a2ef7c4186d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\"));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript",
												"id": "6eefc09e-7769-48b9-89ca-a90bd407d206"
											}
										}
									],
									"_postman_id": "1359ecdb-7a08-44d6-8c0a-7e4cb356eac0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        console.log(responseJson.results[i].address.msisdn);\r",
													"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
													"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{newEncodedMsisdn}}'))\r",
													"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
													"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "8c8ccdcf-e2f9-423a-87e2-577c8540111f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript",
												"id": "6b4f9204-4054-4767-98e8-7af38789679a"
											}
										}
									],
									"_postman_id": "4f846d6b-1b10-4acc-93b6-87ce1d29f5a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_AddNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													"var guid2 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid2 \"+guid2);\r",
													"pm.collectionVariables.set(\"guid2\", guid2);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "35343dc9-bff5-49fa-8bea-5701fe643eed"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "775e9483-c5ce-4aaa-9994-27c32d04c185"
											}
										}
									],
									"_postman_id": "83df1ad0-9889-4915-853e-e21bac061d4b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\",\r\n        \"guidGeneratedNew\": \"{{guid2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_AddNewPropery",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"var guidGenerated2 = pm.collectionVariables.replaceIn('{{guid2}}');\r",
													"console.log(\"obtained guid2 is: \"+guidGenerated2)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated2);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "bd958cf2-0637-4be4-bba7-b40abca7ae5e"
											}
										}
									],
									"_postman_id": "9acb9816-af2e-401c-b08c-d74707e06509",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "ec769e8e-8e7a-4973-90b3-2250fdb5d76e"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "e3b6e8c9-386b-42f7-b82a-c3388f8cf436"
											}
										}
									],
									"_postman_id": "0184152b-5272-446b-a2b7-20b1bc4ac779",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGeneratedNew\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "e8fa6bed-4d07-4884-a612-f2ed8a86934b"
											}
										}
									],
									"_postman_id": "8f0c96b7-f9fa-4cee-919e-13677ae2fbad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "288b7dae-019e-43a9-b94f-b81d55da0620"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "01506c24-ee3b-437c-8747-5df72a126e71"
											}
										}
									],
									"_postman_id": "89111004-0e34-48ab-b276-66f99ab69c27",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PUT request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "9b29f0a2-a6a9-4994-b99e-8926165644a9"
											}
										}
									],
									"_postman_id": "e2d8c6e1-f9bb-4cef-8879-eb6b2e59f24a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_UsedAsCreate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "29ef6729-a45b-42cf-924e-f44baa0175d9"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"//pm.collectionVariables.set(\"etagPut_UsedAsCreate\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "f8700e8e-d0db-4734-bf68-bd841b4ca292"
											}
										}
									],
									"_postman_id": "7e762288-5229-482b-ba76-5c858a1ca230",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{guidForContactID}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_MissingMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "9f762049-9bbb-4b6d-9aac-b1e16de5373c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "dd220b93-4815-42aa-aa22-91821dfd07ad"
											}
										}
									],
									"_postman_id": "0a969a05-c5f7-4f7d-a072-4d61b8f65cbc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_NullMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "982d9a20-46d8-4822-9f56-24f778c21114"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "2216d98b-6935-4b8a-a069-4fc6486004c7"
											}
										}
									],
									"_postman_id": "0936c600-3c98-492e-ab04-ded94fab9877",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Patch_CheckNoUpdates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var msisdn = pm.environment.replaceIn('{{msisdn}}');\r",
													"console.log(\"obtained msisdn: \"+msisdn)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request did not update the contact - should see same msisdn\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(msisdn);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "3ef18ee0-50d0-4f14-b612-9419b3789c29"
											}
										}
									],
									"_postman_id": "ed4cca25-7244-4358-a8c1-b43e8e2d265f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "cf804c9b-78cb-4ff6-8c65-bc8d8ba2b40b",
							"_postman_isSubFolder": true
						},
						{
							"name": "Other",
							"item": [
								{
									"name": "CreateWithoutID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "41805756-f2f9-4ce1-bb6e-377479652cf1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript",
												"id": "99708fa8-2d2e-48fb-8355-24474d8eabc7"
											}
										}
									],
									"_postman_id": "260dcb77-2529-40e4-849c-7a322d695e6b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "GetCreateWithoutID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{generatedContactID}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
													"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
													"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "19ebdd18-de3d-4a5c-bc7e-a0221a3328a8"
											}
										}
									],
									"_postman_id": "e430e795-a31f-401c-8236-92fef9ea625b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var  generatedMsisdnWithDash1 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn1 = \"+447\" + generatedMsisdnWithDash1.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn1\", generatedMsisdn1);\r",
													"console.log(\"generatedMsisdn1 is: \",generatedMsisdn1);\r",
													"\r",
													"var  generatedMsisdnWithDash2 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn2 = \"+447\" + generatedMsisdnWithDash2.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn2\", generatedMsisdn2);\r",
													"console.log(\"generatedMsisdn2 is: \",generatedMsisdn2);"
												],
												"type": "text/javascript",
												"id": "97664fbe-12fd-4c37-a61c-7953be6d72ef"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript",
												"id": "28ca4d90-d738-4152-bc0d-5f3d4921695c"
											}
										}
									],
									"_postman_id": "b8ebbf4f-66bd-4c69-b305-dc5bb39142e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn1}}\",\r\n        \"msisdn\": \"{{generatedMsisdn2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
									},
									"response": []
								},
								{
									"name": "Get_Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn2}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "4e561690-7933-4a7f-992c-c0dfb65c7785"
											}
										}
									],
									"_postman_id": "019e0479-8389-4a0e-8db3-d964d9ce093c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								}
							],
							"_postman_id": "b3b93271-2b39-4f7c-b366-9c5355dc4c71",
							"_postman_isSubFolder": true
						}
					],
					"_postman_id": "75d53706-2fe8-4fba-a870-71d55300e6d8",
					"description": "Positive tests based on: optional parameters and extra functionality\n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "dab7a2fd-f533-4db0-8222-1fee619a7d9a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								],
								"id": "faeb8b7d-4845-4db1-8266-ba1ed1ee052e"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "NegativeTesting_WithValidInput",
					"item": [
						{
							"name": "NonExisting",
							"item": [
								{
									"name": "GET_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "124d3751-62f7-4546-9b4f-798ebc6ec49e"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "9ecedcd4-4f97-4915-a10f-398b9512e262"
											}
										}
									],
									"_postman_id": "854ec8bd-0697-4989-a53d-a8f0d14d7324",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "Patch_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "0fb1e0f0-5f7a-4d85-8e82-9ce635426739"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "f7d7c737-9907-4121-b4ed-1eff76bd6af5"
											}
										}
									],
									"_postman_id": "298f21cc-0162-4a97-ac86-0d82d742d6cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "GET_NonExistingAccountAndContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "9e4c420d-c2ec-469f-9893-75e3326147db"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 Not Found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "3ff46a54-9153-4835-bc80-7c35046d8611"
											}
										}
									],
									"_postman_id": "a42c9478-f0f3-4526-9781-8b530fe0d82a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/1bdf73c0-9dc1-44de-8699-8e26393a0777/contacts/1bdf73c0-9dc1-44de-8699-8e26393a0777"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a64df98b-7331-46b6-b51c-41f145b6a27a",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check no results', function () {\r",
													"    pm.expect(responseJson.results.length).to.be.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5a7f38f7-36d5-4bb2-858b-9eb1662521f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "07f84440-46ee-4285-a73c-b20d0e8774ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=9999",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "9999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "890dde8c-77ce-479e-82fa-605842cec162",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check no results', function () {\r",
													"    pm.expect(responseJson.results.length).to.be.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "58a901ea-3a7e-462b-b92c-38cc2d9f35e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "793e327e-33a4-4697-9359-6e32e1d2e32a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=+40749255311",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "+40749255311"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMetadata_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b64dc12-8d67-437b-860e-66b1880e402e",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check no results', function () {\r",
													"    pm.expect(responseJson.results.length).to.be.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cb5516e-633b-4294-8673-dcdd2c7045fc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"_postman_id": "8c49cb9a-896b-4660-b194-8c39b3557fd6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search=DoesNotExist",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "DoesNotExist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_NonExisting",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b97f3128-1055-47e3-a2fc-e20001a3f0b7"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 204 NoContent\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "b7aae295-e0f9-44a9-be8b-b5c74e85a376"
											}
										}
									],
									"_postman_id": "137428d6-9e0d-4a9f-912d-efb27be11525",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								}
							],
							"_postman_id": "f342fcde-1a92-4daf-b783-bcaa2867bb84",
							"_postman_isSubFolder": true
						},
						{
							"name": "Duplicate",
							"item": [
								{
									"name": "Create_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript",
												"id": "8b9cd88a-0988-49d7-a37b-5aebd45902e9"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "118de687-dbe7-4643-b607-786ebc266b04"
											}
										}
									],
									"_postman_id": "9456bfd8-2428-4f2f-8883-a5324779a27d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript",
												"id": "a3d22f97-a730-4a3b-921e-41dd9afb2766"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "20796581-69eb-4fa0-8d7e-51576d839dad"
											}
										}
									],
									"_postman_id": "893a74ee-49ce-4ec3-bfaf-ce640febe142",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PATCH_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript",
												"id": "f977b12c-b076-4ae1-bafa-d3c6bc0ea55d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "41fb9b41-38b2-43f4-a2ef-2aa9a80be023"
											}
										}
									],
									"_postman_id": "abae2d70-9333-42e0-9062-1ac7c21aeca9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Create_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "1ed8bef5-e120-47b2-ba96-29acfeda1bd3"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "b32d9a29-0a3d-4918-9c96-d0ea746a6524"
											}
										}
									],
									"_postman_id": "d1078b9a-6c17-44d7-986c-0fea990acd4f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "a85af322-7292-4046-a69c-2b3ce64ca397"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});\r",
													"//PossibleBug "
												],
												"type": "text/javascript",
												"id": "f8b4954f-e618-4e5e-b871-212ab5b832bf"
											}
										}
									],
									"_postman_id": "74a024e6-152d-4bc7-9435-ba06a5a35cb6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "21337edf-4b53-46fe-81df-7ac4ef2efdad"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});\r",
													"//PossibleBug "
												],
												"type": "text/javascript",
												"id": "2af2f035-c64d-44d2-86fc-1e2b75c7e1eb"
											}
										}
									],
									"_postman_id": "d04c7ac0-0434-48b7-a5fb-b9eff9eda130",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "f039542a-a47a-414d-bb16-f562aabb5fb3",
							"_postman_isSubFolder": true
						},
						{
							"name": "UnAuthorized",
							"item": [
								{
									"name": "Create_Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "913bd66b-ef1d-4d64-abe9-3a02384e7001"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to missing subscription key. Make sure to include subscription key when making requests to an API.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "aef75444-eacc-4947-a63c-40fbd6d202a2"
											}
										}
									],
									"_postman_id": "2999dcbc-3cea-4c30-9910-10dd0716d062",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "d83335ab-e061-475b-983a-19043ca910dd",
							"_postman_isSubFolder": true
						}
					],
					"_postman_id": "31e00514-7cf3-4a56-b8cb-1c3bd70cbcee",
					"description": "Example:\n\nvalid user input - example: try to add an already existing item (with same ID)\n\nEndFragment",
					"_postman_isSubFolder": true
				},
				{
					"name": "NegativeTesting_WithInvalidInput",
					"item": [
						{
							"name": "LengthValidation",
							"item": [
								{
									"name": "Create_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "9f37efcb-a3b4-459f-b87f-de4f325b4f6a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "fe2bc195-179e-4171-a303-e99b53cf013f"
											}
										}
									],
									"_postman_id": "10b9de14-5baf-4b3d-aa10-dd78ec6a596c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "e33fdee2-70dd-470a-9835-b963dee13aa4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "a431be34-f9b2-4e52-b674-c4a28572ea49"
											}
										}
									],
									"_postman_id": "e160caa9-c146-4465-bc02-ee83432ce8ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "80714854-d55b-49e1-8c76-9136ed03cbe9",
							"_postman_isSubFolder": true
						},
						{
							"name": "Required",
							"item": [
								{
									"name": "Headers",
									"item": [
										{
											"name": "CreateWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "73278ab3-3efe-4390-a081-366257581bdb"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "dc0dd218-0f7e-4c7b-be4a-abeead3c947b"
													}
												}
											],
											"_postman_id": "c7b28ab2-8491-4c20-a0c7-5530b9a69b31",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "PatchWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "172a6504-ad85-41ca-9445-dfa7991fd616"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "07d15750-9e13-4b53-9734-ee2b4ed75db4"
													}
												}
											],
											"_postman_id": "3c4cfaf3-6b2f-48aa-95c3-6abe032d9391",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "064ab6d9-2021-4518-89b6-12bd421ff987"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "cb396c23-938f-4e46-b0fb-3d8356c31eb4"
													}
												}
											],
											"_postman_id": "8283df69-7075-493d-9329-ac1d9d5e0ac3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PatchWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "fb377c02-e896-47f2-8bfd-b432d29a4399"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "928255ed-f128-4f89-af7c-9f184bc57259"
													}
												}
											],
											"_postman_id": "d79a5af6-6d58-41db-878b-eb3e985b3323",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "993f3a8a-68cb-4542-a95f-efb7eab8179a"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "854274ca-5e8c-44eb-a18d-566983281298"
													}
												}
											],
											"_postman_id": "a37a6676-5c1d-461d-871d-cce96da859f2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "GetWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "737dc65c-3114-44b1-8738-a4b2d06a848a"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "46408b9e-5dd2-4685-b8e4-e40108eb27d1"
													}
												}
											],
											"_postman_id": "3841ddb7-bc0c-4636-809c-4c0b8b033c6d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "CreateWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "9a363026-ddea-49a4-9bfc-b68cd53c9398"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "a05c0ecf-fa0f-489a-acff-7a4af601fb6c"
													}
												}
											],
											"_postman_id": "56aa7cd0-3807-4941-9e17-403584896278",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "7e97e6d5-70e6-4596-b43b-fac31bd30d16"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "eb183c35-efa7-4de8-8882-fff57db7555c"
													}
												}
											],
											"_postman_id": "28ff7cd7-8a79-44b7-931f-72537a054ad6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "b61ce346-5956-4bc5-a915-077837a99d68"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.text();\r",
															"console.log(responseJson.length);\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 204 No Content\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check empty response body: \"+pm.info.requestName, function () {\r",
															"   pm.expect(responseJson.length).to.be.eq(0);\r",
															"});\r",
															"\r",
															"//Should ignore userHeader and work as normal delete "
														],
														"type": "text/javascript",
														"id": "69379797-3bef-4c83-b05f-1359db4e7c0f"
													}
												}
											],
											"_postman_id": "b0984743-6bfe-4678-802e-6310c0fdd3c0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/beff82d3-08ff-42b0-8a61-0a1881262e66"
											},
											"response": []
										}
									],
									"_postman_id": "237dc4ab-63a6-494b-9a32-6fa84fc90ce2",
									"_postman_isSubFolder": true
								},
								{
									"name": "Create_RequiredField_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d4bd38b6-fdbd-4cae-ab41-8db93d337bb0"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "fec8b5ae-e2d4-4b8e-9850-57ce0a765438"
											}
										}
									],
									"_postman_id": "a10b1d86-0a5c-4d93-8169-5ce9dbcb3475",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_RequiredField_msisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													""
												],
												"type": "text/javascript",
												"id": "477a2677-a1b4-4277-b51d-cbefb407492f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "3b53c0a9-dc1c-4aee-9ca1-7cc9621c3dd0"
											}
										}
									],
									"_postman_id": "89a9161b-d9e8-4d61-af21-37c700985797",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "0c21db86-af11-4ff3-998a-e29a997be9eb"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "0ee1d613-7b8b-49f2-92f4-f7fb3189db52"
											}
										}
									],
									"_postman_id": "e5aaeb31-1e2c-4a32-82b5-2ff599e2eee1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "38c4895c-b7d4-4944-8093-bcb819e84b76"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "88f9f701-ae4b-4ae0-84b3-154de3dd8770"
											}
										}
									],
									"_postman_id": "91733f02-a2e6-4c9e-9423-a71d6ac9280c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredAddress",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "b3d85614-91c6-4f21-b8d6-cd6472814aca"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "05436cfb-8983-4269-9f20-fc22979c96e7"
											}
										}
									],
									"_postman_id": "8d47851d-fef7-4b0c-823c-59d29992312a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredMSISDN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "633a66e6-2421-43b8-b21d-f5653cb5ce6a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "b86e30a1-cfee-4835-a171-e451f0762f3d"
											}
										}
									],
									"_postman_id": "a0305dae-c233-493c-9b3e-99e05ed1f336",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "bad2e3cd-82cb-4477-95c2-9c8b027d2c93",
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "IllegalCharacters",
									"item": [],
									"_postman_id": "69b859f6-7122-4720-b1f1-9310c0b158e5",
									"_postman_isSubFolder": true
								},
								{
									"name": "NotGUID",
									"item": [
										{
											"name": "GET_InvalidContact_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "6e053156-104a-4448-8b19-c8ba4a3c7674"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "ccbe7eaf-2ecc-441c-9497-87b385033f01"
													}
												}
											],
											"_postman_id": "efc9c28b-4d15-4a38-8f2e-c623b882da0b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidContact_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "a4fd84c7-ca50-4d3a-9452-7bf26490ecf6"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "2a3fc163-4349-4ecb-9f7d-ed270ca73b33"
													}
												}
											],
											"_postman_id": "f4e2741a-84e2-44c2-a8e6-6611cdf8c765",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
											},
											"response": []
										},
										{
											"name": "Put_InvalidContact_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "25c584c3-b8f9-4c5f-85cd-20618cb3e18e"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "474f83ca-c700-49a5-be1d-1106b538752f"
													}
												}
											],
											"_postman_id": "46c58286-c8ca-4ac4-a1d8-24effe0df3de",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
											},
											"response": []
										},
										{
											"name": "Create_InvalidContact_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.variables.set(\"msisdn\", \"+40749255355\");"
														],
														"type": "text/javascript",
														"id": "0d0efe9b-8615-4c80-b217-e16618d8b7a8"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});"
														],
														"type": "text/javascript",
														"id": "210464aa-b84d-4bf0-918a-a504082026aa"
													}
												}
											],
											"_postman_id": "973af961-c6b8-42fb-8a94-25adf888721f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
											},
											"response": []
										},
										{
											"name": "Delete_InvalidContact_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "063f4440-1b0d-4f27-b805-0772f2f79ef5"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "708a1f03-32ec-4e34-8111-cc42337ed98d"
													}
												}
											],
											"_postman_id": "5c44d587-94d4-4df1-9064-a2ac28b20454",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
											},
											"response": []
										}
									],
									"_postman_id": "e15d38a4-69c5-41e6-8814-33115e4a3710",
									"_postman_isSubFolder": true
								},
								{
									"name": "InvalidJSON",
									"item": [
										{
											"name": "Create_With_InvalidJSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
															"    pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "19b81712-3091-4235-91cf-b0a8b948a875"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "80890ff4-8af8-494e-9be4-bce05bb6667d"
													}
												}
											],
											"_postman_id": "5d9c91e1-a375-4f20-b8db-5404fa6ff097",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "Patch_With_InvalidJSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
															"    pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "8e10b1af-a259-4919-a864-5619feecea64"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "de6af894-257c-4616-a6da-4568dbe7a4a2"
													}
												}
											],
											"_postman_id": "4cfeadc4-0f44-4564-9b0b-947ea3b1e765",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "Put_With_InvalidJSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
															"    pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "00a67cd6-ecc8-4dd6-b73c-e9ef971f8895"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ee1d35bb-2eca-4015-9c8a-5bd319491750"
													}
												}
											],
											"_postman_id": "127f7dd4-68e0-4cef-a9f0-29d740af1400",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										}
									],
									"_postman_id": "b2d19aa9-3bf0-45f0-830d-b48cc7699be4",
									"_postman_isSubFolder": true
								},
								{
									"name": "InvalidAccountID",
									"item": [
										{
											"name": "Create_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ae15a2be-4894-4404-a2e0-a21ed0b4ac75"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "2615262d-b32f-48d0-8705-6e97ce7c5fe4"
													}
												}
											],
											"_postman_id": "ed07d1e3-8ca3-4981-a025-e7844de7903b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "241b1c42-efc4-4f49-9aef-8327e3b6a7a8"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "ce53bb87-55a3-4692-a5c4-adda7da039f9"
													}
												}
											],
											"_postman_id": "dbb875de-2f41-4393-ba2c-b299e7128853",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
											},
											"response": []
										},
										{
											"name": "Put_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "11b31dcb-697e-43da-9991-3375b4d14cd9"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "5b37e0cc-e31b-41ba-b221-b7a876003ae9"
													}
												}
											],
											"_postman_id": "3ef39767-f626-44ac-97f1-7efcce10f859",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "GET_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ad6aa9b2-a01c-4622-8e15-e152c0480421"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "8051ae20-d42d-4499-8751-12f3f576a955"
													}
												}
											],
											"_postman_id": "8cc4f2cb-7f28-40ef-bc73-200a0225e402",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/NotGUID/contacts/NotGUID"
											},
											"response": []
										},
										{
											"name": "Delete_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "3298bf3b-7a9b-484a-b288-9fa0466410ad"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "a20538f9-4f70-401c-b53f-638f45d095d6"
													}
												}
											],
											"_postman_id": "32cd0387-5ed3-4e12-954f-a61207e4767e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/invalidAccount/contacts/NotGUID"
											},
											"response": []
										},
										{
											"name": "Put_InvalidAccountIDAndProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "8aa99ca8-04ec-4692-b176-57c7e8bfa627"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "69f8d234-fd3a-4cb9-a985-6602c5cc97f1"
													}
												}
											],
											"_postman_id": "dffeb315-dea6-4c77-8271-ff7e711d02cd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProductdfdfd",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {}
												},
												"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
											},
											"response": []
										}
									],
									"_postman_id": "7f6a409f-c9b6-4aed-bef6-521cbad3c409",
									"_postman_isSubFolder": true
								},
								{
									"name": "InvalidEtag",
									"item": [
										{
											"name": "Patch_InvalidEtag_Null",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "5bb2f46c-cfa6-488a-9024-85920a3dcf1d"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
															"});\r",
															"\r",
															"//bug: https://esendex.atlassian.net/browse/TPS-395"
														],
														"type": "text/javascript",
														"id": "9ed45c93-0b6d-4b1b-b196-436e12d09174"
													}
												}
											],
											"_postman_id": "72e02972-b1f4-4df6-9ffd-e19e40a2afb7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"null\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidEtag_EmptyString[TPS-395]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "075ac4aa-7b23-4dcf-923d-13b073e475d7"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
															"});\r",
															"\r",
															"//bug: https://esendex.atlassian.net/browse/TPS-395"
														],
														"type": "text/javascript",
														"id": "aa0bc02e-e514-45ca-9271-1f0c9c3ca566"
													}
												}
											],
											"_postman_id": "894ff8c4-d0be-49fe-91e3-82ab30d71f27",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidEtag_AnyChar[TPS-395]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "8773feec-dc3b-4b38-b8fb-e55ab343e92d"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
															"});\r",
															"\r",
															"//bug: https://esendex.atlassian.net/browse/TPS-395"
														],
														"type": "text/javascript",
														"id": "a0bc5bea-ac64-4348-a407-3a6d305e2a21"
													}
												}
											],
											"_postman_id": "798577a7-d873-4610-88ff-3e66bd012277",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"g\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidEtag_AnyGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "377ffb76-11c2-455e-af11-fba367fa8157"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "97df8630-c510-4f97-b32f-49112d79a04e"
													}
												}
											],
											"_postman_id": "c412c665-3caa-47d8-ab7c-41de46f14ae9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PUT_InvalidEtag_Null[TPS-395]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "0675e2b6-0d9c-433d-bade-8f31366289a8"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
															"});\r",
															"\r",
															"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
															"//Doc is either not uptodate or wrong message:\r",
															"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
															"//            \"code\": \"etag_invalid\" -- current  etag_missing"
														],
														"type": "text/javascript",
														"id": "a9d8934f-66f2-4148-8c5f-0c4545aeb476"
													}
												}
											],
											"_postman_id": "58813824-8cfa-49d9-bfdd-ba939357dee2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": null,\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PUT_InvalidEtag_EmptyString[TPS-395]",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "f977b9fe-2512-4eb5-83bb-de326dcabe3f"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
															"});\r",
															"\r",
															"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
															"//Doc is either not uptodate or wrong message:\r",
															"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
															"//            \"code\": \"etag_invalid\" -- current  etag_missing"
														],
														"type": "text/javascript",
														"id": "1c750fbd-4079-4904-811e-9abdc242ef82"
													}
												}
											],
											"_postman_id": "1d6d56cb-6fb8-4740-a558-533f45aa46ea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PUT_InvalidEtag_AnyChar",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "a8753af4-dfd4-4d41-8c12-0f4086c1654b"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "eeb3daad-7224-4a9d-832b-0763b791a589"
													}
												}
											],
											"_postman_id": "e9903071-a709-47e0-a150-b2ea59fb63e9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"f\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PUT_InvalidEtag_AnyGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "0430a151-7c4e-4421-af63-c0db40a0ec0c"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
															"    pm.response.to.have.status(428);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "e31fa0af-048d-4805-ae32-0f9f41568c3e"
													}
												}
											],
											"_postman_id": "ef536834-a6f8-45e1-8b13-1a673d55a114",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										}
									],
									"_postman_id": "6d248049-eeb3-496c-8ec4-2d431d5ab837",
									"_postman_isSubFolder": true
								},
								{
									"name": "ReservedKeywords",
									"item": [
										{
											"name": "Get_ByMetadataAndPartialMsisdn_CheckSearchIsReservedKeyword",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"'search' is a reserved keyword and cannot be used as a key\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "a101cdd7-37e9-4fc3-8d20-a799ac4b1ab8"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
															"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
															"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
															"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
														],
														"type": "text/javascript",
														"id": "970ee0e9-e514-42f6-b8d9-0da46d554cc4"
													}
												}
											],
											"_postman_id": "db394618-8d92-4b3b-9338-d7d3284f8514",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														},
														{
															"key": "address.msisdn",
															"value": "{{newEncodedMsisdn}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_ByMetadataAndPartialMsisdn_CheckFilterIsReservedKeyword",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"'filters' is a reserved keyword and cannot be used as a key\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "33a7a06b-c87f-41ab-979e-d3a765569eed"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
															"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
															"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
															"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
														],
														"type": "text/javascript",
														"id": "7fd02a14-c790-490e-85ff-f097a7a6f9c8"
													}
												}
											],
											"_postman_id": "929492df-ba78-47bf-97c5-5c2d4d8c8794",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "{{searchMetadata}}"
														},
														{
															"key": "address.msisdn",
															"value": "{{newEncodedMsisdn}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_id": "8c2d61b9-b3f2-47e5-be05-281a517f027c",
									"_postman_isSubFolder": true
								},
								{
									"name": "Other",
									"item": [
										{
											"name": "Get_ByInvalidParam",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that no results are returned\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength).to.eql(0);\r",
															"});"
														],
														"type": "text/javascript",
														"id": "60bc424a-cc77-401b-81ab-6ec67284d01b"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "577b35fc-aa6a-4447-a3f6-7e31eadf0c63"
													}
												}
											],
											"_postman_id": "413a47e4-ffcc-46f2-91a3-5db1ed2af5a2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?someInvalidParam=x",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "someInvalidParam",
															"value": "x"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_id": "9e75c343-f3e7-4968-861c-ada81aea9e86",
									"_postman_isSubFolder": true
								},
								{
									"name": "Create_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "f64d95ac-01a1-4ea6-aea7-0a30b55bdeb0"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "ec0060d5-6650-4191-b587-6c48da63b12d"
											}
										}
									],
									"_postman_id": "67790499-161c-465d-b10d-631f886a3ce1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_MissingMsisdn[TPS-397]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "e3f5d3c2-ae6b-4cff-8088-63a627f5fd69"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact MSISDN should be set\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"pm.expect(jsonData.errors.length).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "2bddc8d6-e83a-4bfa-a78d-812ea389ea3c"
											}
										}
									],
									"_postman_id": "848f3590-0f57-46fe-9c7a-0d25ef08454b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "2b50703b-9261-4d22-9fd6-ded9cec0fc2b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "ea8a5086-140e-4f56-b2d7-6c353b1c9ae2"
											}
										}
									],
									"_postman_id": "0a6e08bf-1610-4e7a-9b66-64cb94508731",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "a9456036-c62e-4b2c-9813-0323637677ce"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													""
												],
												"type": "text/javascript",
												"id": "2671b31e-f3e7-454a-ab1b-ffb901d1b8d3"
											}
										}
									],
									"_postman_id": "1a246c00-5c69-4f0b-bb72-1ef190ea1c56",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "3b023071-e227-422c-89aa-4540a55a83f2",
							"_postman_isSubFolder": true
						},
						{
							"name": "InvalidAuthorization",
							"item": [
								{
									"name": "Create_Unauthorized_InvalidAuthorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "39528955-d2d0-43ce-9129-2c8196244559"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "366f85fb-5a03-4376-8904-7bfbb3d67614"
											}
										}
									],
									"_postman_id": "46b94765-f6be-46a3-b51a-dfc4b1ac7ae6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "cvcv",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "efa3bf1c-7f21-43ef-819f-f0d976393090",
							"_postman_isSubFolder": true
						},
						{
							"name": "MultipleErrors",
							"item": [
								{
									"name": "Patch_OptionalFields_Check2Errors_MaxLengthForPropertyAndInvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "0addd639-90bf-453f-a63e-9fa6f8fcb11a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code set1\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code set2\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[1].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[1].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "da8e85b8-5ab5-47a8-acab-080a249e8e24"
											}
										}
									],
									"_postman_id": "46b08b31-b0e6-4b3d-938a-383a0aca0a21",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"_postman_id": "6a7e5b01-b349-47e3-9b39-efd6ee8bcebe",
							"_postman_isSubFolder": true
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Filter",
									"item": [
										{
											"name": "Get_CombinedFilter_Check5FilterMaxError",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"A maximum of 5 filters can be provided\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"too_many_filters\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "cf3cb989-fcc3-4a93-aebf-34e9a70657ef"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "dc09e982-9736-467f-8c16-ce713a62b2ba"
													}
												}
											],
											"_postman_id": "90fc2615-1650-4988-9c6e-88f32157c564",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5&filter6=filter6",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														},
														{
															"key": "filter6",
															"value": "filter6"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_id": "9f2d4a50-a339-4f54-a787-fa0adad22e80",
									"_postman_isSubFolder": true
								}
							],
							"_postman_id": "aed3a89d-bb1b-4bd4-b1b7-e2f94ee944a2",
							"_postman_isSubFolder": true
						}
					],
					"_postman_id": "7b70b373-f7c2-423a-9fed-a9a1b1e0fb97",
					"description": "invalid input (trying to add a property which is null or other invalid input - for example a NULL msisdn\n\nEndFragment",
					"_postman_isSubFolder": true
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "GetAllContacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(15);\r",
											"\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting continuationToken var:\r",
											"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript",
										"id": "87d00785-594f-4ede-bf9b-44bb597614d5"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//TODO maybe add precondition: if not 16 contacts => create min 16"
										],
										"type": "text/javascript",
										"id": "f1ae923d-5d2e-4038-9368-3a05f19932ef"
									}
								}
							],
							"_postman_id": "8d3eb6f4-9888-403c-aa40-d8aa7e519903",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						},
						{
							"name": "GetAllContacts RetrieveMore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is not 0\", function () {\r",
											"    pm.expect(responseJson.results.length).to.not.eql(0);\r",
											"\r",
											"});\r",
											"\r",
											"var schemaWithContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"var schemaWithoutContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schemaWithoutContinuationToken)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "6ae26f84-1c1d-4302-bd11-cdfb0f52cb5b"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var contToken = pm.collectionVariables.get(\"continuationToken\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"key: 'ContinuationToken',\r",
											"value: contToken\r",
											"});"
										],
										"type": "text/javascript",
										"id": "e3db436d-7c2e-4a2b-8168-36b6fea10783"
									}
								}
							],
							"_postman_id": "97837820-b669-442b-8130-bd0d06771b21",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						}
					],
					"_postman_id": "2808673d-4561-4f51-a537-e05e67d89beb",
					"description": "DestructiveTesting? intentionally attempt to break the API to check its robustness  \nSecurity, authorization, and permission tests?",
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "6a129e96-10db-408e-be0b-c99f4fe93528"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6f09d8be-4f7a-4156-ae99-557da7feeb77",
				"type": "text/javascript",
				"exec": [
					"//Pre-request Collection level",
					"console.log(\"RequestName is: \", pm.info.requestName);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "057e2436-2119-4e85-8e79-ab65d3cde711",
				"type": "text/javascript",
				"exec": [
					"/*",
					"Performance tests",
					"pm.test(\"Request_\"+pm.info.requestName+\"_Test_CollectionLevelTest1: Check Response time is less than 200ms\", function () {",
					"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(200);",
					"});",
					"*/"
				]
			}
		}
	],
	"variable": [
		{
			"id": "95614ea3-5bfe-432d-b481-4e28d9fdd244",
			"key": "listOfContactIds",
			"value": "",
			"type": "string"
		},
		{
			"id": "876ca6c6-1b94-4718-acc5-32b9995d0ef3",
			"key": "+40749211233",
			"value": "",
			"type": "string"
		},
		{
			"id": "1c3cd9c2-36ef-4d9c-913f-6d2070804798",
			"key": "+40749211255",
			"value": "",
			"type": "string"
		},
		{
			"id": "3f0c710c-964a-40a1-a3fd-caf89a64b72b",
			"key": "+40749211244",
			"value": "",
			"type": "string"
		},
		{
			"id": "461a5e8d-32e2-40e8-9219-ea8e8b370c69",
			"key": "+40749211222",
			"value": "",
			"type": "string"
		},
		{
			"id": "3c8f2816-f1bd-4e34-8a8e-9d6e1f34ea07",
			"key": "contactId1",
			"value": "",
			"type": "string"
		},
		{
			"id": "25ba4d49-bc96-4971-8718-b0637981418e",
			"key": "msisdn1",
			"value": "",
			"type": "string"
		},
		{
			"id": "c856e3d1-0041-4896-bf0e-593526c42b5a",
			"key": "contactId2",
			"value": "",
			"type": "string"
		},
		{
			"id": "2348c483-6a28-4f74-8aef-b0fb3abd210d",
			"key": "msisdn2",
			"value": "",
			"type": "string"
		},
		{
			"id": "d96866d1-e01c-4c08-a47b-3db675d4fa69",
			"key": "contactId3",
			"value": "",
			"type": "string"
		},
		{
			"id": "9b3f0936-71df-4e85-bae3-dc79d7601011",
			"key": "msisdn3",
			"value": "",
			"type": "string"
		},
		{
			"id": "ff78a814-8bab-478d-ad86-3a4172d770ea",
			"key": "contactId4",
			"value": "",
			"type": "string"
		},
		{
			"id": "62ccbf5c-611a-4d30-a4fa-06bedf99e031",
			"key": "msisdn4",
			"value": "",
			"type": "string"
		},
		{
			"id": "abdb7e25-f329-4a52-8cf4-b18a32cb0cc0",
			"key": "OperationId",
			"value": "",
			"type": "string"
		},
		{
			"id": "303d8472-9f44-40d8-a16e-104a82ca0f4c",
			"key": "maxNumberOfTries",
			"value": "",
			"type": "string"
		},
		{
			"id": "9fc54525-09bb-4f2b-93d7-95ec4a7c82d3",
			"key": "timeStep",
			"value": "",
			"type": "string"
		},
		{
			"id": "27f0f728-0609-4a38-99a9-96e8975baf30",
			"key": "groupIdWithContacts",
			"value": "",
			"type": "string"
		},
		{
			"id": "1c3f4942-d297-4bd4-aedf-1b109d6d6680",
			"key": "groupIdWithContactsName",
			"value": "",
			"type": "string"
		},
		{
			"id": "1ee0d402-b75c-497f-9ab1-29e3c0d9ad55",
			"key": "groupIdWithoutContacts",
			"value": "",
			"type": "string"
		},
		{
			"id": "c9b02c9d-beec-4832-9431-4e919b61aab8",
			"key": "groupIdWithoutContactsName",
			"value": "",
			"type": "string"
		},
		{
			"id": "494c559e-9ddc-44bc-b12f-c605ce7c7228",
			"key": "etag",
			"value": "",
			"type": "string"
		}
	]
}