{
	"info": {
		"_postman_id": "70656273-8340-4d46-ad4a-2212f7fa53cb",
		"name": "ContactsApi",
		"description": "[https://github.com/esendex/RichContent.Docs/wiki/Contacts](https://github.com/esendex/RichContent.Docs/wiki/Contacts)\n\n[https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations](https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Contacts",
			"item": [
				{
					"name": "BasicCRUD_SMOKE",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted contact with contactId: \" + pm.environment.get(\"contactId\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");"
										],
										"type": "text/javascript",
										"id": "35071c1c-3b33-48b8-857e-52d3f831f434"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "199b06ec-d707-4503-8520-f067437b8cc7"
									}
								}
							],
							"id": "c9b828e1-8189-43c3-b526-3516b82e7df3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "ff680af0-598e-4aae-88d7-264cc92880f2",
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"contactId\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"etag\": \"d6f93c54-3ee6-476e-8fe6-09e5f22ed6f8\"\r\n}"
								}
							]
						},
						{
							"name": "Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "311227d5-b7b5-4b71-9204-e8d4a83dcef0",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
											"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
											"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"address\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"msisdn\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"msisdn\"\r",
											"      ]\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    },\r",
											"    \"properties\": {\r",
											"      \"type\": \"object\"\r",
											"    },\r",
											"    \"groupsInformation\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"address\",\r",
											"    \"metadata\",\r",
											"    \"properties\",\r",
											"    \"groupsInformation\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "13196ae2-0f00-471d-b2af-bb71c7aa598a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "7011972b-4a95-4046-adc0-ead14e8bf61d",
									"name": "Get",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"id\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"eTag\": \"fed3c303-a761-4503-a15d-1ca662bff8e1\",\r\n    \"accountId\": \"c90c5734-f195-4d6c-92a5-0a81eecf093d\",\r\n    \"address\": {\r\n        \"msisdn\": \"+40749255366\"\r\n    },\r\n    \"metadata\": {\r\n        \"user\": \"user\",\r\n        \"lastUpdatedAt\": \"2022-12-13T13:15:38Z\",\r\n        \"product\": \"someProduct\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"3570200b-3dcc-427a-9f26-24e0a748cc4f\"\r\n    },\r\n    \"groupsInformation\": []\r\n}"
								}
							]
						},
						{
							"name": "Patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"//Preconditions - get already used etag:\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"//End Of Preconditions \r",
											"\r",
											"//Generating vars:\r",
											"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
											"console.log(\"generated guid1 \"+guid1);\r",
											"pm.collectionVariables.set(\"guid1\", guid1);\r",
											"\r",
											"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
											"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
											"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
											"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
											""
										],
										"type": "text/javascript",
										"id": "cee219eb-cb0d-4654-9214-6167f4596e27"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "c39c1107-66a1-4ba5-a2da-e680ccf29839"
									}
								}
							],
							"id": "ce617aaa-f61a-4403-86d9-f69061d55b79",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.collectionVariables.replaceIn('{{generatedMsisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "90930e9e-599b-4b34-8b41-e7ce4275abae"
									}
								}
							],
							"id": "56aeabb4-451c-4e3e-ae9b-b546ff9c0a48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Put",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.variables.replaceIn('{{X-Subscription-Key}}')\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											""
										],
										"type": "text/javascript",
										"id": "f99450e5-a27c-4dcf-b008-68f0c023cb65"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "2af22d99-c084-4be1-9913-853586b98349"
									}
								}
							],
							"id": "f7d47bf3-3ed2-434a-9bda-ce63cf8617ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.environment.replaceIn('{{msisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PUT request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "98ac8519-0454-4afa-98bf-af30781a8dd9"
									}
								}
							],
							"id": "52addcdd-6743-47a6-896b-96f7771c79c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "fad07cb4-99e8-405b-a769-57fb921fd898"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var contactId = pm.environment.get(\"contactId\");\r",
											"var responseJson = null; \r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + contactId,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.environment.get(\"X-Subscription-Key\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    responseJson  = res.json();\r",
											"    pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that DELETE request actually deleted the contact, by GET request\", function () {\r",
											"        pm.expect(responseJson.errors[0].error).to.eql(\"The requested contact could not be found.\");\r",
											"        pm.expect(responseJson.errors[0].code).to.eql(\"contact_not_found\");\r",
											"        });\r",
											"});\r",
											"//Above test is written here and not as a separate GET so that we verify the DELETE functionality but also preserve the upper level test which checks \"susccess error codes\", not 404 - contact_not_found\r",
											"\r",
											"//var responseJson  = pm.response.json();\r",
											"var schema = {}\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "b7103cf3-9909-416f-9328-ff8abcd86d0c"
									}
								}
							],
							"id": "892c8f89-9179-4eb7-bbec-2e8d0bf3a4e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "ReCreate (useful for chaining)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "b58c9246-8505-40f7-a6ec-c03c16445846"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "8e457b47-b824-4c5a-9097-27758db6d51f"
									}
								}
							],
							"id": "280017b4-a782-409b-aaca-d3d777802308",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						}
					],
					"id": "c9efe76c-3233-4c3e-b1fb-49538560dd18",
					"description": "Main functionality of the service - happy paths. Tests can be used as Smoke tests.\n\nStartFragment\n\n- Execute a POST request that creates a resource\n- then execute a GET request to check if it exists\n- then we use a PATCH endpoint to update new data\n- and we again invoke a GET request to validate the new data\n- same for PUT\n- then, we DELETE that resource\n- and we again invoke a GET request to validate that the resource does not exist anymore (inside DELETE request to not fail because of collection test in regards to Status Code - 404 in our case);\n- finally, re-create resource so that we can use it in other tests as an existing testdata.\n    \n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6cecd7c0-5c24-49a8-8b56-259e365d3958"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								],
								"id": "c302bcb4-705c-4c42-918d-009ce12b40d7"
							}
						}
					]
				},
				{
					"name": "ExtendedPositiveTesting_WithOptionalParameters",
					"item": [
						{
							"name": "ValidSpecialCharacters",
							"item": [
								{
									"name": "Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "362b8d69-2052-4dd4-8884-34cf44fa3fca"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "7552799d-0be5-4592-89b1-b779f023dfdb"
											}
										}
									],
									"id": "8965dd08-0887-412e-9e30-009ed55db063",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "04c2f51f-2bb5-4c0a-80f7-6026c04bcab8"
											}
										}
									],
									"id": "7f317f45-267b-4e62-b7f3-90bfc44b967c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "9caf3ae5-c370-4759-8bca-76f5fdae524a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "1a8eaa86-862a-4d69-81e3-59da53cef12c"
											}
										}
									],
									"id": "bd1dce6d-2e5d-41ff-b21d-826ca4c4f009",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields_WithEmoji}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John🤮 Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John🤮 Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "c50de7a6-476b-4fa9-87ae-995e4685557a"
											}
										}
									],
									"id": "2ca6a72d-c603-4680-9493-1682b68a0773",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_FilterByMetadata_Emoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        pm.expect(responseJson.results[i].properties.__displayName).to.contains(\"🤮\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "c60d0132-6ea2-4e5d-bd1b-e4bb4e486e31"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
												],
												"type": "text/javascript",
												"id": "bdaa76db-4206-4f28-8961-093cbac04963"
											}
										}
									],
									"id": "71d5ca91-7f69-4445-bf5a-ff327688919b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=🤮",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "🤮"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "3ae1f7c5-7649-476a-857a-07ee402f484b"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Search",
									"item": [
										{
											"name": "Get_SearchByMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "cf1cd31a-42e3-4f2d-bf99-6e6859f27e2a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript",
														"id": "01d9f161-d676-4d93-be21-64f4ffe3cada"
													}
												}
											],
											"id": "4f2cf10a-402c-4f3f-8fb8-ffd32ea892d0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByMetadata_Emoji",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "22f4ca69-4977-4384-b122-2b4957a0dbfa"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
														],
														"type": "text/javascript",
														"id": "1fd8156c-e740-477f-b2b9-f6a5f5853229"
													}
												}
											],
											"id": "3bffa6e0-0c6b-4d25-b5c9-78069c2f1813",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByPartialMsisdn",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8bee79fd-63b6-4eff-a5e7-1b9bb279aed5",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{searchPartialMsisdn}}'))\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "23eb3096-9e25-4a4c-a6f9-7a6ce502061e",
														"exec": [
															"pm.collectionVariables.set(\"searchPartialMsisdn\", \"447\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "fccb15ac-49ff-4f43-8186-4881dde69b49",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchPartialMsisdn}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchPartialMsisdn}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "9d93a02c-a482-41e8-a3fa-0026866a4b1c"
								},
								{
									"name": "Filter",
									"item": [
										{
											"name": "Create_OptionalFields_UniqueItemForFilter",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript",
														"id": "e879dd3a-45ae-4807-91b8-ac76061ac8dc"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "54fc13ed-e78a-480b-8c20-fc233a7df6fd"
													}
												}
											],
											"id": "0b266d12-bcf3-467e-8785-974ddea4a299",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"uniqueFilter\": \"{{uniqueFilter}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript",
														"id": "e0f1c2a7-38c7-48d2-bd51-bfb920719494"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "199bc7ec-8159-4e23-87ec-de384c7a1453"
													}
												}
											],
											"id": "eb36992c-7a5e-4132-a962-0be5d8aafddb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined1\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript",
														"id": "84604591-2922-40f0-891f-239b6b4e7b08"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "89cd0362-694b-4f6e-a0d4-bbb0353ae2fe"
													}
												}
											],
											"id": "1f3ce23e-c5c3-4710-be33-ca3b30d29ef8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "GetAllContacts_CombinedFilter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check combined filter results\", function () {\r",
															"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
															"    pm.expect(responseJson.results[0].properties.test).to.eql(\"test\");\r",
															"    pm.expect(responseJson.results[0].properties.Department).to.eql(\"Engineering\");\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.greaterThan(0);\r",
															"    pm.expect(responseJson.results.length).to.eql(15);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"continuationToken\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"test\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"test\"\r",
															"              ]\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"continuationToken\",\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting continuationToken var:\r",
															"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
														],
														"type": "text/javascript",
														"id": "a0cfc0f6-436f-4ed0-826c-c1152958d2e7"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "a7c6cd18-324a-4669-8bfa-31f59e961d94"
													}
												}
											],
											"id": "d3c57673-c9b3-4b8b-acc6-11d2faf25714",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?test=test&Department=Engineering",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "test",
															"value": "test"
														},
														{
															"key": "Department",
															"value": "Engineering"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_FilterByOneItemPartial",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.uniqueFilter).to.contain(\"unique\")\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "ab81f23e-f29c-4375-b53b-d4f0a0bf06b8"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript",
														"id": "87a92033-3bf6-4e4d-bd2f-e4d48f057a58"
													}
												}
											],
											"id": "fbfaf7c7-f48a-488f-aa28-9475457ada17",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=unique",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "unique"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_Filter_ReturnUnitedResulted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    var arr = [\"combined1\", \"combined2\"];\r",
															"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.combined).to.be.oneOf(arr);\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "49c046d7-e9a8-4a95-9ead-85cbb237a8d7"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript",
														"id": "235bfa75-357c-4f7d-b0b8-a5db8257e39f"
													}
												}
											],
											"id": "a5cb33e0-b751-4ca2-bb70-448d21587919",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=combined1,combined2",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "combined1,combined2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_WithMsisdn_And_Property",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
															"    pm.expect(responseJson.results[0].address.msisdn).to.contain(\"477\");\r",
															"    pm.expect(responseJson.results[0].properties.__displayName).to.contain(\"John\");\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.gt(0);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"id": "4661fd85-f68c-4559-aa53-1b44a21c9608"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "81627f02-5573-458b-9e14-81ac145db29a"
													}
												}
											],
											"id": "44621932-9895-44ae-8977-803ec5e74703",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?address.msisdn=477&__displayName=John",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "address.msisdn",
															"value": "477"
														},
														{
															"key": "__displayName",
															"value": "John"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create_6FilterItems",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "c16508c6-d09f-4852-94cf-c683d8285dd2"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript",
														"id": "0ed136f6-b36c-49fd-9e25-636e6ab1c5e8"
													}
												}
											],
											"id": "7f94951b-14e3-4f6c-beab-da0fa09845c7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"filter1\": \"filter1\",\r\n        \"filter2\": \"filter2\",\r\n        \"filter3\": \"filter3\",\r\n        \"filter4\": \"filter4\",\r\n        \"filter5\": \"filter5\",\r\n        \"filter6\": \"filter6\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_5FilterItemsMax",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check results contain at least 1 item with the 5 filtered items and Check values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength).to.be.greaterThan(0);\r",
															"   \r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.filter1).to.eql('filter1');\r",
															"        pm.expect(responseJson.results[i].properties.filter2).to.eql('filter2');\r",
															"        pm.expect(responseJson.results[i].properties.filter3).to.eql('filter3');\r",
															"        pm.expect(responseJson.results[i].properties.filter4).to.eql('filter4');\r",
															"        pm.expect(responseJson.results[i].properties.filter5).to.eql('filter5');\r",
															"        pm.expect(responseJson.results[i].properties.filter6).to.eql('filter6');\r",
															"    }\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript",
														"id": "5df66cc2-f44d-49d9-81dc-84b924f07ad1"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "11e88050-d2e6-4a72-b198-eebdb807d73a"
													}
												}
											],
											"id": "b4362b3f-24bf-48f8-bc73-b1be7caf3022",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "e321bdb2-0d3b-46f1-8850-1019f953bfd5"
								}
							],
							"id": "1d0fcb03-f0d5-4579-8dd7-584f5f39e30a"
						},
						{
							"name": "RequestBodyParameters",
							"item": [
								{
									"name": "Create_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "9733d539-38ca-4b9b-9cce-ab2907cbc788"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "c0c8b697-dbdf-4388-87ce-fe6e6f956814"
											}
										}
									],
									"id": "1cf4509f-7f6c-47b6-a4e8-bb0d7632f3d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "8f79aec3-16af-4fbf-94a4-8e6119622f89"
											}
										}
									],
									"id": "b0fe33a1-d0c2-46e2-914d-62cd2947c56f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.results[0].address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "c40b1863-818f-4495-907e-cce132587888"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\"));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript",
												"id": "10efe740-cfd0-4d87-8dc8-c95e785d69ad"
											}
										}
									],
									"id": "9084e91a-2e95-4950-bdba-17a3625973db",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        console.log(responseJson.results[i].address.msisdn);\r",
													"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
													"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{newEncodedMsisdn}}'))\r",
													"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
													"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "06331519-bb4d-4dff-a300-3e91d76b169f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript",
												"id": "3cb86bf3-4246-4611-8b00-4b5f5cbd9b1a"
											}
										}
									],
									"id": "77c76084-cd80-4058-bdbb-e139fba06a40",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_AddNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													"var guid2 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid2 \"+guid2);\r",
													"pm.collectionVariables.set(\"guid2\", guid2);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "b6521cea-04df-46da-b86e-aeb3d4313e92"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "84061c4b-d118-47a0-ad19-4dd48f4fd861"
											}
										}
									],
									"id": "6a6159a6-7187-4b6c-9eb9-77a3d3ce917c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\",\r\n        \"guidGeneratedNew\": \"{{guid2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_AddNewPropery",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"var guidGenerated2 = pm.collectionVariables.replaceIn('{{guid2}}');\r",
													"console.log(\"obtained guid2 is: \"+guidGenerated2)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated2);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "5d0449fa-9570-4b93-9389-0f9af2c48d1e"
											}
										}
									],
									"id": "098f7391-ee65-459b-9233-df01a8f26853",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "3ffc52d3-4533-4e5d-9e63-40c9cfd82a55"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "5c0155be-0f5c-4942-97fa-471568b83b82"
											}
										}
									],
									"id": "70126234-5d93-4a38-ae55-6e610b3a9d77",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGeneratedNew\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "2de07344-5613-4ce3-a3d3-aa3bde9fdd31"
											}
										}
									],
									"id": "243b9058-e4bd-44f1-9353-e0027bb711db",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "d8e24bad-01f0-46e2-8ece-a6dcf548204d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "ea5e2270-419f-49b0-a0b8-ce0a0648b107"
											}
										}
									],
									"id": "0b092eb6-003d-4ffd-972c-5cc1381831c9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PUT request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "cb008e1d-3865-489a-9f11-462d6a265fc1"
											}
										}
									],
									"id": "4a92db82-22d4-4364-8953-b919712cef41",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_UsedAsCreate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "16dc594f-02d3-49e6-8082-89cd123409e2"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"//pm.collectionVariables.set(\"etagPut_UsedAsCreate\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "e71f8330-899a-4592-831d-79e87f6f3aff"
											}
										}
									],
									"id": "3e05678f-8797-4528-8bb9-96ac80587f66",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{guidForContactID}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_MissingMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "335f8fe9-bc91-4875-876d-26fe9db0efea"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "e5747de5-a181-4dbe-8723-04e7969a8423"
											}
										}
									],
									"id": "cbc114ce-77af-49dd-8ef8-089c25637c88",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_NullMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "da02952b-cbb1-43a1-b0d5-6c2129ce7e3d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "69db0d61-fae9-4d3b-a1fe-ff76b6e4b692"
											}
										}
									],
									"id": "29ee10f7-9939-44ae-af61-855a1966934c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Patch_CheckNoUpdates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var msisdn = pm.environment.replaceIn('{{msisdn}}');\r",
													"console.log(\"obtained msisdn: \"+msisdn)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request did not update the contact - should see same msisdn\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(msisdn);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "7ab593d4-0a49-439c-989f-9d534f9d6b7f"
											}
										}
									],
									"id": "6d37a1a0-59c6-4521-b3ab-bfd3f78f7431",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "9f280911-7883-4988-ab97-12acca9bbfbf"
						},
						{
							"name": "Other",
							"item": [
								{
									"name": "CreateWithoutID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript",
												"id": "5771953f-790e-4a88-91ef-a32eecc18a03"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript",
												"id": "d3898bec-249b-41ec-959a-963dd1b1f67c"
											}
										}
									],
									"id": "65dff829-7530-42e2-9581-2b2ec12970a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "GetCreateWithoutID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{generatedContactID}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
													"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
													"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "0cbac744-caf8-44a5-a95a-4ddfb4ccec0a"
											}
										}
									],
									"id": "c1b3c086-7871-46ea-9282-af65136001e6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var  generatedMsisdnWithDash1 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn1 = \"+447\" + generatedMsisdnWithDash1.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn1\", generatedMsisdn1);\r",
													"console.log(\"generatedMsisdn1 is: \",generatedMsisdn1);\r",
													"\r",
													"var  generatedMsisdnWithDash2 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn2 = \"+447\" + generatedMsisdnWithDash2.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn2\", generatedMsisdn2);\r",
													"console.log(\"generatedMsisdn2 is: \",generatedMsisdn2);"
												],
												"type": "text/javascript",
												"id": "d23f978e-ec8a-43e3-ae52-0dd4876f611b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript",
												"id": "19b299a2-b800-47eb-8ea5-16af28017118"
											}
										}
									],
									"id": "562da656-1aef-4b32-a645-6ad9a9c7d833",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn1}}\",\r\n        \"msisdn\": \"{{generatedMsisdn2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
									},
									"response": []
								},
								{
									"name": "Get_Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn2}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "eb198ee9-26c3-4a6d-9925-e0050570377a"
											}
										}
									],
									"id": "71f75c2f-3037-48f0-98da-858989c5e842",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								}
							],
							"id": "1a2ec180-b004-4d1b-9d88-81481d9f817e"
						}
					],
					"id": "e28211af-55c8-4380-b495-1b47f9f26429",
					"description": "Positive tests based on: optional parameters and extra functionality\n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "79be442b-02d3-45ea-9ae3-61188e430941"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								],
								"id": "405d22fb-eaee-4cba-8da1-1600d6f943ae"
							}
						}
					]
				},
				{
					"name": "NegativeTesting_WithValidInput",
					"item": [
						{
							"name": "NonExisting",
							"item": [
								{
									"name": "GET_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c441ae3c-7f47-4f95-9766-df471bf7fd82"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "bee6b716-d834-4da0-a6f5-d5de74c29d64"
											}
										}
									],
									"id": "d80c3cc1-cefb-4c81-bf9f-f6dc04205380",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "Patch_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d6f28b95-f90b-44bb-85ad-f8fa632073a4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "3f97b9ef-804c-40e7-8edc-b861392694e9"
											}
										}
									],
									"id": "c39c1485-51d5-48e6-b02d-9b9881886c8f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "GET_NonExistingAccountAndContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "32578d96-2c3d-435d-965e-1b1efa0f2414"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 Not Found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "34686ed9-51e9-4f3d-8ff8-b4116e23829b"
											}
										}
									],
									"id": "de439cf5-7de4-4814-85bc-e6a1171788e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/1bdf73c0-9dc1-44de-8699-8e26393a0777/contacts/1bdf73c0-9dc1-44de-8699-8e26393a0777"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c515b877-b279-4102-b8f5-65969f858e6d",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check no results', function () {\r",
													"    pm.expect(responseJson.results.length).to.be.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8ffe6b8f-88ba-497f-b15c-7034d31ba678",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e9f278aa-ea7c-4615-b6a2-7dbc09ae08c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=9999",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "9999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "930d4f14-2f3c-4334-98f0-70b0aea0bf7d",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check no results', function () {\r",
													"    pm.expect(responseJson.results.length).to.be.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "89c842fc-3504-41df-aeff-39e0303c4f0e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "58a1f6f6-db10-4794-8279-425a54e86592",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=+40749255311",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "+40749255311"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMetadata_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfa00522-9212-4738-a073-ff28e99c8881",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check no results', function () {\r",
													"    pm.expect(responseJson.results.length).to.be.eql(0);\r",
													"});\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e4f2c5ab-ea0d-48dd-a2e3-44bdc61f7108",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4ebd9ee5-64cf-4bbb-8126-c7e867abe850",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search=DoesNotExist",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "DoesNotExist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_NonExisting",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "66186edc-ba67-43d7-b158-740206a04ee9"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 204 NoContent\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "136731f8-18a1-4e6f-a865-92988c328f3a"
											}
										}
									],
									"id": "a278f564-abfe-46a4-8f62-0bcbf305995e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								}
							],
							"id": "3017046d-4a17-4947-aa2f-4cb815d4e3fb"
						},
						{
							"name": "Duplicate",
							"item": [
								{
									"name": "Create_WithSameID[TPS-434]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c0ad0bd8-0ee2-4b51-a2dd-6e6704766a04",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7fcc6fee-9c64-4ac0-b613-f57cb03667e8",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"var expectedContactID = pm.response.json().contactId;\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A contact with the id \"+expectedContactID+\" already exists. You can use put or patch in order to update it.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b447c862-7e8c-4c2f-b086-ff66f4eddc7a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameID[TPS-434]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d127bb0d-083f-4a7d-8643-5ffcbad50b54",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1a68abb7-b0fe-44dd-afcf-9a8b9d12fe1e",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"var expectedContactID = pm.response.json().contactId;\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A contact with the id \"+expectedContactID+\" already exists. You can use put or patch in order to update it.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "44cd1869-eadb-48a2-b0d9-990a8346e36a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PATCH_WithSameID[TPS-434]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "835ae037-7e12-4b36-b5b3-074e5a8a4451",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0af12f7c-9eea-43c5-a5ec-0d91e1a6fa02",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"var expectedContactID = pm.response.json().contactId;\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A contact with the id \"+expectedContactID+\" already exists. You can use put or patch in order to update it.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3e6978fd-6a96-4829-b5b7-9d5cf6032b26",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Create_WithSameMsisdn[TPS-434]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b7bc6ee8-9a48-42ab-b346-c667a390f000",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db23291a-4f63-4d7e-8f36-d44bcc7bdb3f",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"var expectedContactID = pm.response.json().contactId;\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A contact with the id \"+expectedContactID+\" already exists. You can use put or patch in order to update it.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bf496bcb-dd8c-4e0c-8e92-d4247370996c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_WithSameMsisdn[TPS-434]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dd16ec92-2b3a-4b88-a834-b1fc772528b4",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c57d0ead-1950-45b7-84e9-ea970f61dcf9",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"var expectedContactID = pm.response.json().contactId;\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A contact with the id \"+expectedContactID+\" already exists. You can use put or patch in order to update it.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "35f53dde-8edc-488a-a067-1b41bd20599d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameMsisdn[TPS-434]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2fdc279c-c4ae-4939-9e9d-74ed64013025",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73b04f30-a70e-4f42-a6b2-f8e18fdbe76e",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"var expectedContactID = pm.response.json().contactId;\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A contact with the id \"+expectedContactID+\" already exists. You can use put or patch in order to update it.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_exists\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "62b0a797-b852-47b1-967d-1b79ad280fd8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "e28c0faa-6202-4f3b-9e76-3efd60b97099"
						},
						{
							"name": "UnAuthorized",
							"item": [
								{
									"name": "Create_Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "46a8a74e-ccb0-47c4-ba96-e02e1838867b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to missing subscription key. Make sure to include subscription key when making requests to an API.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "7aac55dc-8b6c-4327-bc44-0c481f9e723f"
											}
										}
									],
									"id": "1e814ce0-10e0-4c1f-8d0e-f71485bc528c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "4ced3e6d-6f61-4cae-8221-58a20108c23c"
						}
					],
					"id": "86737e04-3856-47e9-9ff4-cdb6e1b41504",
					"description": "Example:\n\nvalid user input - example: try to add an already existing item (with same ID)\n\nEndFragment"
				},
				{
					"name": "NegativeTesting_WithInvalidInput",
					"item": [
						{
							"name": "LengthValidation",
							"item": [
								{
									"name": "Create_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "3552d803-88c3-4107-b9db-b85373d54898"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "c2c7da0f-29a0-46b3-ac72-254a2488501b"
											}
										}
									],
									"id": "b361958e-a823-490f-890a-70a67d8de486",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "dc840200-f341-477b-a401-9f937e8b698a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "49af042c-e51a-49bc-9c4f-afe16d05b88b"
											}
										}
									],
									"id": "480fec97-2510-4373-b08a-ab5c839f911c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "83da6051-ec3f-492b-8171-2420a19b69d4"
						},
						{
							"name": "Required",
							"item": [
								{
									"name": "Headers",
									"item": [
										{
											"name": "CreateWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "d0f0ab18-8d59-49ac-b33e-43fee8d757c1"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "17c3178e-3ded-4091-a88e-185c1103b9cd"
													}
												}
											],
											"id": "b403abc6-11d8-4396-9a2b-116e7a610de7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "PatchWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "556e2489-ebf7-4819-a5c4-fef054840615"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "25595664-6498-4789-8b17-01cfb7d69fe6"
													}
												}
											],
											"id": "7442baed-2c06-4cee-9a79-dd13719bb10c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "ce93afe6-939c-442c-92a2-667953f575c3"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "6aeebdca-3598-4b0a-86e8-c6daa6727044"
													}
												}
											],
											"id": "5ca3dc12-be54-401f-89b2-8bdd38bb4582",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PatchWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "bd049e5f-3057-417b-869a-f91d01bbd840"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "b6694356-583a-4460-b221-62fcbc721a65"
													}
												}
											],
											"id": "afc1d0c1-3afe-41b7-b828-b170cffff144",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "6b795ca3-6ac6-443e-9bc6-795c4e7ebd44"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "f52c4932-a9b7-4fad-9f89-ccf426f19b19"
													}
												}
											],
											"id": "f9e6e18e-4ae8-4ffb-a4a5-b146f1c99d74",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "GetWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "236b98f5-3a2e-4547-9a64-8db1dd294624"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "39663e36-74ac-43ba-af6a-cab6bb48f08d"
													}
												}
											],
											"id": "b917a8ae-1493-48cf-996f-fb978498d3bb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "CreateWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript",
														"id": "e6602fbf-d9fb-44f8-a6b8-689b544989ae"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "69e6e186-5d6e-4bbb-a41b-57f5f7305456"
													}
												}
											],
											"id": "d786d239-9728-478c-8caf-fe45a78b7f9c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "810357cf-de80-4ba6-af50-52b2b761e671"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "c2823ce7-34d0-4961-b873-fad23c6361cc"
													}
												}
											],
											"id": "b2163104-ca24-4da7-9391-e56ec99c3598",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										}
									],
									"id": "96664ff3-461f-421e-8ce9-3044deb4345f"
								},
								{
									"name": "Create_RequiredField_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "be969c80-a9f1-4cfb-b345-9d2789774470"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "e95b5f31-54eb-4a44-868a-fa4e2e53753f"
											}
										}
									],
									"id": "10505c7a-4891-42b9-8c33-77c8eb27b838",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_RequiredField_msisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													""
												],
												"type": "text/javascript",
												"id": "323b154d-69f9-499c-9b79-d462b803efe6"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "a477f8c8-3031-40cb-8938-5fdb3497430b"
											}
										}
									],
									"id": "d97090e8-63c8-4fcb-ac78-71e929630005",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "bc79142e-7df4-437c-a7a3-9c63e1b51a4d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "59a3f2d7-2dbb-428a-9161-279e7645cca7"
											}
										}
									],
									"id": "3444c2b9-dafc-4a75-aed1-9939c3e67040",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "71ccc726-0140-49a6-91a3-d6cef9566b40"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "ea4c7935-2055-497d-a3ab-eae458d1b861"
											}
										}
									],
									"id": "1b29dd72-761b-4da2-a0c4-e1c3cb7d67bc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredAddress",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "ea4c5fa7-c942-47d0-be80-41908c8ecaea"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "e738026b-cade-4351-b7f9-dc5b436fdccb"
											}
										}
									],
									"id": "498620c4-0d41-4470-a3fe-be32e0dc1929",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredMSISDN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "2f660c58-4bfb-481b-be59-43ce679a5db0"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "591d877a-d5ef-4e4c-9bb8-37bc3e30cb10"
											}
										}
									],
									"id": "b880afd5-372a-40a6-9b0e-58f2716958f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "9730a02c-72ee-4866-813a-cf5f005f6ede"
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "IllegalCharacters",
									"item": [],
									"id": "16787a67-89ee-41b3-af50-e26c89efe49a"
								},
								{
									"name": "GET_InvalidContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "ff08c9d2-bcd1-4f7c-ac26-9932095f87f1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "fb416436-cc93-48f1-8507-d76f8218f63b"
											}
										}
									],
									"id": "cc05d024-3417-4348-ae7c-dc65eaa3ad80",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2ecd040c-60f5-4829-b218-43580b7691c1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "91705092-8640-4d2d-a02b-0a8c0bc5629c"
											}
										}
									],
									"id": "7a475a36-d5dd-44f2-a276-e3f186a5165b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Put_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c2b575c7-8004-43f8-993d-2f9831a9d9cc"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "7ae99f77-fe48-476a-9e9c-8ae003cc73c8"
											}
										}
									],
									"id": "552372fc-4078-4db8-a09e-3cd74b23a960",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Create_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "af34e24f-661e-4e19-9a3e-42003cc0b676"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "dd5d47a2-80fa-4315-a281-b831aabd039f"
											}
										}
									],
									"id": "644b0b17-fcc6-42f0-81f7-bb536b054fbc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b3e6b326-a102-48a3-a437-abf9183903f4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "1cc88413-f02a-464d-91dc-8ca70955ce63"
											}
										}
									],
									"id": "f6b37220-d649-40d2-8e77-0c24f483ea8a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Put_InvalidAccountIDAndProductHeader",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "0db6648d-51e6-488c-b4ec-f00ce197d26b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "1fca62a1-5b99-4699-a2ab-6899bbfdb42f"
											}
										}
									],
									"id": "342e93b3-2296-40e3-92c4-1294a3e124a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProductdfdfd",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "24952da8-7b53-4bf6-92df-e8420d2ea698"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "e53f1ded-7ffa-4552-bdbc-a5529c445505"
											}
										}
									],
									"id": "7f791e00-f042-48ef-88a9-da48d689630c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "GET_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "06aa5c9d-5854-4953-8a36-17d1d913929f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "d5d27744-3de8-4e9d-92c0-a77f63056401"
											}
										}
									],
									"id": "6bb34579-3b80-498c-84ed-42be12442faf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/NotGUID/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Create_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "30aef6ee-5a5f-4fc1-bd2f-6a715033b571"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "873ec447-5d47-4aa0-b336-400337e7d7ed"
											}
										}
									],
									"id": "22b4ccbc-3acf-40bf-946c-f73dd6dad602",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "e207b36c-8055-438a-997b-a412640a286d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e8afb611-1eef-4fdc-b754-d802bd51ec17"
											}
										}
									],
									"id": "184dc6b5-f7f5-4587-a222-40ec005e3d27",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "6d5cfa79-2ac2-4175-bfee-5744942fb35b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "18e65165-49b4-41bc-8650-8019e4521f8d"
											}
										}
									],
									"id": "3501c4cf-22d6-4bfb-8c4c-d69e73a4d0ce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Create_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript",
												"id": "d7086670-8830-4fde-a9c7-62a2e03e6af3"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "2ffe7be2-38a9-43e9-832f-486a54a499fd"
											}
										}
									],
									"id": "1e1db14e-c85a-4a95-906a-b5985cf0bcad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Create_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "871ac747-9ce8-4804-b7b4-98346670fbd8"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "2e936a55-33b6-474f-bbca-29dcc956fd0c"
											}
										}
									],
									"id": "5e31d8b3-0145-406f-9494-e1569f2b9e69",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_MissingMsisdn[TPS-397]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "c3199810-b09e-490d-848e-d786bf85522c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact MSISDN should be set\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"pm.expect(jsonData.errors.length).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "0d929d0d-3eca-4aaa-9a89-dd4d167f9510"
											}
										}
									],
									"id": "6a4dd4ae-3e51-468d-821c-4f51e607c5a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "f60e5b8f-ab04-430b-983c-7890321fda73"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "09ba7526-802b-4320-9235-3de77165067d"
											}
										}
									],
									"id": "9668a1b5-1755-4406-99c3-120fc1822d56",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript",
												"id": "2a4aa7b1-17d0-44b6-ab16-c02a15ccd181"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													""
												],
												"type": "text/javascript",
												"id": "48a6e847-3d71-4961-92f4-4d770a1264b3"
											}
										}
									],
									"id": "9839212e-c3ac-4fe8-827b-58d7ece9c187",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_Null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e273ca45-75db-4bb5-9ba4-6d4c226f5f0d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript",
												"id": "4a92fd87-414a-40f7-ac9e-cb5bc4c78d8c"
											}
										}
									],
									"id": "240ec9dd-a5a8-458f-a7bc-c26a68a72de9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"null\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_EmptyString[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4f84e287-2236-4cbf-bcee-686d7f5f130f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript",
												"id": "cb98c87e-4440-4c13-b64d-710142e17246"
											}
										}
									],
									"id": "d8289a8e-0a98-4b53-a60f-f1eb20a1bb87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyChar[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b5cb376c-2440-41b6-99af-1a4f02d2abe8"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript",
												"id": "10f05c6c-9c08-4207-b0b8-007c2efe31a8"
											}
										}
									],
									"id": "a19810ec-b17c-42c9-878b-4cfa5b96d8d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"g\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "15a6185e-93c2-43d5-97c5-82b2c26bb2e7"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "302e4ebb-0751-434a-93ae-376f0e0966fe"
											}
										}
									],
									"id": "b8fd7e51-53d6-4cad-8694-b53d1eac14e4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_Null[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "fc7ed492-79f2-42bc-953c-49f8e044e05f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
													"//Doc is either not uptodate or wrong message:\r",
													"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
													"//            \"code\": \"etag_invalid\" -- current  etag_missing"
												],
												"type": "text/javascript",
												"id": "cbae607d-bcda-4f28-8658-0b70bb8ff761"
											}
										}
									],
									"id": "72550124-a3b8-4c52-83f3-24f0468f4064",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": null,\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_EmptyString[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "6f9da2ad-8f96-4e0b-ae59-02bd7aa0b85c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
													"//Doc is either not uptodate or wrong message:\r",
													"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
													"//            \"code\": \"etag_invalid\" -- current  etag_missing"
												],
												"type": "text/javascript",
												"id": "b8a18ad3-7a8f-41d6-922e-15440e3b9260"
											}
										}
									],
									"id": "79d910ae-6654-47ad-a6a7-042fa3c29ceb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_AnyChar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "47e402b5-1e81-4ba4-830a-b17d1ba47e8c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "8e8cbbe6-fb8f-4684-a99f-e4b65669e2bf"
											}
										}
									],
									"id": "adfa19c0-44e8-47ed-bd37-8960562167f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"f\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_AnyGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d6715e29-d71a-4636-93c1-b4e65d068e7a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "c2f19a80-be6b-4b14-9a5d-385065ea9b9d"
											}
										}
									],
									"id": "eb973a45-6be6-4ed4-b2af-d883defbeb2c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Delete_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "f0ff7030-22fe-4d43-a194-66f9a3a018ff"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "0bbe8976-e6fe-4d64-b30f-b6c14fdfc417"
											}
										}
									],
									"id": "df52ce0f-563c-4835-9c66-69dbd1b111a2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Delete_InvalidAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "8e711737-d229-425c-b921-c27f9b1a568f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "5dac7276-8834-47a9-9cfe-e16d15373c91"
											}
										}
									],
									"id": "0a8d3fa8-5a3b-481f-b695-557970ce9084",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/invalidAccount/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Get_ByMetadataAndPartialMsisdn_CheckSearchIsReservedKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"'search' is a reserved keyword and cannot be used as a key\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "3d8dcdf3-949c-4aba-94c5-151d1cc1cc7a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript",
												"id": "86763785-e8ef-45e2-82ad-095b414b5bb1"
											}
										}
									],
									"id": "eb43e67a-adcb-4c9b-b7f3-a227409fd9bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "{{searchMetadata}}"
												},
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMetadataAndPartialMsisdn_CheckFilterIsReservedKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"'filters' is a reserved keyword and cannot be used as a key\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "79d06d6e-14bb-469c-bcbb-230950d5e181"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript",
												"id": "38aa22cf-14c5-441b-83d8-c56cd5702c98"
											}
										}
									],
									"id": "f998159c-6205-4103-aca8-2b81862fa72f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "{{searchMetadata}}"
												},
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByInvalidParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that no results are returned\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength).to.eql(0);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "5c48a9c1-73a6-47d6-a57b-bc020a04e244"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b8c3a683-8ed3-44ec-8556-9a1ab7290b81"
											}
										}
									],
									"id": "8280dc36-4943-433c-af21-b52453a3b559",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?someInvalidParam=x",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "someInvalidParam",
													"value": "x"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "540fa06e-7ef5-4aed-93c0-ee32821101e6"
						},
						{
							"name": "InvalidAuthorization",
							"item": [
								{
									"name": "Create_Unauthorized_InvalidAuthorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e826c5c0-f6a4-4ca4-bc54-708ead2d9c70"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "f49b585b-af08-4e36-b3d2-6b7267cec68b"
											}
										}
									],
									"id": "291bb008-8205-45ce-913d-2178fc0a9e72",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "cvcv",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "82e61010-2868-4b53-b7cf-9fca9a8ff916"
						},
						{
							"name": "MultipleErrors",
							"item": [
								{
									"name": "Patch_OptionalFields_Check2Errors_MaxLengthForPropertyAndInvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "70d1853c-6ceb-49f5-95c3-6b228a756679"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code set1\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code set2\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[1].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[1].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "270c4bd9-e6c8-46e3-a38e-3deeec6de531"
											}
										}
									],
									"id": "afcb7861-5b01-4a31-949d-63bb6dd15443",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "6393c442-38c7-412f-a2ce-3e7e025c85ae"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Filter",
									"item": [
										{
											"name": "Get_CombinedFilter_Check5FilterMaxError",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"A maximum of 5 filters can be provided\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"too_many_filters\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "30b86d84-5f44-450f-bbda-27eafc3284eb"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript",
														"id": "edad8fe7-cd85-4d14-9891-a6f0a7023fb4"
													}
												}
											],
											"id": "897a7a8d-d988-4d21-b2eb-197a7d818ac8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5&filter6=filter6",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														},
														{
															"key": "filter6",
															"value": "filter6"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "fc9d80d4-95ac-4891-bd3d-be4cd2c99501"
								}
							],
							"id": "68528cfc-0453-4a80-9f77-9091842fb9fb"
						}
					],
					"id": "8a12a853-d41e-480d-b97d-e3037b9c71c9",
					"description": "invalid input (trying to add a property which is null or other invalid input - for example a NULL msisdn\n\nEndFragment"
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "GetAllContacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(15);\r",
											"\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting continuationToken var:\r",
											"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript",
										"id": "57ee2685-d6ac-4e81-928c-d2aaaa238a7a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//TODO maybe add precondition: if not 16 contacts => create min 16"
										],
										"type": "text/javascript",
										"id": "5a0ec83c-15c5-4375-a887-016d0562bc0d"
									}
								}
							],
							"id": "02c97925-a1ce-4ec2-8c37-0e8a7adbc54b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						},
						{
							"name": "GetAllContacts RetrieveMore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is not 0\", function () {\r",
											"    pm.expect(responseJson.results.length).to.not.eql(0);\r",
											"\r",
											"});\r",
											"\r",
											"var schemaWithContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"var schemaWithoutContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schemaWithoutContinuationToken)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "a9ee1e96-f996-459c-bd90-fa0dda649373"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var contToken = pm.collectionVariables.get(\"continuationToken\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"key: 'ContinuationToken',\r",
											"value: contToken\r",
											"});"
										],
										"type": "text/javascript",
										"id": "48b78056-1522-43bc-b1b8-2d6553abfbff"
									}
								}
							],
							"id": "30df2766-47ea-41cb-bfe7-8176512b9c73",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						}
					],
					"id": "299fa5c2-32ce-4df5-b2ff-ebedfee54ed9",
					"description": "DestructiveTesting? intentionally attempt to break the API to check its robustness  \nSecurity, authorization, and permission tests?"
				}
			],
			"id": "29c3a9b2-80b6-4b31-86c0-b78948523fe7"
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "BasicCRUD_SMOKE",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e564b38-aada-415c-8423-9108b402dccc",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted group with groupId: \" + pm.environment.get(\"groupId\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");\r",
											"\r",
											"pm.collectionVariables.set(\"groupName\", \"TestGroupName\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "823d3ac5-faef-4778-b278-c7888921624f",
										"exec": [
											"var expectedgroupId = pm.environment.replaceIn('{{groupId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
											"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"groupId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"groupId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "526558fe-336e-44d2-9426-e0e0e72eb6c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"groupName\": \"{{groupName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
							},
							"response": []
						},
						{
							"name": "Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94c1be12-ff0d-476b-bf06-214d263fd3c4",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedgroupId = pm.variables.replaceIn('{{groupId}}');\r",
											"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
											"var expectedgroupName = pm.variables.replaceIn('{{groupName}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(expectedgroupId);\r",
											"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
											"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.groupName).to.eql(expectedgroupName);\r",
											"    pm.expect(responseJson.groupDescription).to.eql(null);\r",
											"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"groupName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"groupDescription\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"groupName\",\r",
											"    \"groupDescription\",\r",
											"    \"metadata\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"console.log(\"previous etag:\"+ pm.collectionVariables.get(\"etag\"));\r",
											"pm.collectionVariables.set(\"etag\", responseJson.eTag);\r",
											"console.log(\"crt etag:\"+ pm.collectionVariables.get(\"etag\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "50385302-53b4-4990-afae-763f15929b7d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
							},
							"response": []
						},
						{
							"name": "Patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30a0b8d3-28a6-4831-b67e-d45a930bf78f",
										"exec": [
											"\r",
											"//Preconditions - get already used etag:\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    console.log(\"previous etag in Prerequest:\"+ pm.collectionVariables.get(\"etag\"));\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"    console.log(\"crt etag in Prerequest:\"+ pm.collectionVariables.get(\"etag\"));\r",
											"    pm.variables.unset(\"etag\");\r",
											"    console.log(\"other etags: \" + pm.variables.get(\"etag\"), pm.environment.get(\"etag\"));\r",
											"});\r",
											"//End Of Preconditions \r",
											"\r",
											"//Generating vars:\r",
											"var groupNameUpdated = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"console.log(\"generated groupNameUpdated \"+groupNameUpdated);\r",
											"pm.collectionVariables.set(\"groupNameUpdated\", groupNameUpdated);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f75b61b-5f5b-4cc9-9e0d-f2f2b3be1320",
										"exec": [
											"var expectedgroupId = pm.variables.replaceIn('{{groupId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
											"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"groupId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"groupId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d9897df3-3d19-48b2-9f84-e0fbde91e0f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": \"{{groupNameUpdated}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
							},
							"response": []
						},
						{
							"name": "GetPatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedgroupName = pm.collectionVariables.replaceIn('{{groupNameUpdated}}');\r",
											"console.log(\"obtained groupName is: \"+expectedgroupName)\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the group\", function () {\r",
											"    pm.expect(responseJson.groupName).to.eql(expectedgroupName);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "16930d41-e2d6-4e9b-b5e3-64d1bfc8d2b1"
									}
								}
							],
							"id": "fc73f760-82c2-41bf-b69e-99342ab32559",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "26e21952-8e31-4dc0-b960-7d962f9e53a0"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var groupId = pm.environment.get(\"groupId\");\r",
											"var responseJson = null; \r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + groupId,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.environment.get(\"X-Subscription-Key\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    responseJson  = res.json();\r",
											"    pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that DELETE request actually deleted the group, by GET request\", function () {\r",
											"        pm.expect(responseJson.errors[0].error).to.eql(\"The requested group could not be found.\");\r",
											"        pm.expect(responseJson.errors[0].code).to.eql(\"group_not_found\");\r",
											"        });\r",
											"});\r",
											"//Above test is written here and not as a separate GET so that we verify the DELETE functionality but also preserve the upper level test which checks \"susccess error codes\", not 404 - group_not_found\r",
											"\r",
											"//var responseJson  = pm.response.json();\r",
											"var schema = {}\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "9c4a0b8f-4912-4a39-be69-270244f1f3b9"
									}
								}
							],
							"id": "07c40a5a-cb07-4ea0-8c52-d4d4b6ba9638",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
							},
							"response": []
						},
						{
							"name": "ReCreate (useful for chaining)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "6083a126-f393-44cc-9a84-ef27878cc528"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedgroupId = pm.variables.replaceIn('{{groupId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
											"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"groupId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"groupId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript",
										"id": "ccd181ad-1bc7-4bef-9d09-1d4b57c26880"
									}
								}
							],
							"id": "c3c54fda-5fb1-4845-ad8b-afb398f7c8a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"groupName\": \"{{groupName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
							},
							"response": []
						}
					],
					"id": "4ea95ecf-c344-42e6-8850-afdea8699b82",
					"description": "Main functionality of the service - happy paths. Tests can be used as Smoke tests.\n\nStartFragment\n\n- Execute a POST request that creates a resource\n- then execute a GET request to check if it exists\n- then we use a PATCH endpoint to update new data\n- and we again invoke a GET request to validate the new data\n- same for PUT\n- then, we DELETE that resource\n- and we again invoke a GET request to validate that the resource does not exist anymore (inside DELETE request to not fail because of collection test in regards to Status Code - 404 in our case);\n- finally, re-create resource so that we can use it in other tests as an existing testdata.\n    \n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "461b5b40-dd38-4198-bacd-1f52138b9137"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								],
								"id": "3df54378-fa04-4714-b8dd-11f8784a3f25"
							}
						}
					]
				},
				{
					"name": "ExtendedPositiveTesting_WithOptionalParameters",
					"item": [
						{
							"name": "ValidSpecialCharacters",
							"item": [
								{
									"name": "Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForgroupId = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForgroupId \"+guidForgroupId);\r",
													"pm.collectionVariables.set(\"guidForgroupId\", guidForgroupId);\r",
													"\r",
													"var emojiGroupName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"console.log(\"generated emojiGroupName \"+emojiGroupName);\r",
													"pm.collectionVariables.set(\"emojiGroupName\", emojiGroupName);\r",
													"\r",
													"var emojiGroupDescription = \"GroupDescription🤮\";\r",
													"console.log(\"generated emojiGroupDescription \"+emojiGroupDescription);\r",
													"pm.collectionVariables.set(\"emojiGroupDescription\", emojiGroupDescription);"
												],
												"type": "text/javascript",
												"id": "9ad30d08-379d-4726-9e3e-d212ef99f95c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedgroupId = pm.variables.replaceIn('{{guidForgroupId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
													"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"groupId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"groupId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "0fd374bc-5726-42e3-8252-1a6e32794914"
											}
										}
									],
									"id": "a2a46cae-d12e-403f-bcb0-838937cc3a9c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupDescription\": \"{{emojiGroupDescription}}\",\r\n    \"groupName\": \"{{emojiGroupName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{guidForgroupId}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.groupDescription).to.eql(pm.collectionVariables.get(\"emojiGroupDescription\"));\r",
													"});"
												],
												"type": "text/javascript",
												"id": "717926fe-810d-41de-9bdb-2565fc483c35"
											}
										}
									],
									"id": "7ed7f66b-b26b-4f73-9ce9-d754aa4cf687",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{guidForgroupId}}"
									},
									"response": []
								},
								{
									"name": "Get_SearchByGroupNameOrDescription_Emoji[TPS-409]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    pm.expect(responseJson.results.length).to.be.gte(1);\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        pm.expect(responseJson.results[i].groupDescription).to.contains(\"🤮\");\r",
													"        pm.expect(responseJson.results[i].contacts).to.exist;\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupName\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupDescription\": {\r",
													"              \"type\": \"null\"\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"groupName\",\r",
													"            \"groupDescription\",\r",
													"            \"metadata\"\r",
													"          ]\r",
													"        },\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupName\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupDescription\": {\r",
													"              \"type\": \"null\"\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"groupName\",\r",
													"            \"groupDescription\",\r",
													"            \"metadata\"\r",
													"          ]\r",
													"        },\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupName\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupDescription\": {\r",
													"              \"type\": \"null\"\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"groupName\",\r",
													"            \"groupDescription\",\r",
													"            \"metadata\"\r",
													"          ]\r",
													"        },\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupName\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupDescription\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"groupName\",\r",
													"            \"groupDescription\",\r",
													"            \"metadata\"\r",
													"          ]\r",
													"        },\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupName\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"groupDescription\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"groupName\",\r",
													"            \"groupDescription\",\r",
													"            \"metadata\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test.skip('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "67ded3c2-3b6c-463e-8c04-229affa493d9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"searchItem\", \"GroupDescription🤮\");"
												],
												"type": "text/javascript",
												"id": "3d12c5f6-9b90-45f7-8063-95000bed5272"
											}
										}
									],
									"id": "8fb28118-96f4-47cb-a82e-10740860fdd0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?search={{searchItem}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"groups",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "{{searchItem}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "8a213a31-0404-40da-81d9-12bef2c48486"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Search",
									"item": [
										{
											"name": "Get_SearchByGroupNameOrDescription_1char[TPS-409]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"Search should be between 2 and 1000 characters\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"invalid_search_term\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "41898115-73ef-4221-a3d4-6e577757e068"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchItem\", \"g\");"
														],
														"type": "text/javascript",
														"id": "7a07c25e-70c9-43ec-b62c-190fcf027d3e"
													}
												}
											],
											"id": "e168d35a-2b81-455b-bc21-c14e62d0744d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?search={{searchItem}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"groups",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchItem}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByGroupNameOrDescription_1001char[TPS-409]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"Search should be between 2 and 1000 characters\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"invalid_search_term\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "5b0cbab6-3e01-4d3c-b646-aa0b85375fd7"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var groupDescription = \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\r",
															"pm.collectionVariables.set(\"searchItemLarge\", groupDescription);"
														],
														"type": "text/javascript",
														"id": "1a738409-2755-4517-a35a-b5cdef0bd487"
													}
												}
											],
											"id": "c2dad1f5-b2a4-4b8c-98e4-f3f3f848c313",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?search={{searchItemLarge}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"groups",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchItemLarge}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByGroupNameOrDescription_2char[TPS-409]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    pm.expect(responseJson.results.length).to.be.gte(1);\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect( responseJson.results[i].groupDescription.includes(\"gr\") || responseJson.results[i].groupName.includes(\"gr\") ).to.be.true;\r",
															"        pm.expect(responseJson.results[i].contacts).to.exist;\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test.skip('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "bc3ef30f-850a-4b65-814c-c396fdb925e5"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchItem\", \"gr\");//"
														],
														"type": "text/javascript",
														"id": "80a65c47-d201-4230-91a1-4414a45367ba"
													}
												}
											],
											"id": "5a014099-1bc8-4bfe-8109-44b4fe6a7888",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?search={{searchItem}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"groups",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchItem}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchBySpecificGroupName[TPS-409]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    pm.expect(responseJson.results.length).to.be.eql(1);\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].groupName).to.eql(pm.collectionVariables.get(\"searchItem\"));\r",
															"        pm.expect(responseJson.results[i].contacts).to.exist;\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test.skip('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "1a11038a-6160-419c-a656-03485b8bf82a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchItem\", \"TestGroupName\");//specific group name from Create "
														],
														"type": "text/javascript",
														"id": "c58861f3-df78-493b-96d3-7eebea2d9e3c"
													}
												}
											],
											"id": "2bf6f602-c40c-4d45-8a03-b4fa62dfb873",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?search={{searchItem}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"groups",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchItem}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchBySpecificGroupNameNonExisting[TPS-409]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check no results\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test.skip('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "3820534a-a46e-4190-af10-0b18d54a4711"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"searchItem\", \"TestGroupName\");//specific group name from Create "
														],
														"type": "text/javascript",
														"id": "e46fb08f-4a94-4d56-9b92-baf2e52cf2f0"
													}
												}
											],
											"id": "09f4b617-96a3-41e5-a28d-9c54437f07a2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?search={{searchItem}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"groups",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchItem}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByGroupDescription_1000char[TPS-409]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"var expectedDescription = pm.collectionVariables.set(\"searchItemLarge\");\r",
															"\r",
															"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    pm.expect(responseJson.results.length).to.be.gte(1);\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].groupDescription).to.contains(expectedDescription);\r",
															"        pm.expect(responseJson.results[i].contacts).to.exist;\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"null\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        },\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupName\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"groupDescription\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"groupName\",\r",
															"            \"groupDescription\",\r",
															"            \"metadata\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test.skip('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "52f236db-4b66-45ce-841e-b08795b1c0c0"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var groupDescription = \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\r",
															"pm.collectionVariables.set(\"searchItemLarge\", groupDescription);"
														],
														"type": "text/javascript",
														"id": "52b7b2ee-1e70-4562-b95b-ad65d12cb2a7"
													}
												}
											],
											"id": "a0055a7c-23a0-4a49-850f-df93a6b970e5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?search={{searchItemLarge}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"groups",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchItemLarge}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "be7e4747-5603-4004-9396-0bff13558ca3"
								}
							],
							"id": "e51354ef-b3dd-4afc-8fea-224fa73a683c"
						},
						{
							"name": "RequestBodyParameters",
							"item": [
								{
									"name": "Create_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var guidForgroupId = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForgroupId \"+guidForgroupId);\r",
													"pm.collectionVariables.set(\"guidForgroupId\", guidForgroupId);\r",
													"\r",
													"var newOptionalGroupName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"console.log(\"generated newOptionalGroupName \"+newOptionalGroupName);\r",
													"pm.collectionVariables.set(\"newOptionalGroupName\", newOptionalGroupName);\r",
													"\r",
													"var newOptionalGroupDescription = pm.variables.replaceIn('{{$randomFirstName}}');\r",
													"console.log(\"generated newOptionalGroupDescription \"+newOptionalGroupDescription);\r",
													"pm.collectionVariables.set(\"newOptionalGroupDescription\", newOptionalGroupDescription);"
												],
												"type": "text/javascript",
												"id": "0ee83bd0-56ea-49b3-b048-01b96eb6aae8"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedgroupId = pm.variables.replaceIn('{{guidForgroupId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
													"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"groupId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"groupId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "983843ed-d9a4-42da-825a-e7b266f21e2a"
											}
										}
									],
									"id": "0866b92e-02b0-4621-9434-a7df19c78dbd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupDescription\": \"{{newOptionalGroupDescription}}\",\r\n    \"groupName\": \"{{newOptionalGroupName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{guidForgroupId}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check optional fields\", function () {\r",
													"    pm.expect(responseJson.groupName).to.eql(pm.collectionVariables.get(\"newOptionalGroupName\"));\r",
													"    pm.expect(responseJson.groupDescription).to.eql(pm.collectionVariables.get(\"newOptionalGroupDescription\"));\r",
													"});"
												],
												"type": "text/javascript",
												"id": "73e93702-c283-475f-833e-24b1e76e3f21"
											}
										}
									],
									"id": "e8c07a00-d17c-4e52-b5a3-152b25878c79",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{guidForgroupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_Description",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.collectionVariables.get(\"guidForgroupId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"    pm.collectionVariables.set(\"groupName_OptionalFields\", res.json().groupName);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var updatedDescriptionByPatch = \"updatedDescriptionByPatch\" + pm.variables.replaceIn('{{$timestamp}}');\r",
													"console.log(\"generated updatedDescriptionByPatch \"+updatedDescriptionByPatch);\r",
													"pm.collectionVariables.set(\"updatedDescriptionByPatch\", updatedDescriptionByPatch);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "aed11da9-2b79-4f40-ab31-31ccdcef51c1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedgroupId = pm.variables.replaceIn('{{guidForgroupId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
													"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"groupId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"groupId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript",
												"id": "798d55a3-06e1-401d-b4cd-a7bfd35db948"
											}
										}
									],
									"id": "999a2e12-91e5-43cc-829f-f24ee9c365ba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"groupName\": \"{{groupName_OptionalFields}}\",\r\n    \"groupDescription\": \"{{updatedDescriptionByPatch}}\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{guidForgroupId}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var updatedDescriptionByPatch = pm.collectionVariables.replaceIn('{{updatedDescriptionByPatch}}');\r",
													"console.log(\"obtained updatedDescriptionByPatch is: \"+updatedDescriptionByPatch)\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the group\", function () {\r",
													"    pm.expect(responseJson.groupDescription).to.eql(updatedDescriptionByPatch);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "ceaaa2fd-3e2a-4b4d-8e86-e797e2da4b51"
											}
										}
									],
									"id": "7bbcdedb-4453-490f-8521-9aa611e92b27",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{guidForgroupId}}"
									},
									"response": []
								}
							],
							"id": "32535774-238b-479d-a636-e44c95d7b9a0"
						},
						{
							"name": "Other",
							"item": [
								{
									"name": "CreateWithoutID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Generating vars:\r",
													"var generatedGroupNameWithoutID = \"generatedGroupNameWithoutID\" + pm.variables.replaceIn('{{$timestamp}}');\r",
													"console.log(\"generated generatedGroupNameWithoutID \"+generatedGroupNameWithoutID);\r",
													"pm.collectionVariables.set(\"generatedGroupNameWithoutID\", generatedGroupNameWithoutID);"
												],
												"type": "text/javascript",
												"id": "cad61c38-4ae5-4809-bd42-ee8245ad8689"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedgroupId = pm.variables.replaceIn('{{groupId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"groupId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"groupId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"pm.collectionVariables.set(\"generatedgroupId\", responseJson.groupId);"
												],
												"type": "text/javascript",
												"id": "a33a144d-8798-4f4b-bd2d-78004e118d66"
											}
										}
									],
									"id": "e6b3bd61-6548-4915-9ded-fba0b1e9d375",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupName\": \"{{generatedGroupNameWithoutID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups"
									},
									"response": []
								},
								{
									"name": "GetCreateWithoutID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedGeneratedGroupNameWithoutID = pm.variables.replaceIn('{{generatedGroupNameWithoutID}}');\r",
													"var expectedgroupId = pm.variables.replaceIn('{{generatedgroupId}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
													"    pm.expect(responseJson.id).to.eql(expectedgroupId);\r",
													"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
													"    pm.expect(responseJson.groupName).to.eql(expectedGeneratedGroupNameWithoutID);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"groupName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"groupDescription\": {\r",
													"      \"type\": \"null\"\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"groupName\",\r",
													"    \"groupDescription\",\r",
													"    \"metadata\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "15e2c15d-8001-4f4b-8408-9df80859d2de"
											}
										}
									],
									"id": "897d9bfe-b345-4d85-a9ee-cb00b6b1b49e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{generatedgroupId}}"
									},
									"response": []
								}
							],
							"id": "e82cad62-772e-41cb-a1bb-b1d072ce94cd"
						}
					],
					"id": "ec683515-96b1-4610-b531-67927f71a872",
					"description": "Positive tests based on: optional parameters and extra functionality\n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "c9b36ea4-d471-402e-89a5-6a700e141fcb"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								],
								"id": "7cd35d5b-e8db-4455-9272-76ec2c3ff8dd"
							}
						}
					]
				},
				{
					"name": "NegativeTesting_WithValidInput",
					"item": [
						{
							"name": "NonExisting",
							"item": [
								{
									"name": "GET_NonExistingGroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "84245dd3-a141-4aa6-9de1-906c1387cc16"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested group could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "ca7987be-ad71-4928-9acc-8318248c5365"
											}
										}
									],
									"id": "a66551dd-3973-44a9-8a05-8f91c7e8fd8f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "Patch_NonExistingGroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d3ea48c3-13de-4c37-96a7-c330c699c9b1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested group could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "01962e30-8c34-43a7-a4b8-522073397c5b"
											}
										}
									],
									"id": "eb083da1-d322-4c17-8429-cc88cdacb9b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": \"{{groupNameUpdated}}\"\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "GET_NonExistingAccountAndgroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "227fbecd-1287-47ff-9864-13ab176a01ba"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 Not Found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested group could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "da40038c-997f-4b3e-bc30-4190089e499f"
											}
										}
									],
									"id": "307065a6-3163-422c-9c20-78efb180ace7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/1bdf73c0-9dc1-44de-8699-8e26393a0777/groups/1bdf73c0-9dc1-44de-8699-8e26393a0777"
									},
									"response": []
								},
								{
									"name": "Delete_NonExisting",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "eddcad23-5537-496f-9992-0a208a4115f7"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 204 NoContent\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "5a95b30a-6ac5-4199-84e8-7b3c4daff61d"
											}
										}
									],
									"id": "acf882c8-9960-498d-bc42-0002137e8486",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								}
							],
							"id": "3e7f2f9e-898a-461e-b033-dd848a7d2460"
						},
						{
							"name": "Duplicate",
							"item": [
								{
									"name": "Create_WithSameID[TPS-431]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "1b72aee5-232e-4b44-b304-846d58c155c1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var actualGroupID = jsonData.groupId;\r",
													"var actualGroupName = pm.collectionVariables.get(\"newOptionalGroupName\");\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A group with the id \"+actualGroupID+\" or group name '\"+actualGroupName+\"' already exists. You can use patch in order to update it.\";\r",
													"console.log(\"expectedErrorMessage\\n\"+expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_exists\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "c2edfc81-bae9-414f-b187-d7f79f579f2b"
											}
										}
									],
									"id": "330e5edb-0552-4de4-b89e-bc3e8654450a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupDescription\": \"{{newOptionalGroupDescription}}\",\r\n    \"groupName\": \"{{newOptionalGroupName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Create_WithSameGroupName[TPS-431]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "50ba9ee8-6d12-459f-afa7-fb9081e4e7f0"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var actualGroupID = jsonData.groupId;\r",
													"var actualGroupName = pm.collectionVariables.get(\"newOptionalGroupName\");\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A group with the id \"+actualGroupID+\" or group name '\"+actualGroupName+\"' already exists. You can use patch in order to update it.\";\r",
													"console.log(\"expectedErrorMessage\\n\"+expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_exists\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "b1f5ca64-1518-4c83-aa0e-3140e9c49bdb"
											}
										}
									],
									"id": "db059e2b-8d70-408c-8a9b-e468f496760d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupName\": \"{{newOptionalGroupName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups"
									},
									"response": []
								},
								{
									"name": "Patch_WithSameGroupName[TPS-431]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript",
												"id": "bf639d15-6c51-4e10-b654-96d649d933ab"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var actualGroupID = jsonData.groupId;\r",
													"var actualGroupName = pm.collectionVariables.get(\"newOptionalGroupName\");\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"A group with the id \"+actualGroupID+\" or group name '\"+actualGroupName+\"' already exists. You can use patch in order to update it.\";\r",
													"console.log(\"expectedErrorMessage\\n\"+expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_exists\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "51ab4014-0a8b-4ad8-915e-604c8b5fe758"
											}
										}
									],
									"id": "bfddbaab-0f6a-48ce-bb67-472602bb183b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": \"{{newOptionalGroupName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								}
							],
							"id": "1abd6eea-9ce3-4ed5-b00f-8fc75b2dd261"
						},
						{
							"name": "UnAuthorized",
							"item": [
								{
									"name": "Create_Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "616aac71-3e9c-4614-a31f-dc82237406ae"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to missing subscription key. Make sure to include subscription key when making requests to an API.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "0ab66809-c2b2-4adc-982b-3f75a5cecdbb"
											}
										}
									],
									"id": "46beab16-a0f6-4f09-bc8e-c63143069330",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								}
							],
							"id": "c50be082-5d96-472f-a8a0-c9167c270ae9"
						}
					],
					"id": "98e67ab4-f288-4819-8c37-4857a8892865",
					"description": "Example:\n\nvalid user input - example: try to add an already existing item (with same ID)\n\nEndFragment"
				},
				{
					"name": "NegativeTesting_WithInvalidInput",
					"item": [
						{
							"name": "LengthValidation",
							"item": [
								{
									"name": "Create_OptionalFields_CheckMaxLengthForGroupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "bd2a3706-a12a-449a-950e-e465bb7d58e4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group name should not be longer than 150 characters\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_name_too_long\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "efa7da8d-b5ed-420a-9bb1-1827186fd322"
											}
										}
									],
									"id": "c1bb94c6-25bb-4cbb-ab9a-83e5661bdd7d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupName\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_CheckMaxLengthForGroupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "48be125e-a5b3-4b99-9020-ccbfb0bb2d88"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group name should not be longer than 150 characters\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_name_too_long\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "5bdb8424-a31b-45ca-920e-04722392bd95"
											}
										}
									],
									"id": "1ce215c8-e7fa-472a-847b-9df668364857",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Create_OptionalFields_CheckMaxLengthForGroupDescription",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "f1671134-62c5-4d7d-828a-c2e700f74829"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group description should not be longer than 1000 characters\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_description_too_long\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "1caf60ae-516f-44dd-9214-59eb48e63481"
											}
										}
									],
									"id": "63e76e75-a110-4068-b941-3067bf4013d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupName\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    \"groupDescription\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_CheckMaxLengthForGroupDescription",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4404a8c0-9fc0-4da2-b0fe-523e320e94c4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group description should not be longer than 1000 characters\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_description_too_long\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "57a55147-4e61-48bd-84e8-e49549f6c16b"
											}
										}
									],
									"id": "257dc611-1483-4f3a-bed5-c15c2f9b545c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    \"groupDescription\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								}
							],
							"id": "6a6d3388-b008-406f-ae63-0909d3f5b523"
						},
						{
							"name": "Required",
							"item": [
								{
									"name": "Headers",
									"item": [
										{
											"name": "GetWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "bc7633f4-bf25-4480-b1a8-429afbe06285"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "c9c60d15-8bc9-403e-8518-907f0b0d685c"
													}
												}
											],
											"id": "c0702c67-d5de-4a8c-94ea-591b1a2ded80",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
											},
											"response": []
										},
										{
											"name": "GetAllGroups_WithoutProductHeader",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "fecc91eb-dad7-4658-9f7f-5f202687d4e5"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "08ec1a02-c6b0-4a6b-8838-91d5a307ecb0"
													}
												}
											],
											"id": "821577c6-e304-4e1f-8a10-e7e3719d7698",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/"
											},
											"response": []
										},
										{
											"name": "CreateWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "2f799678-1d66-4d26-ac1f-7e0d0e0d24d6"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "eabb3562-1f38-44d6-9f4c-5c3c91759e19"
													}
												}
											],
											"id": "842a3c20-415d-4906-8ba9-c84d44052f02",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/"
											},
											"response": []
										},
										{
											"name": "CreateWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "2fff93a9-9931-4e51-b04c-4a6e2a4c3066"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "2ebfd97b-b129-4dcb-9b4e-40dd46b3245f"
													}
												}
											],
											"id": "94b61a84-2969-4d4f-82f0-f556d9bee9f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/"
											},
											"response": []
										},
										{
											"name": "PatchWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "345f1fdb-1e95-48a5-87e7-28206181cec9"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "c473da55-c05e-4de0-910d-d0f14d9f63ed"
													}
												}
											],
											"id": "9ca68d97-72ef-41ca-beec-0a9bf04e01a8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
											},
											"response": []
										},
										{
											"name": "PatchWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ea34bcb4-bd2d-4bed-a1a9-b22f8df63498"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "ff3a6d60-67c7-457d-8d2a-fb752a8c9830"
													}
												}
											],
											"id": "0d454c54-bcf3-43f3-8007-25291304f208",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "b950276b-8791-4c30-a0a3-1ca43a2062bb"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "149bb997-897d-4ea4-9823-8af004ee84c2"
													}
												}
											],
											"id": "a47482b2-877c-4904-a777-1ea8179ff18d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "db9dd39a-0ea4-4c35-b457-cb1aa0a39517"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJson  = pm.response.text();\r",
															"console.log(responseJson.length);\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 204 No Content\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check empty response body: \"+pm.info.requestName, function () {\r",
															"   pm.expect(responseJson.length).to.be.eq(0);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "b7d2ff0e-fdd5-4a05-8238-7b77bb1b0945"
													}
												}
											],
											"id": "1f10c388-d444-4ca1-a2c1-b62474950ba6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/beff82d3-08ff-42b0-8a61-0a1881262e66"
											},
											"response": []
										}
									],
									"id": "14027d87-ebb6-43a2-b58e-c9d0af55ec73"
								},
								{
									"name": "Create_RequiredField_groupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a94367f6-360c-43bf-9aa0-cca8e601e231"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"Group name should not be null or empty\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"group_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "89424945-cc61-4559-9168-84c3130db7af"
											}
										}
									],
									"id": "7a9fc11f-51ad-4346-bb09-1eea3267949a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{guidForgroupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "70ba4da1-2286-4d28-84d8-a78a87d67f8f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "c56eb56a-14bd-4269-9caf-7201656713b6"
											}
										}
									],
									"id": "05b07d78-70c7-49bc-b138-2f0def32ac93",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_RequiredGroupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b7bb9371-57f5-4a99-9c98-e9dfbe79dc8c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"Group name should not be null or empty\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"group_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "d40e298c-d5ee-4358-ab1f-6d814c2d8d59"
											}
										}
									],
									"id": "d1e6512d-d10d-4122-89fc-9b98dc0d7e05",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								}
							],
							"id": "891b3b26-e31e-4ce8-a0ce-506a50b6d45b"
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "IllegalCharacters",
									"item": [],
									"id": "fb08252f-0b8e-49f3-a0b6-438e4eca3414"
								},
								{
									"name": "GET_Invalidgroup_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "c13a2144-6f4d-4631-9466-47eaa15a2799"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given group id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "a9f2a3ed-7494-4c0f-9c31-d535e0cbe396"
											}
										}
									],
									"id": "535d60ce-6bdb-4b40-8866-bc68ce7f11a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID"
									},
									"response": []
								},
								{
									"name": "Patch_Invalidgroup_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "8fe462ce-b741-4b09-aea3-e83b08d56bb2"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given group id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "0ff7e1d0-3d94-4f3e-a857-b08091d48aff"
											}
										}
									],
									"id": "09a729a6-c673-4911-9e47-a1c9e3919155",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Create_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "377301b4-1996-40a4-a461-12285a671ffa"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "047a92fa-f3e5-498b-8731-a09f82ae97a7"
											}
										}
									],
									"id": "00e070a6-7d61-4298-ab30-8dae4664aa6a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/groups/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e74ff45c-d9d3-46aa-92b6-324738f4bf94"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "67f918dd-9e56-43c5-9479-a036aab2ef7e"
											}
										}
									],
									"id": "a6eab28e-6b1a-4bcc-8dbf-108600622c97",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/groups/NotGUID!"
									},
									"response": []
								},
								{
									"name": "GET_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "efa623e4-5a39-4db9-a73f-d7178b64b3d4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "f20f8904-c574-43fe-848b-32e882295f3b"
											}
										}
									],
									"id": "887beb58-2b0f-4699-9f52-5ab61a101220",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/NotGUID/groups/NotGUID"
									},
									"response": []
								},
								{
									"name": "GET_Groups_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "9b92e28b-8cb1-47ba-951c-d5b67bb94767"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "1b02d63e-49d9-4a2b-bb53-d09b0be4a695"
											}
										}
									],
									"id": "498e3420-d541-4cf3-8fa3-030673131f54",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/NotGUID/groups"
									},
									"response": []
								},
								{
									"name": "Create_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "ee89c6a7-60a9-4c48-b8b5-d0afa295053d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "66b5de93-617c-46c2-b0e3-ddc9cc0e7f6b"
											}
										}
									],
									"id": "1b76f4d1-a48a-4e9f-8bf5-1b8205b43e99",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "e4be5313-b06e-4973-bbfa-6b0787c76af2"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "031e066d-17e6-48f5-bc50-c215758a6332"
											}
										}
									],
									"id": "6a02e300-cba5-4aa8-a285-e1c781c3ad4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Create_Invalidgroup_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript",
												"id": "1cf07e1c-caac-4f00-b25b-beb6d8e909cf"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given group id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_id_is_not_guid\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "3670098c-ffe0-47e7-b17f-711beeb045c7"
											}
										}
									],
									"id": "0355e7b8-d362-436a-adc8-2cdb33c74cda",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID"
									},
									"response": []
								},
								{
									"name": "Create_NullGroupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "7f4a6a28-f173-40ff-acdf-84b675c0ec14"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group name should not be null or empty\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_empty\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "eeb0be76-bfc6-46ef-9557-357c55ace0d5"
											}
										}
									],
									"id": "665a1c0e-6ead-455c-9601-ab6857362186",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupName\": null\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups"
									},
									"response": []
								},
								{
									"name": "Create_EmptyGroupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "1fe0b6f1-a7c0-4185-9be2-c1266f42b723"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group name should not be null or empty\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_empty\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "d146af77-0638-4040-b38e-eac72abbfadf"
											}
										}
									],
									"id": "5f53a72b-bce9-4d5d-b84b-9ae87ec8af62",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupName\": \"\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups"
									},
									"response": []
								},
								{
									"name": "Patch_NullGroupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "e9814677-adee-48cc-b1ad-d48019bb73f3"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group name should not be null or empty\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_empty\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "be3c998c-1522-456c-b34e-d2487f8754e5"
											}
										}
									],
									"id": "8f50f22a-09b1-4607-80bf-f32151cb0816",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": null\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_EmptyGroupName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "9351adf2-9a9b-40ff-9cc5-4a49dead6f8a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Group name should not be null or empty\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_empty\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);"
												],
												"type": "text/javascript",
												"id": "f933c3a2-f523-4491-b851-24d5027a196a"
											}
										}
									],
									"id": "32072459-9793-4287-a83e-005676176ba9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": \"\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_Null[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d1f40f52-8eca-4f2f-9497-3b8ad88ad059"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "e87e4ce3-112d-43a9-9e29-9ae20eb3913f"
											}
										}
									],
									"id": "11be4977-cf2b-4cd4-9a12-1617c67d9404",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"null\",\r\n    \"groupName\": \"{{groupName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_EmptyString[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4002e9a8-edb7-4cac-94fc-45bb821d491a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript",
												"id": "5e01db62-a89d-4bee-a48f-d0167a3923e1"
											}
										}
									],
									"id": "a575ac67-07d1-4d4d-addb-6459cb313cce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"\",\r\n    \"groupName\": \"{{groupName}}\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyChar[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2c11acf0-3fac-46db-99da-a1d0e5700743"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript",
												"id": "d3f9089b-e67c-43fc-b7cf-dfee3736410b"
											}
										}
									],
									"id": "573ada14-c0ff-4d08-8176-7fefe3522b47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"g\",\r\n    \"groupName\": \"{{groupName}}\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4f5fc9b6-8ade-45c8-bb3e-04ac416f6d1e"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "764e835e-32dc-4ba4-9a58-32ad4fea7572"
											}
										}
									],
									"id": "47809f55-7a96-4689-8713-391049890354",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"groupName\": \"{{groupName}}\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								},
								{
									"name": "Delete_Invalidgroup_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d1c2f9ba-d9bc-42a5-a855-1c1b8e470f19"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given group id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "f0d13d30-38ea-4241-91c2-9605ea1518b7"
											}
										}
									],
									"id": "3512112d-5a07-4a84-8b76-e082846a05ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID"
									},
									"response": []
								},
								{
									"name": "Delete_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "8d1aea6e-c46b-442f-b1b2-ad6ea641b622"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "27459459-0ea1-4e00-b163-dc0d702828ad"
											}
										}
									],
									"id": "be54a78d-e4b0-46f6-96a1-50485a857264",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/invalidAccount/groups/NotGUID"
									},
									"response": []
								},
								{
									"name": "Get_ByInvalidParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
													"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 30 maximum\", function () {\r",
													"    pm.expect(responseJson.results.length).to.be.lte(30);\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"id": "0fb9a776-b590-423e-9ec2-07655aa3b02a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "be398363-d148-47dd-af95-9570e5a8a1b3"
											}
										}
									],
									"id": "d29600d3-c61e-408b-a773-02ee6d4b7d2c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/groups/?someInvalidParam=x[TODO]",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"groups",
												""
											],
											"query": [
												{
													"key": "someInvalidParam",
													"value": "x[TODO]"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "6323111f-2a6a-4b0a-bd0d-e3bb451c11d7"
						},
						{
							"name": "InvalidAuthorization",
							"item": [
								{
									"name": "Create_Unauthorized_InvalidAuthorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "1896dc40-23a9-478b-8163-8431c07a08ad"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "8265a411-cf17-4fde-9bef-1e412afd13cd"
											}
										}
									],
									"id": "11374bb3-f882-4b33-8a33-e52767ba2692",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "cvcv",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"groupName\": \"{{groupName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								}
							],
							"id": "5c5d87dc-41d8-45bc-9734-e551bcfc9d4d"
						},
						{
							"name": "MultipleErrors",
							"item": [
								{
									"name": "Patch_OptionalFields_Check2Errors_MaxLengthForGroupNameAndGroupDescription",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "b13d0d6e-5ec3-48f0-b87a-879ae30654aa"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code set1\", function() {\r",
													"var expectedErrorMessage = \"Group name should not be longer than 150 characters\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_name_too_long\");\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code set2\", function() {\r",
													"var expectedErrorMessage = \"Group description should not be longer than 1000 characters\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[1].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[1].code).to.eql(\"group_description_too_long\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "c06ac19a-4a02-4381-97cc-330d0a8c0d11"
											}
										}
									],
									"id": "24381362-2202-4d66-82ca-1d009a5a3c31",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupName\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\r\n    \"groupDescription\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
									},
									"response": []
								}
							],
							"id": "0c6a3a24-23c1-4fb0-9872-c51c4c0bd764"
						},
						{
							"name": "QueryStrings",
							"item": [],
							"id": "8edc337d-0e20-401e-9b3d-c9e77667560b"
						}
					],
					"id": "bd0dd8ed-f1a2-4245-903a-79d84f5a3623",
					"description": "invalid input (trying to add a property which is null or other invalid input - for example a NULL msisdn\n\nEndFragment"
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "GetAllGroups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 30 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.be.lte(30);\r",
											"\r",
											"});\r",
											"//Setting continuationToken var:\r",
											"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript",
										"id": "0781b471-65e4-4ad3-a971-53d06c4dc226"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//TODO maybe add precondition: if not 16 groups => create min 16"
										],
										"type": "text/javascript",
										"id": "55ecf3b0-cc04-4895-b6f6-b6cd626c3b25"
									}
								}
							],
							"id": "f581aee7-5b52-4799-b17e-585c24d781c5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/"
							},
							"response": []
						},
						{
							"name": "GetAllGroups_RetrieveMore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"var actualContinuationHeader  = pm.request.headers.get(\"ContinuationToken\")\r",
											"console.log(\"actualContinuationHeader:\"+actualContinuationHeader);\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is not 0\", function () {\r",
											"    pm.expect(responseJson.results.length).to.not.eql(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected header of ContinuationToken\", function () {\r",
											"    pm.expect(pm.collectionVariables.get(\"continuationToken\")).to.eql(actualContinuationHeader);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "1486f2da-829c-4d16-8fd9-c35dfdc5877c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var contToken = pm.collectionVariables.get(\"continuationToken\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"key: 'ContinuationToken',\r",
											"value: contToken\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3d56c844-6580-4775-8373-cdc154d48037"
									}
								}
							],
							"id": "de423f22-260e-4202-9a9f-db1ba3a9dcbf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/"
							},
							"response": []
						},
						{
							"name": "GetAllGroups_NotExistingContinuationToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 30 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.be.lte(30);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "a229fc4d-c203-426e-9173-700ebe3809a0"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var contToken = \"notExsting\";\r",
											"\r",
											"pm.request.headers.add({\r",
											"key: 'ContinuationToken',\r",
											"value: contToken\r",
											"});"
										],
										"type": "text/javascript",
										"id": "ffdeda36-f6a9-4f3a-ade7-9777f74b6c7f"
									}
								}
							],
							"id": "279b5229-2995-4886-92fb-de851921ecf3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/"
							},
							"response": []
						}
					],
					"id": "bf3be50e-4855-44f9-a8b7-4f82c0d149e1",
					"description": "DestructiveTesting? intentionally attempt to break the API to check its robustness  \nSecurity, authorization, and permission tests?"
				}
			],
			"id": "02439150-b9ac-47ec-a96b-ba72f18c0311"
		},
		{
			"name": "ContactsAndGroups",
			"item": [
				{
					"name": "BasicCRUD_SMOKE",
					"item": [
						{
							"name": "CreateContact1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3c7b605-1d7a-4271-a661-8c6d373eef1d",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"contactId1\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted contact with contactId: \" + pm.collectionVariables.get(\"contactId1\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "645c0491-6383-4e07-aee8-d9e020558891",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId1}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "960aef96-e699-4122-952a-da862f2b5610",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn1}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId1}}"
							},
							"response": []
						},
						{
							"name": "CreateContact2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3c7b605-1d7a-4271-a661-8c6d373eef1d",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"contactId2\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted contact with contactId: \" + pm.collectionVariables.get(\"contactId2\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "645c0491-6383-4e07-aee8-d9e020558891",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId2}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9c17c3b6-3351-4289-bc6e-8a4be01c8ef4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn2}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId2}}"
							},
							"response": []
						},
						{
							"name": "CreateContact3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3c7b605-1d7a-4271-a661-8c6d373eef1d",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"contactId3\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted contact with contactId: \" + pm.collectionVariables.get(\"contactId3\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "645c0491-6383-4e07-aee8-d9e020558891",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId3}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b8340ff6-361c-4a22-bb32-a6a3169a6e93",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"+40749200244\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId3}}"
							},
							"response": []
						},
						{
							"name": "CreateGroupWithContacts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e564b38-aada-415c-8423-9108b402dccc",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.collectionVariables.get(\"groupIdWithContacts\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted group with groupId: \" + pm.collectionVariables.get(\"groupIdWithContacts\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "823d3ac5-faef-4778-b278-c7888921624f",
										"exec": [
											"var expectedgroupId = pm.variables.replaceIn('{{groupIdWithContacts}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
											"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"groupId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"groupId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a7a459b2-57b0-4d94-8c79-2d5389833c57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"groupName\":  \"{{groupIdWithContactsName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}"
							},
							"response": []
						},
						{
							"name": "CreateGroupWithoutContacts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e564b38-aada-415c-8423-9108b402dccc",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.collectionVariables.get(\"groupIdWithoutContacts\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted group with groupId: \" + pm.collectionVariables.get(\"groupIdWithoutContacts\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "823d3ac5-faef-4778-b278-c7888921624f",
										"exec": [
											"var expectedgroupId = pm.variables.replaceIn('{{groupIdWithoutContacts}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the groupId is the expected one\", function () {\r",
											"    pm.expect(responseJson.groupId).to.eql(expectedgroupId);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"groupId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"groupId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0f75da75-014e-441a-964a-b779031cb1e8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"groupName\":  \"{{groupIdWithoutContactsName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithoutContacts}}"
							},
							"response": []
						},
						{
							"name": "PatchContact1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "252a75bf-a860-4bab-97e7-ae7ceff38660",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1acd29d4-ced1-48b2-8de8-3518cefba31f",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId1}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "28bdde2e-20dc-4c49-ae55-721a2ca2c769",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId1}}"
							},
							"response": []
						},
						{
							"name": "Get_PatchContact1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6be5a8b3-c0ad-4bf8-9449-7de4d292c4d1",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId1}}');\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the group\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(1);\r",
											"    pm.expect(responseJson.results[0].id).to.eql(expectedContactID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "33e658cc-e52f-4e2d-b8b6-82aa163c96d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts"
							},
							"response": []
						},
						{
							"name": "PatchContact2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "252a75bf-a860-4bab-97e7-ae7ceff38660",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1acd29d4-ced1-48b2-8de8-3518cefba31f",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId2}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c3a1a82b-88e6-47f9-93ac-b1c9a14604f0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId2}}"
							},
							"response": []
						},
						{
							"name": "Get_PatchContact2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6be5a8b3-c0ad-4bf8-9449-7de4d292c4d1",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId2}}');\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the group\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(2);\r",
											"    pm.expect(responseJson.results[1].id).to.eql(expectedContactID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "496e7aa9-8965-486f-a32a-d94c290bd621",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts"
							},
							"response": []
						},
						{
							"name": "PatchContact3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "252a75bf-a860-4bab-97e7-ae7ceff38660",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1acd29d4-ced1-48b2-8de8-3518cefba31f",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId3}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6833203a-d4ab-496d-a654-20157cd7ac82",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId3}}"
							},
							"response": []
						},
						{
							"name": "Get_PatchContact3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6be5a8b3-c0ad-4bf8-9449-7de4d292c4d1",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId3}}');\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that PATCH request updated the group\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(3);\r",
											"    pm.expect(responseJson.results[2].id).to.eql(expectedContactID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c09b4ed5-5bea-490b-a3f7-bfacbf1fc4c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts"
							},
							"response": []
						},
						{
							"name": "DeleteContact3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "96e90ace-c322-4e83-9665-cc063777b4ba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "67f93993-8e70-4328-a847-c40481a90fa3",
										"exec": [
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"address\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"msisdn\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"msisdn\"\r",
											"      ]\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    },\r",
											"    \"properties\": {\r",
											"      \"type\": \"object\"\r",
											"    },\r",
											"    \"groupsInformation\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"address\",\r",
											"    \"metadata\",\r",
											"    \"properties\",\r",
											"    \"groupsInformation\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"var responseJson = pm.response.json();\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "74f8339b-2c5a-4c25-9c1b-26a57a40a447",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId3}}"
							},
							"response": []
						},
						{
							"name": "Get_DeleteContact3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6be5a8b3-c0ad-4bf8-9449-7de4d292c4d1",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check there are only 2 remaining contacts linked to a group\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0f3904f1-d7d4-4d5c-a677-4c16d78e6422",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts"
							},
							"response": []
						}
					],
					"id": "6b0fdcdf-1403-4f7a-b291-bb6bf4817619",
					"description": "Main functionality of the service - happy paths. Tests can be used as Smoke tests.\n\nStartFragment\n\n- Execute a POST request that creates a resource\n- then execute a GET request to check if it exists\n- then we use a PATCH endpoint to update new data\n- and we again invoke a GET request to validate the new data\n- same for PUT\n- then, we DELETE that resource\n- and we again invoke a GET request to validate that the resource does not exist anymore (inside DELETE request to not fail because of collection test in regards to Status Code - 404 in our case);\n- finally, re-create resource so that we can use it in other tests as an existing testdata.\n    \n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "aeff37e5-c458-4c70-8f98-2c6ef99d4eb9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Request_\"+pm.info.requestName+\"_Test_FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								],
								"id": "eb86e4c6-1215-4408-96af-688b346aa870"
							}
						}
					]
				},
				{
					"name": "NegativeTesting_WithValidInput",
					"item": [
						{
							"name": "NonExisting",
							"item": [
								{
									"name": "GET_NonExistingGroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "124d3751-62f7-4546-9b4f-798ebc6ec49e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9ecedcd4-4f97-4915-a10f-398b9512e262",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested group could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7ee545df-a5c3-4d6f-9973-47af980e8037",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/6ab6c6f2-004a-49a1-a41f-142122db1640/contacts/"
									},
									"response": []
								},
								{
									"name": "PATCH_NonExistingGroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "124d3751-62f7-4546-9b4f-798ebc6ec49e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9ecedcd4-4f97-4915-a10f-398b9512e262",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested group could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8f9f6a11-ac15-4a28-a64e-ac6c94cf4a34",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/6ab6c6f2-004a-49a1-a41f-142122db1640/contacts/{{contactId1}}"
									},
									"response": []
								},
								{
									"name": "Delete_NonExistingGroup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b97f3128-1055-47e3-a2fc-e20001a3f0b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7aae295-e0f9-44a9-be8b-b5c74e85a376",
												"exec": [
													"/*pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 204 NoContent\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"*/\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested group could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_not_found\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "eeaed512-6fd1-406e-aae0-e8c0ae09bc82",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/6ab6c6f2-004a-49a1-a41f-142122db1640/contacts/{{contactId3}}"
									},
									"response": []
								},
								{
									"name": "Patch_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0fb1e0f0-5f7a-4d85-8e82-9ce635426739",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7d7c737-9907-4121-b4ed-1eff76bd6af5",
												"exec": [
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested group could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"group_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9ed8842f-e7c1-403d-b1a4-ccc5dc9e2846",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/6ab6c6f2-004a-49a1-a41f-142122db1640/contacts/{{contactId3}}"
									},
									"response": []
								},
								{
									"name": "Delete_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b97f3128-1055-47e3-a2fc-e20001a3f0b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7aae295-e0f9-44a9-be8b-b5c74e85a376",
												"exec": [
													"/*pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 204 NoContent\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"*/\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "77a47a0d-ed4a-4c9b-9014-29c011edd920",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/6ab6c6f2-004a-49a1-a41f-142122db1640"
									},
									"response": []
								}
							],
							"id": "51fbd318-58f3-428a-9cb7-0c97859ea8cb"
						},
						{
							"name": "UnAuthorized",
							"item": [
								{
									"name": "Get_Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "913bd66b-ef1d-4d64-abe9-3a02384e7001",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aef75444-eacc-4947-a63c-40fbd6d202a2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to missing subscription key. Make sure to include subscription key when making requests to an API.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1c195a3e-ac7e-45ec-bc5c-33da1acceecf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts"
									},
									"response": []
								}
							],
							"id": "b343b5d0-0cd1-4172-9c74-684dec21ad74"
						}
					],
					"id": "fe852399-c882-40ac-9613-85ec30ad36dd",
					"description": "Example:\n\nvalid user input - example: try to add an already existing item (with same ID)\n\nEndFragment"
				},
				{
					"name": "NegativeTesting_WithInvalidInput",
					"item": [
						{
							"name": "Required",
							"item": [
								{
									"name": "Headers",
									"item": [
										{
											"name": "PatchWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "172a6504-ad85-41ca-9445-dfa7991fd616",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "07d15750-9e13-4b53-9734-ee2b4ed75db4",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "33184574-1b6e-408a-a60b-8fda0e83e921",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId1}}"
											},
											"response": []
										},
										{
											"name": "PatchWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fb377c02-e896-47f2-8bfd-b432d29a4399",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "928255ed-f128-4f89-af7c-9f184bc57259",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "49ba555c-07fb-4fd3-b598-443ca4508fa1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId1}}"
											},
											"response": []
										},
										{
											"name": "GetWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "737dc65c-3114-44b1-8738-a4b2d06a848a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "46408b9e-5dd2-4685-b8e4-e40108eb27d1",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2f5da9b2-9cb2-4411-b8fc-9eb8e1d262e4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e97e6d5-70e6-4596-b43b-fac31bd30d16",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eb183c35-efa7-4de8-8882-fff57db7555c",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "bbd9b238-4fd4-412a-9a3a-56ad35867d06",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId1}}"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b61ce346-5956-4bc5-a915-077837a99d68",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "69379797-3bef-4c83-b05f-1359db4e7c0f",
														"exec": [
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"id\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"eTag\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"accountId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"address\": {\r",
															"      \"type\": \"object\",\r",
															"      \"properties\": {\r",
															"        \"msisdn\": {\r",
															"          \"type\": \"string\"\r",
															"        }\r",
															"      },\r",
															"      \"required\": [\r",
															"        \"msisdn\"\r",
															"      ]\r",
															"    },\r",
															"    \"metadata\": {\r",
															"      \"type\": \"object\",\r",
															"      \"properties\": {\r",
															"        \"user\": {\r",
															"          \"type\": \"string\"\r",
															"        },\r",
															"        \"lastUpdatedAt\": {\r",
															"          \"type\": \"string\"\r",
															"        },\r",
															"        \"product\": {\r",
															"          \"type\": \"string\"\r",
															"        }\r",
															"      },\r",
															"      \"required\": [\r",
															"        \"user\",\r",
															"        \"lastUpdatedAt\",\r",
															"        \"product\"\r",
															"      ]\r",
															"    },\r",
															"    \"properties\": {\r",
															"      \"type\": \"object\"\r",
															"    },\r",
															"    \"groupsInformation\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": {}\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"id\",\r",
															"    \"eTag\",\r",
															"    \"accountId\",\r",
															"    \"address\",\r",
															"    \"metadata\",\r",
															"    \"properties\",\r",
															"    \"groupsInformation\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"var responseJson = pm.response.json();\r",
															"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"//Should ignore userHeader and work as normal delete "
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b8d66e30-bdc1-425b-9690-64bbf5d8667e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/{{contactId3}}"
											},
											"response": []
										}
									],
									"id": "b13158bc-3f1c-42c3-90dc-5cc7c2cd90f4"
								}
							],
							"id": "302b2ae7-10dc-4e9b-b174-d8a2c958b8d4"
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "IllegalCharacters",
									"item": [],
									"id": "d6b4e9d9-abe9-4839-b7c1-b2392f3c8784"
								},
								{
									"name": "NotGUID",
									"item": [
										{
											"name": "GET_InvalidGroup_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6e053156-104a-4448-8b19-c8ba4a3c7674",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ccbe7eaf-2ecc-441c-9497-87b385033f01",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given group id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"group_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1154da42-9a53-4fd9-88b8-770f265dd836",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID/contacts"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidContact_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a4fd84c7-ca50-4d3a-9452-7bf26490ecf6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a3fc163-4349-4ecb-9f7d-ed270ca73b33",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "0b5a1fbd-7dcd-475b-899b-931e379997b8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/NotGUID"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidGroup_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a4fd84c7-ca50-4d3a-9452-7bf26490ecf6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a3fc163-4349-4ecb-9f7d-ed270ca73b33",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given group id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"group_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "44bc8e50-f2df-434b-a2d4-0e1a1c8b0b5d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID/contacts/{{contactId3}}"
											},
											"response": []
										},
										{
											"name": "Patch_InvalidContactAndGroup_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a4fd84c7-ca50-4d3a-9452-7bf26490ecf6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a3fc163-4349-4ecb-9f7d-ed270ca73b33",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "999c68d0-2f71-409d-b212-b885716025f1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID/contacts/NotGUID"
											},
											"response": []
										},
										{
											"name": "Delete_InvalidGroup_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a4fd84c7-ca50-4d3a-9452-7bf26490ecf6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a3fc163-4349-4ecb-9f7d-ed270ca73b33",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given group id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"group_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "59d36d01-26b5-4c60-b317-ccd65396afa8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID/contacts/{{contactId3}}"
											},
											"response": []
										},
										{
											"name": "Delete_InvalidContact_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "063f4440-1b0d-4f27-b805-0772f2f79ef5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "708a1f03-32ec-4e34-8111-cc42337ed98d",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1239642d-0f65-4308-8f50-6388f3cacf11",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithContacts}}/contacts/NotGUID"
											},
											"response": []
										},
										{
											"name": "Delete_InvalidContactAndGroup_NotGUID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a4fd84c7-ca50-4d3a-9452-7bf26490ecf6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a3fc163-4349-4ecb-9f7d-ed270ca73b33",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "4c403811-e54d-41d5-a1b0-b2985a594ca7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/NotGUID/contacts/NotGUID"
											},
											"response": []
										}
									],
									"id": "92a6cfb0-f8d9-4e4a-bc43-548c2eac5ece"
								},
								{
									"name": "InvalidAccountID",
									"item": [
										{
											"name": "Patch_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "241b1c42-efc4-4f49-9aef-8327e3b6a7a8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ce53bb87-55a3-4692-a5c4-adda7da039f9",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eb262064-a506-438c-a812-8ec1460233e0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
												},
												"url": "{{hostname}}/v1/accounts/NotGUID!/groups/NotGUID!/contacts/smth"
											},
											"response": []
										},
										{
											"name": "GET_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ad6aa9b2-a01c-4622-8e15-e152c0480421",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8051ae20-d42d-4499-8751-12f3f576a955",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "851b3e2c-9ad0-4573-b39f-f0e4451fb6bb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/NotGUID/groups/NotGUID/contacts"
											},
											"response": []
										},
										{
											"name": "Delete_InvalidAccountID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3298bf3b-7a9b-484a-b288-9fa0466410ad",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a20538f9-4f70-401c-b53f-638f45d095d6",
														"exec": [
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 400 Bad request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "460447aa-6724-4ccb-b1fd-333c4f0ab00c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": "{{hostname}}/v1/accounts/invalidAccount/groups/NotGUID/contacts/smth"
											},
											"response": []
										}
									],
									"id": "a6c59258-163f-492e-a11e-38812fd1e9a4"
								},
								{
									"name": "InvalidEtag",
									"item": [],
									"id": "65381e3d-f939-481d-969f-f65371273ee4"
								},
								{
									"name": "ReservedKeywords",
									"item": [],
									"id": "f4727f23-4301-4b28-8140-0c5a3fe9d419"
								}
							],
							"id": "49ed9982-c770-49a6-b801-39e4cbcd943b"
						},
						{
							"name": "InvalidAuthorization",
							"item": [],
							"id": "ea40bcfe-515f-4572-ad2d-efffcddb1668"
						},
						{
							"name": "MultipleErrors",
							"item": [],
							"id": "24b5e1b9-7eeb-4f4d-9524-63499e39c47c"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Filter",
									"item": [],
									"id": "98a08e02-2993-4634-894b-46f9693ee916"
								}
							],
							"id": "a060d462-c576-4da6-ae41-b64407797ab3"
						}
					],
					"id": "36bec0ab-d92c-4eca-94bb-6a570776e6bc",
					"description": "invalid input (trying to add a property which is null or other invalid input - for example a NULL msisdn\n\nEndFragment"
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "GetAllGroupContacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87d00785-594f-4ede-bf9b-44bb597614d5",
										"exec": [
											"\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(15);\r",
											"\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"__displayName\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"firstName\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastName\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"__displayName\",\r",
											"                \"firstName\",\r",
											"                \"lastName\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"groupId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"groupId\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"groupId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"groupId\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting continuationToken var:\r",
											"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1ae923d-5d2e-4038-9368-3a05f19932ef",
										"exec": [
											"//TODO maybe add precondition: if not 16 contacts => create min 16"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bb920c94-b3e3-474c-870b-907e0eb8d660",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/16937356-48e8-41ed-b0cf-1015d15c200d/groups/D78F52FF-F7EA-4D97-AEB2-0410584D5E2C/contacts/"
							},
							"response": []
						},
						{
							"name": "GetAllGroupContacts RetrieveMore",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ae26f84-1c1d-4302-bd11-cdfb0f52cb5b",
										"exec": [
											"\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check count of returned results is 15 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(15);\r",
											"\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"__displayName\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"firstName\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastName\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"__displayName\",\r",
											"                \"firstName\",\r",
											"                \"lastName\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"groupId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"groupId\"\r",
											"                  ]\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"groupId\": {\r",
											"                      \"type\": \"string\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"groupId\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting continuationToken var:\r",
											"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3db436d-7c2e-4a2b-8168-36b6fea10783",
										"exec": [
											"var contToken = pm.collectionVariables.get(\"continuationToken\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"key: 'ContinuationToken',\r",
											"value: contToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1bcc6127-269f-403e-b80d-7e22f0bddeb7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/16937356-48e8-41ed-b0cf-1015d15c200d/groups/D78F52FF-F7EA-4D97-AEB2-0410584D5E2C/contacts/"
							},
							"response": []
						},
						{
							"name": "Get_GroupWithoutContacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87d00785-594f-4ede-bf9b-44bb597614d5",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check no results\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1ae923d-5d2e-4038-9368-3a05f19932ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e87f4d68-55e7-412b-9987-ed1b73c7839f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithoutContacts}}/contacts/"
							},
							"response": []
						},
						{
							"name": "PatchContact1_ToAnotherGroup",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "252a75bf-a860-4bab-97e7-ae7ceff38660",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1acd29d4-ced1-48b2-8de8-3518cefba31f",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId1}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "91f45501-2ab8-4fa1-b1f3-705a5c84d6c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithoutContacts}}/contacts/{{contactId1}}"
							},
							"response": []
						},
						{
							"name": "Get_ContactWithGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "311227d5-b7b5-4b71-9204-e8d4a83dcef0",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId1}}');\r",
											"\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
											"    pm.expect(responseJson.groupsInformation.length).to.eql(2);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"address\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"msisdn\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"msisdn\"\r",
											"      ]\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    },\r",
											"    \"properties\": {\r",
											"      \"type\": \"object\"\r",
											"    },\r",
											"    \"groupsInformation\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"address\",\r",
											"    \"metadata\",\r",
											"    \"properties\",\r",
											"    \"groupsInformation\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1fdc60f8-b99a-463f-80e0-129b9053cc61",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId1}}"
							},
							"response": []
						},
						{
							"name": "Delete_GroupHavingContacts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26e21952-8e31-4dc0-b960-7d962f9e53a0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c4a0b8f-4912-4a39-be69-270244f1f3b9",
										"exec": [
											"var groupId = pm.collectionVariables.get(\"groupIdWithoutContacts\");\r",
											"var responseJson = null; \r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + groupId,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.environment.get(\"X-Subscription-Key\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    responseJson  = res.json();\r",
											"    pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check that DELETE request actually deleted the group, by GET request\", function () {\r",
											"        pm.expect(responseJson.errors[0].error).to.eql(\"The requested group could not be found.\");\r",
											"        pm.expect(responseJson.errors[0].code).to.eql(\"group_not_found\");\r",
											"        });\r",
											"});\r",
											"//Above test is written here and not as a separate GET so that we verify the DELETE functionality\r",
											"\r",
											"var schema = {}\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Successful Delete request 204 status\", function () {\r",
											"    pm.expect(pm.response.code).to.be.eql(204);\r",
											"});\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "922bcdf8-9355-44f0-82e3-8971fc22a1ac",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupIdWithoutContacts}}"
							},
							"response": []
						},
						{
							"name": "Get_ContactWithoutGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "311227d5-b7b5-4b71-9204-e8d4a83dcef0",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId1}}');\r",
											"\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Request_\"+pm.info.requestName+\"_Test_Check expected values\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
											"    pm.expect(responseJson.groupsInformation.length).to.eql(1);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"address\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"msisdn\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"msisdn\"\r",
											"      ]\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    },\r",
											"    \"properties\": {\r",
											"      \"type\": \"object\"\r",
											"    },\r",
											"    \"groupsInformation\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"address\",\r",
											"    \"metadata\",\r",
											"    \"properties\",\r",
											"    \"groupsInformation\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Request_'+pm.info.requestName+'_Test_Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a1a60c8a-f1fd-4dde-92eb-976f86ea0e7b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId1}}"
							},
							"response": []
						}
					],
					"id": "26db4c08-807d-4276-9f29-9b35997c142d",
					"description": "DestructiveTesting? intentionally attempt to break the API to check its robustness  \nSecurity, authorization, and permission tests?"
				}
			],
			"id": "a830c283-f755-4922-b650-dbb3236319b2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b8a6854-b7c8-4a60-ad68-5805882d6fec",
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"contactId1\",\"4f8ae125-de67-439a-9c1c-31b0f1de5621\");",
							"pm.collectionVariables.set(\"msisdn1\",\"+40749200222\");",
							"",
							"pm.collectionVariables.set(\"contactId2\",\"01c88785-9abf-40a0-b25f-3afce2e16990\");",
							"pm.collectionVariables.set(\"msisdn2\",\"+40749200233\");",
							"",
							"pm.collectionVariables.set(\"contactId3\",\"6b9056b6-f9d8-418d-8852-cf442751373c\");",
							"",
							"pm.collectionVariables.set(\"groupIdWithContacts\",\"ee615bbb-66f4-49c1-9218-46fa482d2014\");",
							"pm.collectionVariables.set(\"groupIdWithContactsName\",\"GroupWithContacts\");",
							"",
							"pm.collectionVariables.set(\"groupIdWithoutContacts\",\"7e176b03-43d6-4266-8bac-a7129c7286dd\");",
							"pm.collectionVariables.set(\"groupIdWithoutContactsName\",\"GroupWithoutContacts\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0f2ddb6e-f2d7-4f3c-97c0-790099765119",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Healthcheck[TODO]",
					"id": "503e94c5-e3fc-4f6e-99ae-516bb7c3f0e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{hostname}}/healthcheck",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"healthcheck"
							],
							"query": [
								{
									"key": "code",
									"value": "oOUcu9yxpRgH0xG45IdmROmTNdPYu9WkyqR1fZK3KLXjX2cMdrlunEV7xZixxOSB",
									"disabled": true
								},
								{
									"key": "clientId",
									"value": "API-M",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "b66864d0-e045-49bb-9a47-4da36a64e56d"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4e777491-9573-4c1e-b84f-80f4f59b7db3",
				"type": "text/javascript",
				"exec": [
					"//Pre-request Collection level",
					"console.log(\"RequestName is: \", pm.info.requestName);",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "74637577-24d8-4dc1-a5fb-3f77fad8843c",
				"type": "text/javascript",
				"exec": [
					"/*",
					"Performance tests*/",
					"pm.test(\"Request_\"+pm.info.requestName+\"_Test_CollectionLevelTest1: Check Response time is less than 500ms\", function () {",
					"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(500);",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ed9d85c3-7ebf-4773-b9a3-bc045b2d4abe",
			"key": "etag",
			"value": ""
		},
		{
			"id": "50c76fc6-2d29-4b65-bf06-5e9ac7a7125a",
			"key": "guid1",
			"value": ""
		},
		{
			"id": "ca297700-7cd9-4c76-a846-e9d6e6bedee1",
			"key": "generatedMsisdn",
			"value": ""
		},
		{
			"id": "8a8cdbe7-9e69-444b-bf52-0e8cc3dff9f2",
			"key": "guidGenerated1",
			"value": ""
		},
		{
			"id": "73fc84f9-91c2-47b7-bccd-c497c12a6e93",
			"key": "guidForContactID",
			"value": ""
		},
		{
			"id": "77a7084e-068a-43b4-8e7e-8e7e430b066e",
			"key": "etagCreate_OptionalFields_WithEmoji",
			"value": ""
		},
		{
			"id": "a1741b29-2f78-4127-9df0-f9aa8ff50dac",
			"key": "searchMetadata",
			"value": ""
		},
		{
			"id": "6c47c28e-3012-4d38-8b36-dba59c198180",
			"key": "searchPartialMsisdn",
			"value": ""
		},
		{
			"id": "e5641816-da0e-462f-b744-2da83c52455e",
			"key": "uniqueFilter",
			"value": ""
		},
		{
			"id": "8110dd80-1b3d-4cf0-9a21-82fa74ac380f",
			"key": "etagFilter",
			"value": ""
		},
		{
			"id": "12f7807b-b255-4783-8c2f-7172068b365b",
			"key": "continuationToken",
			"value": ""
		},
		{
			"id": "d1d7e2c1-4d3b-4422-a4bd-9994d31a4fce",
			"key": "etagCreate_OptionalFields",
			"value": ""
		},
		{
			"id": "747353aa-ca63-4040-9fe0-d5ce87008429",
			"key": "newEncodedMsisdn",
			"value": ""
		},
		{
			"id": "6ab68606-a144-4738-b1c1-43381e3e09a1",
			"key": "guid2",
			"value": ""
		},
		{
			"id": "c52630ce-0bf6-47fa-b4b2-b0ac94ed0283",
			"key": "generatedContactID",
			"value": ""
		},
		{
			"id": "48014f7b-2e66-4232-9310-a034858f4a5e",
			"key": "generatedMsisdn1",
			"value": ""
		},
		{
			"id": "336765ea-c0d4-4a8b-9fc1-beaac0b96632",
			"key": "generatedMsisdn2",
			"value": ""
		},
		{
			"id": "084c2fcb-e3da-4d44-8cd3-f66bc8e4922c",
			"key": "groupName",
			"value": ""
		},
		{
			"id": "5c6b86e5-2ba6-4ab7-a17e-77527c45aa9a",
			"key": "groupNameUpdated",
			"value": ""
		},
		{
			"id": "e8bab0da-5dcd-4ca1-aca1-a0b40a72496e",
			"key": "guidForgroupId",
			"value": ""
		},
		{
			"id": "b4cc393e-d557-42d4-a240-c620e86e5f76",
			"key": "emojiGroupName",
			"value": ""
		},
		{
			"id": "4f612d6b-3a7a-4000-bdda-780d25f57628",
			"key": "emojiGroupDescription",
			"value": ""
		},
		{
			"id": "4b8ba9f6-5eae-4b2e-ae45-4680e20bb8ad",
			"key": "searchItem",
			"value": ""
		},
		{
			"id": "1c61d0ba-03bb-430f-a16a-8a8ccb543499",
			"key": "searchItemLarge",
			"value": ""
		},
		{
			"id": "78ae4673-5ecf-433d-ab61-d156024642dc",
			"key": "newOptionalGroupName",
			"value": ""
		},
		{
			"id": "e1fc35f9-1867-4ae6-a359-4c16edd41354",
			"key": "newOptionalGroupDescription",
			"value": ""
		},
		{
			"id": "7607cd86-2811-436a-b936-83e2f8fce2a9",
			"key": "updatedDescriptionByPatch",
			"value": ""
		},
		{
			"id": "3d86f5b8-e5ef-42a1-af5c-3b23b744f2eb",
			"key": "groupName_OptionalFields",
			"value": ""
		},
		{
			"id": "a36b16ab-cb11-45b2-bbb0-26d8703adbde",
			"key": "generatedGroupNameWithoutID",
			"value": ""
		},
		{
			"id": "ad95d6c5-e2b4-4be0-b548-e7cc26739096",
			"key": "generatedgroupId",
			"value": ""
		},
		{
			"id": "d20a92cf-77ce-4926-845b-088babc36d71",
			"key": "contactId1",
			"value": ""
		},
		{
			"id": "3d5c233a-8637-4a04-ad1d-4bb85df66faa",
			"key": "msisdn1",
			"value": ""
		},
		{
			"id": "6612e66f-30ec-451d-9509-a89fab98f002",
			"key": "contactId2",
			"value": ""
		},
		{
			"id": "9fe7410c-9c2b-4cb1-a7e6-bc31153ef7e0",
			"key": "msisdn2",
			"value": ""
		},
		{
			"id": "d17b6ca1-43e1-4c98-ae68-a7697e7d713f",
			"key": "contactId3",
			"value": ""
		},
		{
			"id": "3155b3d7-30ef-4f0c-81b3-4147d47d6a1f",
			"key": "groupIdWithContacts",
			"value": ""
		},
		{
			"id": "fd7ebf4b-3fba-4381-b049-f62588b5b2b7",
			"key": "groupIdWithContactsName",
			"value": ""
		},
		{
			"id": "1d5f5f84-15ab-40dc-9e56-8b684ca0bbfb",
			"key": "groupIdWithoutContacts",
			"value": ""
		},
		{
			"id": "51812713-3f22-4a99-889c-726c87572c2d",
			"key": "groupIdWithoutContactsName",
			"value": ""
		}
	]
}