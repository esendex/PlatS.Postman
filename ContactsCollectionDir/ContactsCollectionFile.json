{
	"info": {
		"_postman_id": "130ac83c-4c13-4c90-947b-14d9c46a77ab",
		"name": "ContactsApi",
		"description": "[https://github.com/esendex/RichContent.Docs/wiki/Contacts](https://github.com/esendex/RichContent.Docs/wiki/Contacts)\n\n[https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations](https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Contacts",
			"item": [
				{
					"name": "BasicCRUD_SMOKE",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73271a62-834e-4474-95a0-05464c9855fb",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted contact with contactId: \" + pm.environment.get(\"contactId\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3e08cbf1-4b3f-4ce8-ae18-ba6071f9f6d1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "b7129913-96c3-4927-84c0-5af47a27717a",
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"contactId\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"etag\": \"d6f93c54-3ee6-476e-8fe6-09e5f22ed6f8\"\r\n}"
								}
							]
						},
						{
							"name": "Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check expected values\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
											"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
											"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"address\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"msisdn\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"msisdn\"\r",
											"      ]\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    },\r",
											"    \"properties\": {\r",
											"      \"type\": \"object\"\r",
											"    },\r",
											"    \"groupsInformation\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"address\",\r",
											"    \"metadata\",\r",
											"    \"properties\",\r",
											"    \"groupsInformation\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "609e4c73-a82e-4deb-82d1-c908e05e7d77",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "ddde2f60-d57a-4b7f-b85c-6b3bf10e12c9",
									"name": "Get",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"id\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"eTag\": \"fed3c303-a761-4503-a15d-1ca662bff8e1\",\r\n    \"accountId\": \"c90c5734-f195-4d6c-92a5-0a81eecf093d\",\r\n    \"address\": {\r\n        \"msisdn\": \"+40749255366\"\r\n    },\r\n    \"metadata\": {\r\n        \"user\": \"user\",\r\n        \"lastUpdatedAt\": \"2022-12-13T13:15:38Z\",\r\n        \"product\": \"someProduct\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"3570200b-3dcc-427a-9f26-24e0a748cc4f\"\r\n    },\r\n    \"groupsInformation\": []\r\n}"
								}
							]
						},
						{
							"name": "Patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
										"exec": [
											"\r",
											"//Preconditions - get already used etag:\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"//End Of Preconditions \r",
											"\r",
											"//Generating vars:\r",
											"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
											"console.log(\"generated guid1 \"+guid1);\r",
											"pm.collectionVariables.set(\"guid1\", guid1);\r",
											"\r",
											"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
											"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
											"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
											"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a79f299c-5ad0-47e0-b801-4cc5cd2a06a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.collectionVariables.replaceIn('{{generatedMsisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Check that PATCH request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7c11a045-8f23-454a-a53b-46f4a85f14bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Put",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
										"exec": [
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.variables.replaceIn('{{X-Subscription-Key}}')\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2d864107-1aa2-451c-9cc7-071efbfbda74",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPut",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.environment.replaceIn('{{msisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Check that PUT request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f4b8f5c5-8c56-4ce6-a7c0-624bac04956e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "185a978c-4335-499b-bac1-7786f40425c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
										"exec": [
											"var contactId = pm.environment.get(\"contactId\");\r",
											"var responseJson = null; \r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + contactId,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.environment.get(\"X-Subscription-Key\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    responseJson  = res.json();\r",
											"    pm.test(\"Check that DELETE request actually deleted the contact, by GET request\", function () {\r",
											"        pm.expect(responseJson.errors[0].error).to.eql(\"The requested contact could not be found.\");\r",
											"        pm.expect(responseJson.errors[0].code).to.eql(\"contact_not_found\");\r",
											"        });\r",
											"});\r",
											"//Above test is written here and not as a separate GET so that we verify the DELETE functionality but also preserve the upper level test which checks \"susccess error codes\", not 404 - contact_not_found\r",
											"\r",
											"//var responseJson  = pm.response.json();\r",
											"var schema = {}\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ee3b7072-e64a-45b5-9d5f-340ad6a42bdc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "ReCreate (useful for chaining)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2e821cd-8a00-44ab-abcc-08c9f95c9da9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86c1a5ac-6dc5-4678-ad1b-8bf0847fdde6",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "16d7390e-c8e7-46e6-840d-43b96e1e35b7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						}
					],
					"id": "045af998-bd3e-4a59-b0ab-1ab84441ce17",
					"description": "Main functionality of the service - happy paths. Tests can be used as Smoke tests.\n\nStartFragment\n\n- Execute a POST request that creates a resource\n- then execute a GET request to check if it exists\n- then we use a PATCH endpoint to update new data\n- and we again invoke a GET request to validate the new data\n- same for PUT\n- then, we DELETE that resource\n- and we again invoke a GET request to validate that the resource does not exist anymore (inside DELETE request to not fail because of collection test in regards to Status Code - 404 in our case);\n- finally, re-create resource so that we can use it in other tests as an existing testdata.\n    \n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c4cec44-1d94-431f-b0fb-416fb18d2846",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d2f2f4b-807b-42f8-9ea7-80e1261d7a3b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "ExtendedPositiveTesting_WithOptionalParameters",
					"item": [
						{
							"name": "ValidSpecialCharacters",
							"item": [
								{
									"name": "Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3f8f0b9e-dcd1-429d-ad5a-b03bb08ef32e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3f3b3c79-5b9e-4eec-8130-0d59b7df7abe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "07304893-7c43-4300-ae75-eb63b573e710",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields_WithEmoji}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John🤮 Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John🤮 Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e3195353-355b-4f87-af86-df7d6bf11f1d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_FilterByMetadata_Emoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        pm.expect(responseJson.results[i].properties.__displayName).to.contains(\"🤮\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "39403dcc-0ca5-4e70-9875-0dc5b2ad8920",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=🤮",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "🤮"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "6dd75193-8db9-43cc-903d-af4712ec421f"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Search",
									"item": [
										{
											"name": "Get_SearchByMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "b90cd660-d30a-4017-b82a-7372a61a1f39",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByMetadata_Emoji",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "dfce0dc1-117d-4287-a516-82a49480fae5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByPartialMsisdn",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{searchPartialMsisdn}}'))\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchPartialMsisdn\", \"447\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "aa2ade09-d812-42b2-a1e2-aeafd946f600",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchPartialMsisdn}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchPartialMsisdn}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "7c8fd7b3-7889-4bf1-ab12-fab9cb0f8cce"
								},
								{
									"name": "Filter",
									"item": [
										{
											"name": "Create_OptionalFields_UniqueItemForFilter",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "cc1454f4-8622-476b-b1b2-9c6af5b2b3d2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"uniqueFilter\": \"{{uniqueFilter}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9d789588-9650-445d-8cad-eaaaefd7a123",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined1\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "a9226de6-1d6c-4d6e-b0ee-0300a72b74a3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "GetAllContacts_CombinedFilter",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check combined filter results\", function () {\r",
															"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
															"    pm.expect(responseJson.results[0].properties.test).to.eql(\"test\");\r",
															"    pm.expect(responseJson.results[0].properties.Department).to.eql(\"Engineering\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.greaterThan(0);\r",
															"    pm.expect(responseJson.results.length).to.eql(15);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"continuationToken\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"test\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"test\"\r",
															"              ]\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"continuationToken\",\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting continuationToken var:\r",
															"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f87a0645-feea-4252-9940-20f88fd3beda",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?test=test&Department=Engineering",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "test",
															"value": "test"
														},
														{
															"key": "Department",
															"value": "Engineering"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_FilterByOneItemPartial",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.uniqueFilter).to.contain(\"unique\")\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"//pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6c85b9fe-f521-49c4-a83a-8a720b0b32e6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=unique",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "unique"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_Filter_ReturnUnitedResulted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    var arr = [\"combined1\", \"combined2\"];\r",
															"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.combined).to.be.oneOf(arr);\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "0f028c05-1c4d-4cc9-9dca-6addf3c33f1e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=combined1,combined2",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "combined1,combined2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_WithMsisdn_And_Property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected account and metadata - common values\", function () {\r",
															"    pm.expect(responseJson.results[0].address.msisdn).to.contain(\"477\");\r",
															"    pm.expect(responseJson.results[0].properties.__displayName).to.contain(\"John\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.gt(0);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "46d14819-47ac-4793-a2e4-ec30549c9f00",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?address.msisdn=477&__displayName=John",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "address.msisdn",
															"value": "477"
														},
														{
															"key": "__displayName",
															"value": "John"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create_6FilterItems",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "eeb90fa4-15a3-4539-8203-7f8684e97441",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"filter1\": \"filter1\",\r\n        \"filter2\": \"filter2\",\r\n        \"filter3\": \"filter3\",\r\n        \"filter4\": \"filter4\",\r\n        \"filter5\": \"filter5\",\r\n        \"filter6\": \"filter6\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_5FilterItemsMax",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check results contain at least 1 item with the 5 filtered items and Check values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength).to.be.greaterThan(0);\r",
															"   \r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.filter1).to.eql('filter1');\r",
															"        pm.expect(responseJson.results[i].properties.filter2).to.eql('filter2');\r",
															"        pm.expect(responseJson.results[i].properties.filter3).to.eql('filter3');\r",
															"        pm.expect(responseJson.results[i].properties.filter4).to.eql('filter4');\r",
															"        pm.expect(responseJson.results[i].properties.filter5).to.eql('filter5');\r",
															"        pm.expect(responseJson.results[i].properties.filter6).to.eql('filter6');\r",
															"    }\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3d9fbead-6619-4760-81ae-e7973456d7c5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "61e2f84b-7c67-4396-a842-e6d82178c223"
								}
							],
							"id": "3cce6a63-02bc-4cdb-be17-6d52c58537a5"
						},
						{
							"name": "RequestBodyParameters",
							"item": [
								{
									"name": "Create_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "959475a3-620f-450e-b29b-143108348735",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d6e0a563-ac18-4ef1-9fa3-4827127e4ba0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.results[0].address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\"));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7efe24f1-4f04-4608-8193-4c3c59ac9c98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        console.log(responseJson.results[i].address.msisdn);\r",
													"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
													"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{newEncodedMsisdn}}'))\r",
													"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
													"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "aefb10b2-d09d-4f2c-b86c-fe8e625175a2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_AddNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													"var guid2 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid2 \"+guid2);\r",
													"pm.collectionVariables.set(\"guid2\", guid2);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "38327957-cac9-42a1-97d1-02a4352746b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\",\r\n        \"guidGeneratedNew\": \"{{guid2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_AddNewPropery",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"var guidGenerated2 = pm.collectionVariables.replaceIn('{{guid2}}');\r",
													"console.log(\"obtained guid2 is: \"+guidGenerated2)\r",
													"\r",
													"pm.test(\"Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5fa968ac-2add-49e6-af6a-e72688732843",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bfde9a3a-8781-45ae-889e-2b4e48d9807b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGeneratedNew\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a1ded85b-795e-4865-9631-f34fc7b38f46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "eb0679f7-c647-4efb-9bc3-93c6745199af",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Check that PUT request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "95f493bf-49ff-404f-b443-84f13aa97baa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_UsedAsCreate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"//pm.collectionVariables.set(\"etagPut_UsedAsCreate\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "49343b88-1b76-4fc8-acd0-170b4974faf0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{guidForContactID}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_MissingMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "24a45195-e5fd-4bb4-b902-7074bce3d206",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_NullMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9d6d5fc5-7fa5-4dc7-bb0f-de5337fd2847",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Patch_CheckNoUpdates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var msisdn = pm.environment.replaceIn('{{msisdn}}');\r",
													"console.log(\"obtained msisdn: \"+msisdn)\r",
													"\r",
													"pm.test(\"Check that PATCH request did not update the contact - should see same msisdn\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(msisdn);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c456da70-fa81-40a0-8c4f-fbcb3e37f083",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "1be75cca-5de9-4851-a1e0-9b9c898591ff"
						},
						{
							"name": "Other",
							"item": [
								{
									"name": "CreateWithoutID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a1cd7901-2f10-4679-8518-d71595e5a4ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "GetCreateWithoutID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{generatedContactID}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
													"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
													"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "964e1cdd-0de9-4503-83c1-0626872a3ef1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"var  generatedMsisdnWithDash1 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn1 = \"+447\" + generatedMsisdnWithDash1.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn1\", generatedMsisdn1);\r",
													"console.log(\"generatedMsisdn1 is: \",generatedMsisdn1);\r",
													"\r",
													"var  generatedMsisdnWithDash2 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn2 = \"+447\" + generatedMsisdnWithDash2.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn2\", generatedMsisdn2);\r",
													"console.log(\"generatedMsisdn2 is: \",generatedMsisdn2);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3bb72a17-64b1-4ff7-bf18-c608ed4bc4df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn1}}\",\r\n        \"msisdn\": \"{{generatedMsisdn2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
									},
									"response": []
								},
								{
									"name": "Get_Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn2}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "797e03f7-343c-4b71-8b30-bd3718e85b8c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								}
							],
							"id": "b989c251-c568-4786-8b20-fe327466c38d"
						}
					],
					"id": "d52d5d2c-190d-493f-abc9-b92b6434f27a",
					"description": "Positive tests based on: optional parameters and extra functionality\n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0a2a772b-d844-48b2-bc25-b4907dd8afb6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1df07a10-077b-41c2-9662-bc27324590ee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "NegativeTesting_WithValidInput",
					"item": [
						{
							"name": "NonExisting",
							"item": [
								{
									"name": "GET_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c74a775-bb85-4673-9129-a21ded9dec72",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "Patch_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "90457c40-c38c-44f7-80a5-9c7bb43c9a95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "GET_NonExistingAccountAndContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 404 Not Found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "58caf04a-0dcc-4115-aa11-390642a8db53",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/1bdf73c0-9dc1-44de-8699-8e26393a0777/contacts/1bdf73c0-9dc1-44de-8699-8e26393a0777"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e8bd3f3b-3671-4149-90a0-07da42564296",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=000",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dda9efd0-c4cb-4e9c-934b-c2879b015493",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=+40749255311",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "+40749255311"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMetadata_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7e4b608c-ec0b-4f0d-bb1c-23dba971e845",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search=DoesNotExist",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "DoesNotExist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_NonExisting",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 204 NoContent\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2806c29a-c24f-4d61-b7f4-5e84e5822384",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								}
							],
							"id": "fa346a69-3453-4798-9523-a4930d59c40c"
						},
						{
							"name": "Duplicate",
							"item": [
								{
									"name": "Create_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3a0b52f7-14d3-48ab-95d3-aea9941450a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "07ccccb3-3ac5-439b-a7b8-9824c62f78f8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PATCH_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e71c4618-874f-4c1d-9a06-3ff88783a757",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Create_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9c81e48b-3216-444c-add4-8feb0e99f106",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});\r",
													"//PossibleBug "
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6ce31f3a-9632-44d0-bcd4-34f562786f49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});\r",
													"//PossibleBug "
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ea104abb-2ca0-46e5-a560-5f6711845bad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "9d6dd047-054d-46b3-a478-08891dc6a075"
						},
						{
							"name": "UnAuthorized",
							"item": [
								{
									"name": "Create_Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to missing subscription key. Make sure to include subscription key when making requests to an API.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a1c3a65b-00ba-4e0c-926d-a65fb8a6e95e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "ae65fc16-0bac-476e-a860-57a8e9d2a0cf"
						}
					],
					"id": "5ffa37bf-443f-4878-98c7-5fbc1b591248",
					"description": "Example:\n\nvalid user input - example: try to add an already existing item (with same ID)\n\nEndFragment"
				},
				{
					"name": "NegativeTesting_WithInvalidInput",
					"item": [
						{
							"name": "LengthValidation",
							"item": [
								{
									"name": "Create_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "dbdff46b-b7d0-4c13-b495-d693c6941b0c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "81b673df-9861-4683-b30b-f0a09a64b993",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "46353422-bf75-4576-bcdd-f90bdad15d59"
						},
						{
							"name": "Required",
							"item": [
								{
									"name": "Headers",
									"item": [
										{
											"name": "CreateWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6eb007db-5c59-4f67-a98f-59fb56c9127c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "PatchWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "089088b9-6e60-4ff9-937f-889431b6baf4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9c99d2d3-2c04-4921-a335-836a5d244bb7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PatchWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ff2029eb-432b-43b6-b827-ddf27d5db383",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "246f7ded-77e9-453e-9089-6afd381f90d5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "GetWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "90da2aee-ac83-4988-89e7-4ca32446995b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "CreateWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "21620090-34b7-4c76-9feb-05e3d51b1c67",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "58e9488f-e214-4f6e-9813-09db16a722c2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										}
									],
									"id": "8af0ab2a-c8a6-4a11-9898-3bfae15f45bd"
								},
								{
									"name": "Create_RequiredField_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "63f9fcfe-8b26-4730-a759-6e6d15efd03f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_RequiredField_msisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ea2743ef-b276-48d6-a31f-c592c42740f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "2aa620ac-1e19-4cd2-ac1d-b59a95389040",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "89263503-ce56-4181-b7ef-c4fda52f08a0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredAddress",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6259d149-9e6d-480b-b887-b3c18218e404",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredMSISDN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fcf2e79d-7a13-4384-8f99-0d390e2c98f2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "84e16a7c-3f78-4f85-915c-831f2ac42fe9"
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "IllegalCharacters",
									"item": [],
									"id": "971e5514-0fbe-40ef-8072-5354cfdbe3ae"
								},
								{
									"name": "GET_InvalidContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "efcc79f2-eb2c-4366-8841-d171f39f8275",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "41f5ca35-1074-4913-afd3-82c720ca44e0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Put_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f2d27aea-8380-47ca-9cfd-ed99fd446f86",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Create_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3bedfafb-ac6c-4d1e-8806-0eeac0a1cd92",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6af32e35-eab0-43ea-8ba3-03c03b090ee8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Put_InvalidAccountIDAndProductHeader",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c428941a-2cd8-4c86-a6c2-48f3af7b2ff0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProductdfdfd",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "16452317-f359-4fd4-8ee6-2391ced47b76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "GET_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8689b70e-ea8c-4b7c-a708-e1cbbcae159e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/NotGUID/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Create_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5869fb25-bde7-4f1a-b899-38688c3b9f0c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4661170e-f788-43e0-a694-db1d119496d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8f270941-4166-40d6-9fc2-70598e9a263b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Create_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"//pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d63d1843-9502-47bf-af56-3a49e8c920c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Create_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f529642a-c025-4904-9531-739db915d355",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_MissingMsisdn[TPS-397]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test.skip(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact MSISDN should be set\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"pm.expect(jsonData.errors.length).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "29361ae9-da02-432e-891d-76cda5242aa8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d61e90ff-f8a0-4812-bf8d-71275d8592eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "86128fc3-f951-4cad-a118-d08a45a85f7b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_Null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "36fcb257-d10f-4f2a-bd41-30e01f78294d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"null\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_EmptyString[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "11d26657-06a6-4017-978c-f86d4acc637e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyChar[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "962f4429-7802-40d8-910c-00e70298c521",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"g\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ca9fb1d1-754e-4b7a-ae5f-1ef39336d093",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_Null[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
													"//Doc is either not uptodate or wrong message:\r",
													"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
													"//            \"code\": \"etag_invalid\" -- current  etag_missing"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "db1cdc59-419b-4f2e-80e0-433168cacce9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": null,\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_EmptyString[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
													"//Doc is either not uptodate or wrong message:\r",
													"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
													"//            \"code\": \"etag_invalid\" -- current  etag_missing"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3ed4a5f2-2b25-4823-82f8-52b2fe24c764",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_AnyChar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3fd7ba2b-6c8a-475a-92ba-e50ad191a275",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"f\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_AnyGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3fd265a5-9710-46a7-b437-d7ae9efc5860",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Delete_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4a99c3cf-c1fc-4570-8cf1-307169fdf871",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Delete_InvalidAccount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "451623e3-cca7-485d-b97f-170fa409ea48",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/invalidAccount/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Get_ByMetadataAndPartialMsisdn_CheckSearchIsReservedKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"'search' is a reserved keyword and cannot be used as a key\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8a72f685-b7ac-4e73-b843-c1bcc1e9744f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "{{searchMetadata}}"
												},
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMetadataAndPartialMsisdn_CheckFilterIsReservedKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"'filters' is a reserved keyword and cannot be used as a key\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6150e520-a370-46a7-a6e2-6093ca406fb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "{{searchMetadata}}"
												},
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByInvalidParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that no results are returned\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength).to.eql(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "58b2fbeb-4488-4908-aa08-fd9226677797",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?someInvalidParam=x",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "someInvalidParam",
													"value": "x"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "dc2b0c64-36eb-4b56-85bc-4b920a12674d"
						},
						{
							"name": "InvalidAuthorization",
							"item": [
								{
									"name": "Create_Unauthorized_InvalidAuthorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7fe4f13f-dc60-4c12-b84e-f6ec25aa0839",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "cvcv",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "cb37295c-cb7f-448d-ad05-9ec5d25ef050"
						},
						{
							"name": "MultipleErrors",
							"item": [
								{
									"name": "Patch_OptionalFields_Check2Errors_MaxLengthForPropertyAndInvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code set1\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code set2\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[1].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[1].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d89b5f78-3d35-41c1-928a-ef579308d4ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "6d38d5a1-c84c-4ce8-bc2c-780a0485c98c"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Filter",
									"item": [
										{
											"name": "Get_CombinedFilter_Check5FilterMaxError",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"A maximum of 5 filters can be provided\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"too_many_filters\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "46ca4402-9168-4fd4-92d2-21b0918f3316",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5&filter6=filter6",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														},
														{
															"key": "filter6",
															"value": "filter6"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "cdf6b5c1-1304-4f22-b78b-7eee441d2997"
								}
							],
							"id": "d48d9ff8-8508-4607-bfe9-f075370e180f"
						}
					],
					"id": "d1608fad-e7cd-4d60-a505-b19185e67768",
					"description": "invalid input (trying to add a property which is null or other invalid input - for example a NULL msisdn\n\nEndFragment"
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "GetAllContacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check count of returned results is 15 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(15);\r",
											"\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting continuationToken var:\r",
											"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
										"exec": [
											"//TODO maybe add precondition: if not 16 contacts => create min 16"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "596bfd8c-ca07-4b81-bcbc-14c3b7d60aab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						},
						{
							"name": "GetAllContacts RetrieveMore",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check count of returned results is not 0\", function () {\r",
											"    pm.expect(responseJson.results.length).to.not.eql(0);\r",
											"\r",
											"});\r",
											"\r",
											"var schemaWithContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"var schemaWithoutContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schemaWithoutContinuationToken)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "920ef317-fba6-4526-bb73-fb47b3e3dca3",
										"exec": [
											"var contToken = pm.collectionVariables.get(\"continuationToken\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"key: 'ContinuationToken',\r",
											"value: contToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "268500b8-d551-4a9c-a468-029b82dae4f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						}
					],
					"id": "de6befa5-cae0-4b46-88fc-29a2d7ac180a",
					"description": "DestructiveTesting? intentionally attempt to break the API to check its robustness  \nSecurity, authorization, and permission tests?"
				}
			],
			"id": "26688950-725b-4650-b4dd-3403d50b42fe"
		},
		{
			"name": "ContactsAndGroups",
			"item": [
				{
					"name": "BulkAddGroupContact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b1c2f431-51f7-4af5-bc2f-9188083a984e",
								"exec": [
									"/*\r",
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" +  pm.environment.get(\"groupId\") +\"/contacts/\" +  pm.environment.get(\"contactId\"),\r",
									"    method: \"PATCH\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"X-Client-Product\": \"someProduct\",\r",
									"        \"X-Client-User\": \"user\",\r",
									"        \"X-Subscription-Key\":subscriptionKey\r",
									"    },\r",
									"    body: {}\r",
									"}, function (err, res) {\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bf618b9f-75b0-4415-a304-0c740dead507",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\":[\r\n\"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n\"5c070435-381f-4129-98b6-0de187bfb59c\",\r\n\"dfd60e88-957b-48ea-b93a-59819df9c25f\",\r\n\"09df325b-d1de-433b-aee3-14897dfc971e\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupId}}/contacts"
					},
					"response": []
				},
				{
					"name": "GetGroupContact",
					"id": "c2d92042-b151-43f8-badb-2fe7613f4625",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}/contacts/"
					},
					"response": []
				},
				{
					"name": "PatchGroupContact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "19c96ae9-a7d0-443c-a26e-1aeb05305de5",
								"exec": [
									"//TODO actually patch smth"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cef931b9-0930-4985-bb75-10d1e81b114e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}/contacts/{{contactId}}"
					},
					"response": []
				},
				{
					"name": "RemoveGroupContact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d20d784b-1050-4c0a-b5a3-0c0bc100c664",
								"exec": [
									"/*\r",
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" +  pm.environment.get(\"groupId\") +\"/contacts/\" +  pm.environment.get(\"contactId\"),\r",
									"    method: \"PATCH\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"X-Client-Product\": \"someProduct\",\r",
									"        \"X-Client-User\": \"user\",\r",
									"         \"X-Subscription-Key\":subscriptionKey\r",
									"    },\r",
									"    body: {}\r",
									"}, function (err, res) {\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf936f7e-a6da-47e2-9777-0f00fb95478c",
								"exec": [
									"//TODO check response - as of now returns details of group?"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d1e01db9-6cf0-43b8-8ef5-f260426bbf78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}/contacts/{{contactId}}"
					},
					"response": []
				},
				{
					"name": "BulkRemoveGroupContact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf5b2dee-9ee5-4e83-a0e4-81b524831e64",
								"exec": [
									"/*\r",
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" +  pm.environment.get(\"groupId\") +\"/contacts/\" +  pm.environment.get(\"contactId\"),\r",
									"    method: \"PATCH\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"X-Client-Product\": \"someProduct\",\r",
									"        \"X-Client-User\": \"user\",\r",
									"         \"X-Subscription-Key\":subscriptionKey\r",
									"    },\r",
									"    body: {}\r",
									"}, function (err, res) {\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0b707763-559e-4579-92f3-8ea3a8cbc53d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\":[\r\n\"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n\"5c070435-381f-4129-98b6-0de187bfb59c\",\r\n\"dfd60e88-957b-48ea-b93a-59819df9c25f\",\r\n\"09df325b-d1de-433b-aee3-14897dfc971e\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/group/{{groupId}}/contacts"
					},
					"response": []
				}
			],
			"id": "4825aeda-7258-4d70-8cb5-3c239f950316"
		},
		{
			"name": "BulkForContacts",
			"item": [
				{
					"name": "GetOperationStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d0fc0bc6-28ee-4221-b8c4-5b7cb983c464",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1beda54b-7bc0-4e94-b8ab-2d56c1ab8bdf",
								"exec": [
									"/*\r",
									"TODO\r",
									"check error message:\r",
									"{\r",
									"    \"accountId\": \"c90c5734-f195-4d6c-92a5-0a81eecf093d\",\r",
									"    \"errors\": [\r",
									"        {\r",
									"            \"error\": \"Operation not found\",\r",
									"            \"code\": \"not_found\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fa22adb5-834d-4339-9782-8b6f2f010007",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact/{{contactId}}"
					},
					"response": []
				},
				{
					"name": "BulkInsert",
					"id": "4a913bfb-c104-46dd-9054-94bdb3dd521d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"Address\": {\r\n                \"Msisdn\": \"+40727775249\"\r\n            },\r\n            \"properties\":{\r\n                \"__displayName\": \"Nick Doe\",\r\n                \"surname\": \"Dr Nick\",\r\n                \"nickname\": \"Nick\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
					},
					"response": []
				},
				{
					"name": "BulkInsertOrUpdate",
					"id": "4cfb2c27-5604-4c65-8617-cc40063080b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"contacts\": [\r\n        {\r\n            \"Address\": {\r\n                \"Msisdn\": \"+40727775249\"\r\n            },\r\n            \"properties\":{\r\n                \"__displayName\": \"Nick Doe\",\r\n                \"surname\": \"Dr Nick\",\r\n                \"nickname\": \"Nick\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
					},
					"response": []
				},
				{
					"name": "BulkDelete",
					"id": "8ac758a7-2868-45e1-909d-0280bf5520a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							},
							{
								"key": "X-Client-Product",
								"value": "asdb",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "someuser",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ContactIds\": [\r\n        \"E7306DBC-D8CB-4CEC-9061-6D5A4E0F9B9B\",\r\n        \"BCF20EF5-5CB1-4E10-931F-98018F36F930\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/bulk/contact"
					},
					"response": []
				}
			],
			"id": "321d1e47-f7e1-4687-888c-d6c89995ce1b",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "282c3b6a-feee-48c3-861a-f388299128e2",
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"accountId\", \"3beca229-8b42-446f-9f01-3ddaded26b52\");",
							"pm.variables.set(\"contactId\", \"d8a01e68-5625-4fbf-838e-fa0662b9ae4b\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e63d137c-1a80-4bd6-bf23-79ce35a2d452",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Groups",
			"item": [
				{
					"name": "CreateGroup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2f203b9-77e2-40ca-a7fd-0509236ee8e7",
								"exec": [
									"console.log(\"Running prerequests for CreateGroup request\");\r",
									"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
									"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
									"pm.sendRequest({\r",
									"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"X-Client-Product\": \"someProduct\",\r",
									"        \"X-Client-User\": \"user\",\r",
									"        \"X-Subscription-Key\":subscriptionKey\r",
									"    },\r",
									"    body: {}\r",
									"}, function (err, res) {\r",
									"    pm.expect(res).to.have.property('code', 204);\r",
									"    console.log(\"Deleted group with groupId: \" + pm.environment.get(\"groupId\"));\r",
									"});\r",
									"console.log(\"Ending prerequests for CreateGroup request\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "15ae6436-9249-4172-9562-4f17e09940ad",
								"exec": [
									"/*\r",
									"TODO\r",
									"create test for duplicate:\r",
									"{\r",
									"    \"groupId\": \"d81d4645-f195-4d6c-92a5-0a81eecd184e\",\r",
									"    \"etag\": null,\r",
									"    \"errors\": [\r",
									"        {\r",
									"            \"error\": \"A group with the id d81d4645-f195-4d6c-92a5-0a81eecd184e or group name 'test-group' already exists. You can use patch in order to update it.\",\r",
									"            \"code\": \"group_exists\"\r",
									"        }\r",
									"    ]\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "89a196f0-22e0-49fe-a653-5d99d3b89ab3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{groupId}}\",\r\n    \"groupname\": \"test-group\",\r\n    \"etag\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
					},
					"response": []
				},
				{
					"name": "GetGroup",
					"id": "51085bc9-7c0b-4f6a-962f-380ae8ba7c59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
					},
					"response": []
				},
				{
					"name": "PatchGroup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e14cd15b-4472-4b63-983d-2082ea42fb67",
								"exec": [
									"\r",
									"pm.sendRequest({\r",
									"url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/groups/\" + pm.environment.get(\"groupId\"),\r",
									"method: \"GET\",\r",
									"header: {\r",
									"\"content-type\": \"application/json\",\r",
									"\"accept\": \"application/json\",\r",
									"\"X-Client-Product\": \"someProduct\",\r",
									"\"X-Client-User\": \"user\",\r",
									"\"X-Subscription-Key\": pm.variables.replaceIn('{{X-Subscription-Key}}')\r",
									"},\r",
									"body: {}\r",
									"}, function (err, res) {\r",
									" pm.variables.set(\"etag\", res.json().eTag);\r",
									" console.log(\"new etag is: \"+ pm.variables.get(\"etag\"))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "22a5e69a-8856-46c9-90b4-c393d25570de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{groupId}}\",\r\n    \"groupname\": \"test-group10\",\r\n    \"etag\": \"{{etag}}\",\r\n    \"groupdescription\": \"updated important description v2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups/{{groupId}}"
					},
					"response": []
				},
				{
					"name": "GetGroups",
					"id": "bf3ea12a-fd30-48c5-9302-acbc29bbd794",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Client-Product",
								"value": "someProduct",
								"type": "text"
							},
							{
								"key": "X-Client-User",
								"value": "user",
								"type": "text"
							},
							{
								"key": "X-Subscription-Key",
								"value": "{{X-Subscription-Key}}",
								"type": "text"
							}
						],
						"url": "{{hostname}}/v1/accounts/{{accountId}}/groups"
					},
					"response": []
				}
			],
			"id": "42fb7015-5d97-4c8a-aefc-1f6fa241fe62"
		},
		{
			"name": "Healthcheck",
			"id": "059aa1e0-8f0a-48b0-b0dd-5d0f428ec2fb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Subscription-Key",
						"value": "{{X-Subscription-Key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{hostname}}/healthcheck",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"healthcheck"
					],
					"query": [
						{
							"key": "code",
							"value": "oOUcu9yxpRgH0xG45IdmROmTNdPYu9WkyqR1fZK3KLXjX2cMdrlunEV7xZixxOSB",
							"type": "text",
							"disabled": true
						},
						{
							"key": "clientId",
							"value": "API-M",
							"type": "text",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetForAccount",
			"id": "688697c9-b42f-4209-9ea8-4713031aa0c8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Client-User",
						"value": "user",
						"type": "text"
					},
					{
						"key": "X-Client-Product",
						"value": "someProduct",
						"type": "text"
					},
					{
						"key": "X-Subscription-Key",
						"value": "{{X-Subscription-Key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filters=test",
					"host": [
						"{{hostname}}"
					],
					"path": [
						"v1",
						"accounts",
						"{{accountId}}",
						"contacts"
					],
					"query": [
						{
							"key": "filters",
							"value": "test",
							"type": "text"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "242bbce6-3c9c-4379-863d-601ad0292c8c",
				"type": "text/javascript",
				"exec": [
					"//Pre-request Collection level",
					"console.log(\"RequestName is: \", pm.info.requestName);",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2e114e3f-6cd7-4ac4-9c47-d5c25610d043",
				"type": "text/javascript",
				"exec": [
					"/*",
					"pm.test(\"CollectionLevelTest1: Checking request code is 200, 201 or 204\", function () {",
					"    const expectedStatusCodes = [200, 201, 204];",
					"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
					"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
					"});",
					"",
					"*/",
					"//Performance tests",
					"pm.test(\"CollectionLevelTest1: Check Response time is less than 200ms\", function () {",
					"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "e563beca-5b1d-4777-80a0-dba627ba7891",
			"key": "etag",
			"value": ""
		},
		{
			"id": "8a2d3ae3-588b-4f9f-af79-2a479755b829",
			"key": "guidGenerated1",
			"value": ""
		},
		{
			"id": "69c88f04-5894-43b0-a9b5-2b0f7b37f1a5",
			"key": "guid1",
			"value": ""
		},
		{
			"id": "d68a1018-ba21-4c3d-806b-e93d90727059",
			"key": "generatedMsisdn",
			"value": ""
		},
		{
			"id": "6037a574-cb43-4e41-907a-a2247801b178",
			"key": "guidForContactID",
			"value": ""
		},
		{
			"id": "913bc589-5f33-49bb-b82d-9ce96673c01d",
			"key": "etagCreate_OptionalFields_WithEmoji",
			"value": ""
		},
		{
			"id": "05600712-71b4-4dd4-b8dc-77c097fa71d7",
			"key": "searchMetadata",
			"value": ""
		},
		{
			"id": "9f53eba9-9fbb-4773-a946-0b2798b811ca",
			"key": "searchPartialMsisdn",
			"value": ""
		},
		{
			"id": "b905dbe6-fd4a-494d-8540-3a9a3855a70b",
			"key": "uniqueFilter",
			"value": ""
		},
		{
			"id": "871b0fbe-aded-44eb-9edb-b376f929efb4",
			"key": "etagFilter",
			"value": ""
		},
		{
			"id": "71798e99-9da2-476b-84ff-5a1e8457e7a4",
			"key": "continuationToken",
			"value": ""
		},
		{
			"id": "fe03f33b-19fe-438c-bc03-31c370a269fc",
			"key": "newEncodedMsisdn",
			"value": ""
		},
		{
			"id": "bfbb7aa4-fd14-47b4-8e59-842a3f5b1d71",
			"key": "guid2",
			"value": ""
		},
		{
			"id": "d18d4a54-3c67-4aac-b124-4ffeb236b6e2",
			"key": "etagCreate_OptionalFields",
			"value": ""
		},
		{
			"id": "0e89cf32-609e-4ece-b6ce-434fcbb86af2",
			"key": "generatedContactID",
			"value": ""
		},
		{
			"id": "360d18e3-f0da-4e27-84ab-e494724fcf86",
			"key": "generatedMsisdn1",
			"value": ""
		},
		{
			"id": "9c83cdb4-da0d-46a2-beb7-2fe96ff492de",
			"key": "generatedMsisdn2",
			"value": ""
		}
	]
}