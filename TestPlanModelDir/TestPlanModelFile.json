{
	"info": {
		"_postman_id": "0d0354b2-a818-4b4f-b128-b07308bad40b",
		"name": "TestPlanModel_Service",
		"description": "[https://github.com/esendex/RichContent.Docs/wiki/Contacts](https://github.com/esendex/RichContent.Docs/wiki/Contacts)\n\n[https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations](https://github.com/esendex/RichContent.Docs/wiki/Contacts-bulk-operations)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "TestPlanModel_Functionality",
			"item": [
				{
					"name": "BasicCRUD_SMOKE",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73271a62-834e-4474-95a0-05464c9855fb",
										"exec": [
											"console.log(\"Running prerequests for Create request\");\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"//console.log(\"subscriptionKey: \" + subscriptionKey);\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"DELETE\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.expect(res).to.have.property('code', 204);\r",
											"    console.log(\"Deleted contact with contactId: \" + pm.environment.get(\"contactId\"));\r",
											"});\r",
											"console.log(\"Ending prerequests for Create request\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "13feecb1-93b0-423f-8779-1cff62e71748",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "3c3a56ce-d454-4f22-9ab6-93786f628c5d",
									"name": "Create",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"contactId\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"etag\": \"d6f93c54-3ee6-476e-8fe6-09e5f22ed6f8\"\r\n}"
								}
							]
						},
						{
							"name": "Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check expected values\", function () {\r",
											"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
											"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
											"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"eTag\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"accountId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"address\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"msisdn\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"msisdn\"\r",
											"      ]\r",
											"    },\r",
											"    \"metadata\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"user\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"lastUpdatedAt\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"product\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"user\",\r",
											"        \"lastUpdatedAt\",\r",
											"        \"product\"\r",
											"      ]\r",
											"    },\r",
											"    \"properties\": {\r",
											"      \"type\": \"object\"\r",
											"    },\r",
											"    \"groupsInformation\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"eTag\",\r",
											"    \"accountId\",\r",
											"    \"address\",\r",
											"    \"metadata\",\r",
											"    \"properties\",\r",
											"    \"groupsInformation\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4eea854c-ffcc-4d56-be50-90c30b26e97c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": [
								{
									"id": "305a2597-4303-4a7e-b634-45bfca9b5099",
									"name": "Get",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"responseTime": null,
									"body": "{\r\n    \"id\": \"d90d5734-f195-4d6c-92a5-0b81eecf094e\",\r\n    \"eTag\": \"fed3c303-a761-4503-a15d-1ca662bff8e1\",\r\n    \"accountId\": \"c90c5734-f195-4d6c-92a5-0a81eecf093d\",\r\n    \"address\": {\r\n        \"msisdn\": \"+40749255366\"\r\n    },\r\n    \"metadata\": {\r\n        \"user\": \"user\",\r\n        \"lastUpdatedAt\": \"2022-12-13T13:15:38Z\",\r\n        \"product\": \"someProduct\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"3570200b-3dcc-427a-9f26-24e0a748cc4f\"\r\n    },\r\n    \"groupsInformation\": []\r\n}"
								}
							]
						},
						{
							"name": "Patch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
										"exec": [
											"\r",
											"//Preconditions - get already used etag:\r",
											"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\":subscriptionKey\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"//End Of Preconditions \r",
											"\r",
											"//Generating vars:\r",
											"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
											"console.log(\"generated guid1 \"+guid1);\r",
											"pm.collectionVariables.set(\"guid1\", guid1);\r",
											"\r",
											"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
											"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
											"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
											"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d5472ac9-0b26-45a0-a024-9206603b2b54",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.collectionVariables.replaceIn('{{generatedMsisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Check that PATCH request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4835fc45-f69f-4c45-b528-8509ccdd3796",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Put",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
										"exec": [
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.variables.replaceIn('{{X-Subscription-Key}}')\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
											"});\r",
											"console.warn(\"used col etag is: \"+pm.collectionVariables.get(\"etag\"));\r",
											"console.warn(\"used env etag is: \"+pm.environment.get(\"etag\"));\r",
											"console.warn(\"usedlocal  etag is: \"+pm.variables.get(\"etag\"));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
										"exec": [
											"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
											"\r",
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0ae4dccd-cfeb-4f3f-8fd2-7927cbf86c2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "GetPut",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var responseJson  = pm.response.json();\r",
											"var expectedMsisdn = pm.environment.replaceIn('{{msisdn}}');\r",
											"console.log(\"obtained msisdn is: \"+expectedMsisdn)\r",
											"\r",
											"pm.test(\"Check that PUT request updated the contact\", function () {\r",
											"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "645f2bb4-9af6-4630-a1ef-6d825a2eaf9d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "185a978c-4335-499b-bac1-7786f40425c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
										"exec": [
											"var contactId = pm.environment.get(\"contactId\");\r",
											"var responseJson = null; \r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + contactId,\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"content-type\": \"application/json\",\r",
											"        \"accept\": \"application/json\",\r",
											"        \"X-Client-Product\": \"someProduct\",\r",
											"        \"X-Client-User\": \"user\",\r",
											"        \"X-Subscription-Key\": pm.environment.get(\"X-Subscription-Key\")\r",
											"    },\r",
											"    body: {}\r",
											"}, function (err, res) {\r",
											"    responseJson  = res.json();\r",
											"    pm.test(\"Check that DELETE request actually deleted the contact, by GET request\", function () {\r",
											"        pm.expect(responseJson.errors[0].error).to.eql(\"The requested contact could not be found.\");\r",
											"        pm.expect(responseJson.errors[0].code).to.eql(\"contact_not_found\");\r",
											"        });\r",
											"});\r",
											"//Above test is written here and not as a separate GET so that we verify the DELETE functionality but also preserve the upper level test which checks \"susccess error codes\", not 404 - contact_not_found\r",
											"\r",
											"//var responseJson  = pm.response.json();\r",
											"var schema = {}\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52e0e084-1533-4cc9-ace6-f57c2e767163",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						},
						{
							"name": "ReCreate (useful for chaining)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2e821cd-8a00-44ab-abcc-08c9f95c9da9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86c1a5ac-6dc5-4678-ad1b-8bf0847fdde6",
										"exec": [
											"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
											"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
											"});\r",
											"\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contactId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"etag\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contactId\",\r",
											"    \"etag\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting etag var:\r",
											"pm.collectionVariables.set(\"etag\", responseJson.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "13a26b07-c472-41d7-8291-c19c16d90794",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "text"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "text"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
							},
							"response": []
						}
					],
					"id": "66ea72ca-7993-4fe1-8349-5375b2893473",
					"description": "Main functionality of the service - happy paths. Tests can be used as Smoke tests.\n\nStartFragment\n\n- Execute a POST request that creates a resource\n- then execute a GET request to check if it exists\n- then we use a PATCH endpoint to update new data\n- and we again invoke a GET request to validate the new data\n- same for PUT\n- then, we DELETE that resource\n- and we again invoke a GET request to validate that the resource does not exist anymore (inside DELETE request to not fail because of collection test in regards to Status Code - 404 in our case);\n- finally, re-create resource so that we can use it in other tests as an existing testdata.\n    \n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c4cec44-1d94-431f-b0fb-416fb18d2846",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d2f2f4b-807b-42f8-9ea7-80e1261d7a3b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"FolderLevelTest1: Checking response status code to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "ExtendedPositiveTesting_WithOptionalParameters",
					"item": [
						{
							"name": "ValidSpecialCharacters",
							"item": [
								{
									"name": "Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4bbe0765-5f59-47fd-b9aa-d2b65305244f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "20d3fe42-c324-490b-85c3-980e12e51376",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etagCreate_OptionalFields_WithEmoji\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "923bbc33-9ef1-4b75-86d6-8e8389517c45",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields_WithEmoji}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John🤮 Smith🤮\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields_WithEmoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John🤮 Smith🤮\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ec21e689-0590-4d52-b35b-b05efe07e04f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_FilterByMetadata_Emoji",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        pm.expect(responseJson.results[i].properties.__displayName).to.contains(\"🤮\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "79f4ef72-883b-49c6-80a3-424910fc7f8e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=🤮",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "🤮"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "88a30bdb-8c99-4159-b7bd-c5b3feab9305"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Search",
									"item": [
										{
											"name": "Get_SearchByMetadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d71369f8-fb4c-4bff-8a57-b2244148fd39",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByMetadata_Emoji",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.__displayName).to.contain(pm.variables.replaceIn('{{searchMetadata}}'))\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"Smith🤮\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f335b2a6-cd8f-4813-b905-629d1abfc722",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchMetadata}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_SearchByPartialMsisdn",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{searchPartialMsisdn}}'))\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchPartialMsisdn\", \"447\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "13e06c50-19a9-44e1-8108-0bf3d9eace5c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchPartialMsisdn}}",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "search",
															"value": "{{searchPartialMsisdn}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "4f42cbc5-80a4-4e7c-9747-1feb1eeb86fd"
								},
								{
									"name": "Filter",
									"item": [
										{
											"name": "Create_OptionalFields_UniqueItemForFilter",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "09b7e59b-1f8d-4e22-9893-6f97e0b6304c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"uniqueFilter\": \"{{uniqueFilter}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "1b7b630c-a1ed-4773-a6bf-d93f4e115b94",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined1\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Create_OptionalFields_UniqueItemForFilterCombined2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"uniqueFilter\", \"unique\"+pm.variables.replaceIn('{{$guid}}'));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ec923459-eb1f-4c2e-9a9c-f87491aba2b0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"combined\": \"combined2\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "GetAllContacts_CombinedFilter",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Checkcombined filter results\", function () {\r",
															"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
															"    pm.expect(responseJson.results[0].properties.test).to.eql(\"test\");\r",
															"    pm.expect(responseJson.results[0].properties.Department).to.eql(\"Engineering\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.greaterThan(0);\r",
															"    pm.expect(responseJson.results.length).to.eql(15);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"continuationToken\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"test\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"test\"\r",
															"              ]\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"continuationToken\",\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting continuationToken var:\r",
															"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d7c63a60-e11b-4133-a25d-157f55266d7c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?test=test&Department=Engineering",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "test",
															"value": "test"
														},
														{
															"key": "Department",
															"value": "Engineering"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_FilterByOneItemPartial",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
															"        pm.expect(responseJson.results[i].properties.uniqueFilter).to.contain(\"unique\")\r",
															"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
															"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"//pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "2a902a27-dfd8-4271-9fcd-b1194f028536",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=unique",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "unique"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_Filter_ReturnUnitedResulted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength, \"--no results--\").to.not.eql(0);\r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    var arr = [\"combined1\", \"combined2\"];\r",
															"    pm.expect(responseJson.results.length).to.be.gte(2);\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.combined).to.be.oneOf(arr);\r",
															"    }\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
														"exec": [
															"pm.collectionVariables.set(\"searchMetadata\", \"John\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "3d23e007-9133-4fa6-abad-f814874fac42",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters=combined1,combined2",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts",
														""
													],
													"query": [
														{
															"key": "filters",
															"value": "combined1,combined2"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_WithMsisdn_And_Property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check expected account and metadata - common values\", function () {\r",
															"    pm.expect(responseJson.results[0].address.msisdn).to.contain(\"477\");\r",
															"    pm.expect(responseJson.results[0].properties.__displayName).to.contain(\"John\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check count of returned results is 15 maximum\", function () {\r",
															"    pm.expect(responseJson.results.length).to.be.gt(0);\r",
															"\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "e1dbbdf6-b215-436e-9b6d-ebce374404cd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?address.msisdn=477&__displayName=John",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "address.msisdn",
															"value": "477"
														},
														{
															"key": "__displayName",
															"value": "John"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create_6FilterItems",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"//Generating vars:\r",
															"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
															"console.log(\"generated guidForContactID \"+guidForContactID);\r",
															"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
															"\r",
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
															"var responseJson  = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
															"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
															"});\r",
															"\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"contactId\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"etag\": {\r",
															"      \"type\": \"string\"\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"contactId\",\r",
															"    \"etag\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});\r",
															"\r",
															"//Setting etag var:\r",
															"pm.collectionVariables.set(\"etagFilter\", responseJson.eTag);"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f3464295-a9da-4dc8-a59f-11cc7356ba3f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"filter1\": \"filter1\",\r\n        \"filter2\": \"filter2\",\r\n        \"filter3\": \"filter3\",\r\n        \"filter4\": \"filter4\",\r\n        \"filter5\": \"filter5\",\r\n        \"filter6\": \"filter6\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
											},
											"response": []
										},
										{
											"name": "Get_CombinedFilter_5FilterItemsMax",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Check results contain at least 1 item with the 5 filtered items and Check values\", function () {\r",
															"    var resultsLength = responseJson.results.length;\r",
															"    pm.expect(resultsLength).to.be.greaterThan(0);\r",
															"   \r",
															"    //console.log(\"resultsLength:\"+resultsLength)\r",
															"    for (var i=0; i<resultsLength; i++) {\r",
															"        pm.expect(responseJson.results[i].properties.filter1).to.eql('filter1');\r",
															"        pm.expect(responseJson.results[i].properties.filter2).to.eql('filter2');\r",
															"        pm.expect(responseJson.results[i].properties.filter3).to.eql('filter3');\r",
															"        pm.expect(responseJson.results[i].properties.filter4).to.eql('filter4');\r",
															"        pm.expect(responseJson.results[i].properties.filter5).to.eql('filter5');\r",
															"        pm.expect(responseJson.results[i].properties.filter6).to.eql('filter6');\r",
															"    }\r",
															"});\r",
															"\r",
															"var schema = {\r",
															"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"results\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": [\r",
															"        {\r",
															"          \"type\": \"object\",\r",
															"          \"properties\": {\r",
															"            \"id\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"eTag\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"accountId\": {\r",
															"              \"type\": \"string\"\r",
															"            },\r",
															"            \"address\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"msisdn\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"msisdn\"\r",
															"              ]\r",
															"            },\r",
															"            \"metadata\": {\r",
															"              \"type\": \"object\",\r",
															"              \"properties\": {\r",
															"                \"user\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"lastUpdatedAt\": {\r",
															"                  \"type\": \"string\"\r",
															"                },\r",
															"                \"product\": {\r",
															"                  \"type\": \"string\"\r",
															"                }\r",
															"              },\r",
															"              \"required\": [\r",
															"                \"user\",\r",
															"                \"lastUpdatedAt\",\r",
															"                \"product\"\r",
															"              ]\r",
															"            },\r",
															"            \"properties\": {\r",
															"              \"type\": \"object\"\r",
															"            },\r",
															"            \"groupsInformation\": {\r",
															"              \"type\": \"array\",\r",
															"              \"items\": {}\r",
															"            }\r",
															"          },\r",
															"          \"required\": [\r",
															"            \"id\",\r",
															"            \"eTag\",\r",
															"            \"accountId\",\r",
															"            \"address\",\r",
															"            \"metadata\",\r",
															"            \"properties\",\r",
															"            \"groupsInformation\"\r",
															"          ]\r",
															"        }\r",
															"      ]\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"results\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"pm.test('Check if Schema is valid', function () {\r",
															"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "07584794-e986-414b-9943-b23474b7d4a2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "7fb96175-7beb-4e7f-a356-b0699e57a865"
								}
							],
							"id": "8b7ecd50-4f12-47ce-946a-04093a161999"
						},
						{
							"name": "RequestBodyParameters",
							"item": [
								{
									"name": "Create_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "346b9783-fc9a-433d-974c-e966022b6db9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\",\r\n        \"__displayName\": \"John Smith\",\r\n        \"Department\": \"Engineering\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_Create_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check optional fields\", function () {\r",
													"    pm.expect(responseJson.properties.test).to.eql(\"test\");\r",
													"    pm.expect(responseJson.properties.__displayName).to.eql(\"John Smith\");\r",
													"    pm.expect(responseJson.properties.Department).to.eql(\"Engineering\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "738214ca-2d70-4572-9229-980e1d9784c0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.results[0].address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\"));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "981aa681-a191-434b-9440-1d33675ee64a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    //console.log(\"resultsLength:\"+resultsLength)\r",
													"    for (var i=0; i<resultsLength; i++) {\r",
													"        console.log(responseJson.results[i].address.msisdn);\r",
													"        pm.expect(responseJson.results[i].accountId).to.eql(expectedAccountId);\r",
													"        pm.expect(responseJson.results[i].address.msisdn).to.contain(pm.variables.replaceIn('{{newEncodedMsisdn}}'))\r",
													"        pm.expect(responseJson.results[i].metadata.user).to.eql(\"user\");\r",
													"        pm.expect(responseJson.results[i].metadata.product).to.eql(\"someProduct\");\r",
													"    }\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": [\r",
													"        {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"eTag\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"accountId\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"address\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"msisdn\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"msisdn\"\r",
													"              ]\r",
													"            },\r",
													"            \"metadata\": {\r",
													"              \"type\": \"object\",\r",
													"              \"properties\": {\r",
													"                \"user\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"lastUpdatedAt\": {\r",
													"                  \"type\": \"string\"\r",
													"                },\r",
													"                \"product\": {\r",
													"                  \"type\": \"string\"\r",
													"                }\r",
													"              },\r",
													"              \"required\": [\r",
													"                \"user\",\r",
													"                \"lastUpdatedAt\",\r",
													"                \"product\"\r",
													"              ]\r",
													"            },\r",
													"            \"properties\": {\r",
													"              \"type\": \"object\"\r",
													"            },\r",
													"            \"groupsInformation\": {\r",
													"              \"type\": \"array\",\r",
													"              \"items\": {}\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"eTag\",\r",
													"            \"accountId\",\r",
													"            \"address\",\r",
													"            \"metadata\",\r",
													"            \"properties\",\r",
													"            \"groupsInformation\"\r",
													"          ]\r",
													"        }\r",
													"      ]\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "352feec8-82da-4243-8d2a-354c928e7333",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_AddNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													"var guid2 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid2 \"+guid2);\r",
													"pm.collectionVariables.set(\"guid2\", guid2);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3720f076-7366-454f-87f6-dc95103369ce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\",\r\n        \"guidGeneratedNew\": \"{{guid2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_AddNewPropery",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"var guidGenerated2 = pm.collectionVariables.replaceIn('{{guid2}}');\r",
													"console.log(\"obtained guid2 is: \"+guidGenerated2)\r",
													"\r",
													"pm.test(\"Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated2);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "66e4db2f-d5ce-4766-9be2-df2cf0cf65a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.collectionVariables.get(\"guidForContactID\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etagCreate_OptionalFields is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etagCreate_OptionalFields\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "71490822-bbc8-41f4-8f0b-48c258f55d32",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etagCreate_OptionalFields}}\",\r\n    \"properties\": {\r\n        \"guidGeneratedNew\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}/"
									},
									"response": []
								},
								{
									"name": "Get_Patch_OptionalFields_UpdateNewProperty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Check that PATCH request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGeneratedNew).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ea9eecaf-93d2-486b-a8d1-32ae3111d274",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_OptionalFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"pm.collectionVariables.set(\"guidGenerated1\", pm.variables.get(\"guidGenerated\"));\r",
													"\r",
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b461525c-f0c7-4dbc-bc08-3c1131ebe9fc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Put_OptionalFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var guidGenerated1 = pm.collectionVariables.replaceIn('{{guid1}}');\r",
													"console.log(\"obtained guid1 is: \"+guidGenerated1)\r",
													"\r",
													"pm.test(\"Check that PUT request updated the contact\", function () {\r",
													"    pm.expect(responseJson.properties.guidGenerated).to.eql(guidGenerated1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "599bcbd8-b9a9-4e8c-890b-789e07934aee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_UsedAsCreate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{guidForContactID}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"//pm.collectionVariables.set(\"etagPut_UsedAsCreate\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "672b9e71-be0c-4066-a029-5dd419d6a7cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{guidForContactID}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_MissingMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"    console.log(\"new etag is: \"+res.json().eTag)\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c9f44295-6ea0-436a-9341-d49cfec8bb8f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_NullMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that the ContactID is the expected one\", function () {\r",
													"    pm.expect(responseJson.contactId).to.eql(expectedContactID);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"if (responseJson.etag != null){\r",
													"    console.log(\"new etag is: \"+responseJson.etag)\r",
													"    pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"}\r",
													"else{\r",
													"    console.error(\"Possible errors in response\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "540fe95c-56db-4ace-8910-2c73f02982c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Get_Patch_CheckNoUpdates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"var msisdn = pm.environment.replaceIn('{{msisdn}}');\r",
													"console.log(\"obtained msisdn: \"+msisdn)\r",
													"\r",
													"pm.test(\"Check that PATCH request did not update the contact - should see same msisdn\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(msisdn);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "63df9e61-1ef1-4aa0-a724-9b28eca529ab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "4075b1b3-7f8f-43e8-ba4a-936bca219517"
						},
						{
							"name": "Other",
							"item": [
								{
									"name": "CreateWithoutID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f6f5719a-71a6-4324-8d2c-ba7aa0425d66",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "GetCreateWithoutID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
													"var expectedContactID = pm.variables.replaceIn('{{generatedContactID}}');\r",
													"var expectedEtag = pm.collectionVariables.replaceIn('{{etag}}');\r",
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    pm.expect(responseJson.id).to.eql(expectedContactID);\r",
													"    pm.expect(responseJson.eTag).to.eql(expectedEtag);\r",
													"    pm.expect(responseJson.accountId).to.eql(expectedAccountId);\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"    pm.expect(responseJson.metadata.user).to.eql(\"user\");\r",
													"    pm.expect(responseJson.metadata.product).to.eql(\"someProduct\");\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b0539b52-f0b9-460c-a793-39ef5757ce26",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"var  generatedMsisdnWithDash1 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn1 = \"+447\" + generatedMsisdnWithDash1.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn1\", generatedMsisdn1);\r",
													"console.log(\"generatedMsisdn1 is: \",generatedMsisdn1);\r",
													"\r",
													"var  generatedMsisdnWithDash2 = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn2 = \"+447\" + generatedMsisdnWithDash2.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn2\", generatedMsisdn2);\r",
													"console.log(\"generatedMsisdn2 is: \",generatedMsisdn2);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var expectedContactID = pm.variables.replaceIn('{{contactId}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contactId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"etag\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contactId\",\r",
													"    \"etag\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													"\r",
													"//Setting etag var:\r",
													"pm.collectionVariables.set(\"generatedContactID\", responseJson.contactId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0fd33627-655c-47ba-973c-b90af14d8948",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn1}}\",\r\n        \"msisdn\": \"{{generatedMsisdn2}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
									},
									"response": []
								},
								{
									"name": "Get_Create_with2Msisdns_ShoudTakeLast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var expectedMsisdn = pm.variables.replaceIn('{{generatedMsisdn2}}');\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check expected values\", function () {\r",
													"    pm.expect(responseJson.address.msisdn).to.eql(expectedMsisdn);\r",
													"});\r",
													"\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eTag\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"accountId\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"address\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"msisdn\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"msisdn\"\r",
													"      ]\r",
													"    },\r",
													"    \"metadata\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"user\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"lastUpdatedAt\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"product\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"user\",\r",
													"        \"lastUpdatedAt\",\r",
													"        \"product\"\r",
													"      ]\r",
													"    },\r",
													"    \"properties\": {\r",
													"      \"type\": \"object\"\r",
													"    },\r",
													"    \"groupsInformation\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"eTag\",\r",
													"    \"accountId\",\r",
													"    \"address\",\r",
													"    \"metadata\",\r",
													"    \"properties\",\r",
													"    \"groupsInformation\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "af1dab19-a82b-46f7-807e-a41c35bfe3ba",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{generatedContactID}}"
									},
									"response": []
								}
							],
							"id": "f62662bd-9e3a-42aa-b278-1dbe215725f6"
						}
					],
					"id": "2065ff3c-6325-4970-a23a-d8373ea0b0ca",
					"description": "Positive tests based on: optional parameters and extra functionality\n\nEndFragment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0a2a772b-d844-48b2-bc25-b4907dd8afb6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1df07a10-077b-41c2-9662-bc27324590ee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"FolderLevelTest1: Checking response status to be one of 200, 201 or 204\", function () {",
									"    const expectedStatusCodes = [200, 201, 204];",
									"    var errorMessage = `expected response status to be one of ${expectedStatusCodes} but got ${pm.response.code}.`",
									"    pm.expect(pm.response.code).to.be.oneOf(expectedStatusCodes, errorMessage);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "NegativeTesting_WithValidInput",
					"item": [
						{
							"name": "NonExisting",
							"item": [
								{
									"name": "GET_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0c52558e-ff8f-4185-be08-d35cef3b4f52",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "Patch_NonExistingContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 404 NotFound\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "434ae8a2-d686-4fc0-8246-9ecac59f6b81",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								},
								{
									"name": "GET_NonExistingAccountAndContact",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 404 Not Found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The requested contact could not be found.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_not_found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "51543cb2-59a0-4d08-9023-687efa5295d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/1bdf73c0-9dc1-44de-8699-8e26393a0777/contacts/1bdf73c0-9dc1-44de-8699-8e26393a0777"
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_Partial_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "7a922a4e-1895-4667-acab-3450e9b3a93a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=000",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMsisdn_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a5c6a2e2-a3f3-46cb-8500-f109dab83eac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?address.msisdn=+40749255311",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "address.msisdn",
													"value": "+40749255311"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMetadata_NonExisting",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var schema = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"results\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"results\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"var responseJson = pm.response.json();\r",
													"pm.test('Check if Schema is valid', function () {\r",
													"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6b4bfada-af59-4cb2-9993-54e108a60815",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search=DoesNotExist",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "DoesNotExist"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_NonExisting",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 204 NoContent\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d1035c00-6221-4219-a9be-d58045070967",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/57aecf82-4e89-47c0-ad95-cf8120369605"
									},
									"response": []
								}
							],
							"id": "51bdf41b-6271-4d12-ad42-f16967ab93c7"
						},
						{
							"name": "Duplicate",
							"item": [
								{
									"name": "Create_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "77ae58c3-2dd6-42fd-9c65-5465eeeaa08d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a492c63f-783d-49e8-b7a5-690551e447ad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PATCH_WithSameID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"msisdn\", \"+40749255355\");\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f5ce006d-470a-4439-ab7a-83a50518b3ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Create_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a957f50e-8122-4c7b-8fa9-44b46ced7715",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});\r",
													"//PossibleBug "
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "03334d8d-8430-4b85-9343-5f4a1e93028e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_WithSameMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.variables.set(\"etag\", res.json().eTag);\r",
													"    pm.variables.set(\"existingMsisdn\", \"+447132211217\"); //TODO to dynamically get msisdn if this one is deleted from DB \r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 409 conflict\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact id and the msisdn should be unique. In order to update an existing contact, use either PUT or PATCH\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"conflict\");\r",
													"});\r",
													"//PossibleBug "
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "612ba0d1-bbed-443a-83d4-29bd0c8bb6cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{existingMsisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "e98d57d6-8be8-4fa3-996f-d264dc68b321"
						},
						{
							"name": "UnAuthorized",
							"item": [
								{
									"name": "Create_Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to missing subscription key. Make sure to include subscription key when making requests to an API.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "39cdb57f-3d45-4377-ad8d-8d2104627e9f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "a92e763e-7332-4780-af18-5135200b082f"
						}
					],
					"id": "4efc5885-ff26-4f1f-98a7-c0b34efdbc09",
					"description": "Example:\n\nvalid user input - example: try to add an already existing item (with same ID)\n\nEndFragment"
				},
				{
					"name": "NegativeTesting_WithInvalidInput",
					"item": [
						{
							"name": "LengthValidation",
							"item": [
								{
									"name": "Create_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1d4488d8-86f7-4c24-8985-753f8c69ede4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_OptionalFields_CheckMaxLengthForProperty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f411fa09-76b9-4f12-87b0-26dc23e77aa7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "f9fba11f-9652-4a06-8272-467302df7f32"
						},
						{
							"name": "Required",
							"item": [
								{
									"name": "Headers",
									"item": [
										{
											"name": "CreateWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "ac18bccf-e6b3-4f41-9960-fdf0da74f9f4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "PatchWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "d049569f-8365-4e88-95a3-77d2c8262e2f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "9e4e8fa3-5575-4ec0-b998-c539af5a7801",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PatchWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "6ebbb6fc-0ff0-4278-9fbc-deb2cb41832f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "PutWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "f66fc7c7-25df-427a-acb4-19fb701a23a0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "GetWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "684d2cbc-6659-4e63-bbf8-0e68a53e6098",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "CreateWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
															"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
															"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
															"console.log(\"generatedMsisdn is: \",generatedMsisdn);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-User header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"user_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "18523029-b01b-423e-bca9-c39372870bf8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutProductHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73271a62-834e-4474-95a0-05464c9855fb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
														"exec": [
															"var responseJson  = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
															"    pm.expect(responseJson.errors[0].error).to.eql(\"X-Client-Product header is required\");\r",
															"    pm.expect(responseJson.errors[0].code).to.eql(\"product_header_missing\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "31a1f7f4-1405-426d-81c1-12fd172ba226",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										},
										{
											"name": "DeleteWithoutUserHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1c966c2f-c96e-45b8-8482-1be9febbc21c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "983f8878-90c1-4391-84e1-2dd9ba19aecc",
														"exec": [
															"var responseJson  = pm.response.text();\r",
															"console.log(responseJson.length);\r",
															"\r",
															"pm.test(\"Status code is 204 No Content\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check empty response body: \"+pm.info.requestName, function () {\r",
															"   pm.expect(responseJson.length).to.be.eq(0);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "41cf2cf9-2ee8-4da9-9f0f-d6a8d9dccdda",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "text"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "text",
														"disabled": true
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
											},
											"response": []
										}
									],
									"id": "f62d806c-f1c6-4ab6-839b-62278e1b06ae"
								},
								{
									"name": "Create_RequiredField_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9049ff14-b425-469d-b906-44ab02db0572",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Create_RequiredField_msisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"//Generating vars:\r",
													"var guidForContactID = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guidForContactID \"+guidForContactID);\r",
													"pm.collectionVariables.set(\"guidForContactID\", guidForContactID);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4bf0f9e1-2c9e-47ce-acfb-28476fa73f6e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"test\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Patch_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "e6131990-81b2-48ff-9cee-d84b0da3a4df",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_RequiredEtag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bb087586-e2c6-43df-848a-c415d72d2828",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredAddress",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact should have an address object\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"address_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "82b1db63-149e-4e67-aaf4-a8698228be43",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_RequiredMSISDN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b66f6a5-2433-4e09-9080-815f206b7f71",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"//End Of Preconditions \r",
													"\r",
													"//Generating vars:\r",
													"var guid1 = pm.variables.replaceIn('{{$guid}}');\r",
													"console.log(\"generated guid1 \"+guid1);\r",
													"pm.collectionVariables.set(\"guid1\", guid1);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73078ab6-a904-4939-9908-446bf0bcbaca",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The contact MSISDN should be set\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d38650ab-3ba9-4dbe-9229-a67c72a90f5c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n    },\r\n    \"properties\": {\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "26cadf0e-e2de-4f7c-8d06-021feb116a6e"
						},
						{
							"name": "Invalid",
							"item": [
								{
									"name": "IllegalCharacters",
									"item": [],
									"id": "5f09336a-5956-44bf-9c27-c753b31c95d5"
								},
								{
									"name": "GET_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "91cc7c87-f0a1-4d19-aa65-2477ab3603eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "bd3c0b18-651c-4e6d-9ad0-272cde389b9e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Put_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "144ef358-3bc1-46a8-a5f2-7e3f8cb7e5e6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Create_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0ef18a41-82fd-4e6e-99c8-8c979d8b1167",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "524c612a-47e4-4937-bf0c-a973d345d17a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/NotGUID!"
									},
									"response": []
								},
								{
									"name": "Put_InvalidAccountIDAndProductHeader",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "29ec3ff9-570a-484c-8943-4e6be68813b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProductdfdfd",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a6c937d3-eabe-4440-8f4b-b2a2b974646b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{generatedMsisdn}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/NotGUID!/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "GET_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "3960ea41-cb3c-404a-b2ed-2768200fb660",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/NotGUID/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Create_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4c32ea23-d49e-41be-99f6-51425cc378de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b31f1892-1a80-4160-b0e5-26f860395d15",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_With_InvalidJSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The request contained malformed JSON, this is commonly caused by putting objects in property values\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"invalid_json\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0bcfc007-5532-44da-8815-25bd36cde5b4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    },\r\n    \"properties\": {,\r\n        \"guidGenerated\": \"{{guid1}}\"\r\n    }\r\n}"
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Create_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"//pm.variables.set(\"msisdn\", \"+40749255355\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9d91aed7-8d5e-4148-9b65-e6309e8a1395",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Create_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "a7ec7c81-f019-4a9d-bc78-88acfe3b995a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{guidForContactID}}"
									},
									"response": []
								},
								{
									"name": "Put_MissingMsisdn[TPS-397]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test.skip(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The contact MSISDN should be set\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_empty\");\r",
													"pm.expect(jsonData.errors.length).to.eql(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f0a2bbc8-cd43-4066-bcaf-cfb79b25e7b7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"pm.collectionVariables.set(\"etag\", responseJson.etag);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "4c16260e-aa44-42ba-9e64-91ee7753dd48",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Put_InvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bbb752db-c1d0-4ce8-bdbc-3e56c2cc9037",
												"exec": [
													"pm.variables.set(\"guidForContactID\", pm.variables.replaceIn('{{$guid}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ad9f0a5-3846-45a8-a135-e1b805e18367",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "908ea61e-9492-4a6a-943d-fd293baf353d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_Null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"An ETag must be supplied\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_missing\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ab902838-8328-4615-bf0b-f7ab951204b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"null\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_EmptyString[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "05a1d67d-24d2-42e1-b0cc-b6abd2ec3a39",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyChar[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//bug: https://esendex.atlassian.net/browse/TPS-395"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1a05265b-2192-42ef-ad8b-05fdd9c6d51d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"g\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Patch_InvalidEtag_AnyGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "abebb1a2-9ee1-463a-bb8e-5ea2a5731ecb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_Null[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
													"//Doc is either not uptodate or wrong message:\r",
													"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
													"//            \"code\": \"etag_invalid\" -- current  etag_missing"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "d51c0258-484a-4074-ad68-3f2b4d63ec7c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": null,\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_EmptyString[TPS-395]",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test.skip(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													"\r",
													"//TODO from https://github.com/esendex/RichContent.Docs/wiki/Contacts#create-a-contact\r",
													"//Doc is either not uptodate or wrong message:\r",
													"//\"error\": \"The supplied ETag did not match\",  -- current \"An ETag must be supplied\",\r",
													"//            \"code\": \"etag_invalid\" -- current  etag_missing"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "c46eb346-3a0e-45fb-b620-e9a6405c54cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_AnyChar",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f5cf418b-332e-44b3-802e-2e32900ea471",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"f\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "PUT_InvalidEtag_AnyGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c6280fc-fd30-4f77-9d47-d11845ef2d5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92616de5-2127-44f2-83ae-9a399b6457c7",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 428 Precondition Required\", function () {\r",
													"    pm.response.to.have.status(428);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"The supplied ETag did not match\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"etag_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "fd84433e-fa58-4a31-b112-d9db32e260e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"349cba97-16f8-4121-bb95-08dbd4da878d\",\r\n    \"address\": {\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								},
								{
									"name": "Delete_InvalidContact_NotGUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"The given contact id could not be parsed to guid.\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"contact_id_is_not_guid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "35a55a98-62cc-4196-a249-0d28677537b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Delete_InvalidAccountID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "185a978c-4335-499b-bac1-7786f40425c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6576d1fd-dc97-4464-8240-68ae68802a33",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code\", function() {\r",
													"var expectedErrorMessage = \"for non-guid account ids, the product must be in the format <country>.<brand>.<product>\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"account_id_invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "eb97663e-1bb6-4257-9edd-e5de3b1049d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": "{{hostname}}/v1/accounts/invalidAccount/contacts/NotGUID"
									},
									"response": []
								},
								{
									"name": "Get_ByMetadataAndPartialMsisdn_CheckSearchIsReservedKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"'search' is a reserved keyword and cannot be used as a key\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9ba37a82-573e-4b14-b024-99b3b02f2713",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?search={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "search",
													"value": "{{searchMetadata}}"
												},
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByMetadataAndPartialMsisdn_CheckFilterIsReservedKeyword",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400 Bad Request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message and code for request: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.errors[0].error).to.eql(\"'filters' is a reserved keyword and cannot be used as a key\");\r",
													"    pm.expect(responseJson.errors[0].code).to.eql(\"invalidkey\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													"pm.collectionVariables.set(\"searchMetadata\", \"John\");\r",
													"var newEncodedMsisdn = encodeURIComponent(pm.environment.get(\"msisdn\").slice(-3));\r",
													"console.log(\"newEncodedMsisdn: \"+newEncodedMsisdn);\r",
													"pm.collectionVariables.set(\"newEncodedMsisdn\", newEncodedMsisdn);"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0f750cb5-7357-4ae5-a2eb-f2f9d5efadca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?filters={{searchMetadata}}&address.msisdn={{newEncodedMsisdn}}",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "filters",
													"value": "{{searchMetadata}}"
												},
												{
													"key": "address.msisdn",
													"value": "{{newEncodedMsisdn}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_ByInvalidParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Check that no results are returned\", function () {\r",
													"    var resultsLength = responseJson.results.length;\r",
													"    pm.expect(resultsLength).to.eql(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3945cc24-f6bf-43c3-88d1-bdca96198662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "313396d5-9dd4-4f1d-b419-fb1dc17ea813",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "default"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "default"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts/?someInvalidParam=x",
											"host": [
												"{{hostname}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{accountId}}",
												"contacts",
												""
											],
											"query": [
												{
													"key": "someInvalidParam",
													"value": "x"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "c75fa5bd-ad71-493d-b52b-063bd23f05be"
						},
						{
							"name": "InvalidAuthorization",
							"item": [
								{
									"name": "Create_Unauthorized_InvalidAuthorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"var responseJson  = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401 Access Denied\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check expected error message: \"+pm.info.requestName, function () {\r",
													"    pm.expect(responseJson.message).to.eql(\"Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9d47770d-39b1-4222-b996-b9466f6e13ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "cvcv",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"address\":{\r\n        \"msisdn\": \"{{msisdn}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "413da029-a7cc-46b9-be32-4a28023f8db8"
						},
						{
							"name": "MultipleErrors",
							"item": [
								{
									"name": "Patch_OptionalFields_Check2Errors_MaxLengthForPropertyAndInvalidMsisdn",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73271a62-834e-4474-95a0-05464c9855fb",
												"exec": [
													"\r",
													"//Preconditions - get already used etag:\r",
													"var subscriptionKey = pm.variables.replaceIn('{{X-Subscription-Key}}');\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"hostname\") + \"/v1/accounts/\" + pm.environment.get(\"accountId\") + \"/contacts/\" + pm.environment.get(\"contactId\"),\r",
													"    method: \"GET\",\r",
													"    header: {\r",
													"        \"content-type\": \"application/json\",\r",
													"        \"accept\": \"application/json\",\r",
													"        \"X-Client-Product\": \"someProduct\",\r",
													"        \"X-Client-User\": \"user\",\r",
													"        \"X-Subscription-Key\":subscriptionKey\r",
													"    },\r",
													"    body: {}\r",
													"}, function (err, res) {\r",
													"    pm.collectionVariables.set(\"etag\", res.json().eTag);\r",
													"});\r",
													"\r",
													"var  generatedMsisdnWithDash = pm.variables.replaceIn('{{$randomPhoneNumber}}');\r",
													"var generatedMsisdn = \"+447\" + generatedMsisdnWithDash.replaceAll(\"-\",\"\").slice(-9);\r",
													"pm.collectionVariables.set(\"generatedMsisdn\", generatedMsisdn);\r",
													"console.log(\"generatedMsisdn is: \",generatedMsisdn);\r",
													"//End Of Preconditions \r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b8b1d4b-10b6-46e5-9c97-3455e4c15ff0",
												"exec": [
													"pm.test(\"Status code is 400 Bad request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code set1\", function() {\r",
													"var expectedErrorMessage = \"The MSISDN should be in E.164 format\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[0].code).to.eql(\"msisdn_invalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains expected error message and code set2\", function() {\r",
													"var expectedErrorMessage = \"Property value should be 150 characters or less\";\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.errors[1].error).to.eql(expectedErrorMessage);\r",
													"pm.expect(jsonData.errors[1].code).to.eql(\"propertyval_toolong\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b80abf46-ef1d-41a4-bac6-7ed9cb4a9162",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Client-Product",
												"value": "someProduct",
												"type": "text"
											},
											{
												"key": "X-Client-User",
												"value": "user",
												"type": "text"
											},
											{
												"key": "X-Subscription-Key",
												"value": "{{X-Subscription-Key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"etag\": \"{{etag}}\",\r\n    \"address\":{\r\n        \"msisdn\": \"invalid\"\r\n    },\r\n    \"properties\":{\r\n        \"test\": \"testLargeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/{{contactId}}"
									},
									"response": []
								}
							],
							"id": "7c949bad-ca2d-4ecc-8cd0-ec3c17d37438"
						},
						{
							"name": "QueryStrings",
							"item": [
								{
									"name": "Filter",
									"item": [
										{
											"name": "Get_CombinedFilter_Check5FilterMaxError",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
														"exec": [
															"pm.test(\"Status code is 400 Bad Request\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body contains expected error message and code\", function() {\r",
															"var expectedErrorMessage = \"A maximum of 5 filters can be provided\";\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.errors[0].error).to.eql(expectedErrorMessage);\r",
															"pm.expect(jsonData.errors[0].code).to.eql(\"too_many_filters\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
														"exec": [
															"//TODO maybe add precondition: if not 16 contacts => create min 16"
														],
														"type": "text/javascript"
													}
												}
											],
											"id": "20575885-670e-49bb-9a53-1c03f362a189",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Client-Product",
														"value": "someProduct",
														"type": "default"
													},
													{
														"key": "X-Client-User",
														"value": "user",
														"type": "default"
													},
													{
														"key": "X-Subscription-Key",
														"value": "{{X-Subscription-Key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{hostname}}/v1/accounts/{{accountId}}/contacts?filter1=filter1&filter2=filter2&filter3=filter3&filter4=filter4&filter5=filter5&filter6=filter6",
													"host": [
														"{{hostname}}"
													],
													"path": [
														"v1",
														"accounts",
														"{{accountId}}",
														"contacts"
													],
													"query": [
														{
															"key": "filter1",
															"value": "filter1"
														},
														{
															"key": "filter2",
															"value": "filter2"
														},
														{
															"key": "filter3",
															"value": "filter3"
														},
														{
															"key": "filter4",
															"value": "filter4"
														},
														{
															"key": "filter5",
															"value": "filter5"
														},
														{
															"key": "filter6",
															"value": "filter6"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "dd870ddd-c2c8-4f33-928e-a746bc163fb4"
								}
							],
							"id": "85c7f1aa-c723-48e7-9bcd-ec072ba99efc"
						}
					],
					"id": "2bb32fb2-62ac-4aab-9b80-1fcd1af67918",
					"description": "invalid input (trying to add a property which is null or other invalid input - for example a NULL msisdn\n\nEndFragment"
				},
				{
					"name": "Other",
					"item": [
						{
							"name": "GetAllContacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check count of returned results is 15 maximum\", function () {\r",
											"    pm.expect(responseJson.results.length).to.eql(15);\r",
											"\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//Setting continuationToken var:\r",
											"pm.collectionVariables.set(\"continuationToken\", responseJson.continuationToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78d77e73-d17a-436d-8ca3-184d47bd8193",
										"exec": [
											"//TODO maybe add precondition: if not 16 contacts => create min 16"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "98345cf0-8c33-4703-8c9f-2c9c66e0b214",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						},
						{
							"name": "GetAllContacts RetrieveMore",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92bc4f22-e120-439c-851e-8d7c7d2a0af2",
										"exec": [
											"var expectedAccountId = pm.variables.replaceIn('{{accountId}}');\r",
											"var expectedMsisdn = pm.variables.replaceIn('{{msisdn}}');\r",
											"var responseJson  = pm.response.json();\r",
											"\r",
											"pm.test(\"Check expected account and metadata - common values\", function () {\r",
											"    pm.expect(responseJson.results[0].accountId).to.eql(expectedAccountId);\r",
											"    pm.expect(responseJson.results[0].metadata.user).to.eql(\"user\");\r",
											"    pm.expect(responseJson.results[0].metadata.product).to.eql(\"someProduct\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check count of returned results is not 0\", function () {\r",
											"    pm.expect(responseJson.results.length).to.not.eql(0);\r",
											"\r",
											"});\r",
											"\r",
											"var schemaWithContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"continuationToken\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"continuationToken\",\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"var schemaWithoutContinuationToken = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"results\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"eTag\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"accountId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"address\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"msisdn\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"msisdn\"\r",
											"              ]\r",
											"            },\r",
											"            \"metadata\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"user\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"lastUpdatedAt\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"product\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"user\",\r",
											"                \"lastUpdatedAt\",\r",
											"                \"product\"\r",
											"              ]\r",
											"            },\r",
											"            \"properties\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"test\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"test\"\r",
											"              ]\r",
											"            },\r",
											"            \"groupsInformation\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": {}\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"eTag\",\r",
											"            \"accountId\",\r",
											"            \"address\",\r",
											"            \"metadata\",\r",
											"            \"properties\",\r",
											"            \"groupsInformation\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"results\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Check if Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(responseJson, schemaWithoutContinuationToken)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "920ef317-fba6-4526-bb73-fb47b3e3dca3",
										"exec": [
											"var contToken = pm.collectionVariables.get(\"continuationToken\");\r",
											"\r",
											"pm.request.headers.add({\r",
											"key: 'ContinuationToken',\r",
											"value: contToken\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6d24f0d9-1160-4e7c-b91a-db0b95c9fce6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Client-Product",
										"value": "someProduct",
										"type": "default"
									},
									{
										"key": "X-Client-User",
										"value": "user",
										"type": "default"
									},
									{
										"key": "X-Subscription-Key",
										"value": "{{X-Subscription-Key}}",
										"type": "text"
									}
								],
								"url": "{{hostname}}/v1/accounts/{{accountId}}/contacts/"
							},
							"response": []
						}
					],
					"id": "a1a75a83-4b5d-43fe-8d35-76673aaae62f",
					"description": "DestructiveTesting? intentionally attempt to break the API to check its robustness  \nSecurity, authorization, and permission tests?"
				}
			],
			"id": "57ef7edb-2b44-4d28-b535-536f02b8fc34"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0932cf72-f1ed-4909-91a0-f561a4510fcd",
				"type": "text/javascript",
				"exec": [
					"//Pre-request Collection level",
					"console.log(\"RequestName is: \", pm.info.requestName);",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3481de63-9c27-43be-9da5-305b32d55dbd",
				"type": "text/javascript",
				"exec": [
					"/*Performance tests*/",
					"pm.test(\"CollectionLevelTest1: Check Response time is less than 200ms\", function () {",
					"    pm.expect(pm.response.responseTime, \"response time was: \" + pm.response.responseTime).to.be.below(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "a6ac51d7-5cb4-4071-b109-a6fef6740f1d",
			"key": "etag",
			"value": ""
		},
		{
			"id": "bd864005-05cb-450a-b3e9-c4ecc12465b6",
			"key": "guidGenerated1",
			"value": ""
		},
		{
			"id": "14affdc9-cd07-4932-9c7a-c5f7a52a1e14",
			"key": "guid1",
			"value": ""
		},
		{
			"id": "545227eb-cd89-404e-95ee-c2a4b4fb70c9",
			"key": "generatedMsisdn",
			"value": ""
		},
		{
			"id": "4f1f3b73-e85a-4d7b-b0d4-d0a029700521",
			"key": "guidForContactID",
			"value": ""
		},
		{
			"id": "edb31926-af5c-4e44-a035-7741d588cf83",
			"key": "etagCreate_OptionalFields_WithEmoji",
			"value": ""
		},
		{
			"id": "652bb652-8752-4447-b07d-f8edf992f97a",
			"key": "searchMetadata",
			"value": ""
		},
		{
			"id": "fc6a1618-9c04-4a1a-bedd-0c934ad168d0",
			"key": "searchPartialMsisdn",
			"value": ""
		},
		{
			"id": "c27d00fe-0eab-4596-a822-9d8e91a81163",
			"key": "uniqueFilter",
			"value": ""
		},
		{
			"id": "05d0148e-90d6-479b-bbc2-f21f8a3dbb6c",
			"key": "etagFilter",
			"value": ""
		},
		{
			"id": "9ac33366-2884-4217-919c-719945c8f72c",
			"key": "continuationToken",
			"value": ""
		},
		{
			"id": "30eba3fe-457d-43e9-8c3a-0521aaff58b3",
			"key": "newEncodedMsisdn",
			"value": ""
		},
		{
			"id": "3d3e2402-2c39-477b-b925-9235d9e03db9",
			"key": "guid2",
			"value": ""
		},
		{
			"id": "25341cab-d100-4125-8a7e-1c985328e0d6",
			"key": "etagCreate_OptionalFields",
			"value": ""
		},
		{
			"id": "77a3bd1a-c03b-44c7-9dac-ad3a8f1724de",
			"key": "generatedContactID",
			"value": ""
		},
		{
			"id": "1d2c0e03-d740-4483-8129-cffc70c35003",
			"key": "generatedMsisdn1",
			"value": ""
		},
		{
			"id": "e3572bf9-8a11-4a40-a514-6ca73e54ffa5",
			"key": "generatedMsisdn2",
			"value": ""
		}
	]
}